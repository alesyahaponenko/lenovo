/*! For license information please see main.4a950c262341e09df6a6.js.LICENSE.txt */
(()=>{"use strict";var t,e,r={727:(t,e,r)=>{function n(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function i(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}var o,a,s,l,c,u,p,d,h,f,A,_,m,g={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},C={duration:.5,overwrite:!1,delay:0},v=1e8,y=1e-8,b=2*Math.PI,w=b/4,B=0,x=Math.sqrt,k=Math.cos,T=Math.sin,S=function(t){return"string"==typeof t},E=function(t){return"function"==typeof t},O=function(t){return"number"==typeof t},M=function(t){return void 0===t},U=function(t){return"object"==typeof t},P=function(t){return!1!==t},D=function(){return"undefined"!=typeof window},z=function(t){return E(t)||S(t)},Y="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},W=Array.isArray,I=/(?:-?\.?\d|\.)+/gi,q=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,R=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,X=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,j=/[+-]=-?[.\d]+/,V=/[^,'"\[\]\s]+/gi,L=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,Q={},F={},N=function(t){return(F=Ct(t,Q))&&lr},H=function(t,e){return console.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},K=function(t,e){return!e&&console.warn(t)},G=function(t,e){return t&&(Q[t]=e)&&F&&(F[t]=e)||Q},Z=function(){return 0},$={},J=[],tt={},et={},rt={},nt=30,it=[],ot="",at=function(t){var e,r,n=t[0];if(U(n)||E(n)||(t=[t]),!(e=(n._gsap||{}).harness)){for(r=it.length;r--&&!it[r].targetTest(n););e=it[r]}for(r=t.length;r--;)t[r]&&(t[r]._gsap||(t[r]._gsap=new Me(t[r],e)))||t.splice(r,1);return t},st=function(t){return t._gsap||at(Gt(t))[0]._gsap},lt=function(t,e,r){return(r=t[e])&&E(r)?t[e]():M(r)&&t.getAttribute&&t.getAttribute(e)||r},ct=function(t,e){return(t=t.split(",")).forEach(e)||t},ut=function(t){return Math.round(1e5*t)/1e5||0},pt=function(t){return Math.round(1e7*t)/1e7||0},dt=function(t,e){var r=e.charAt(0),n=parseFloat(e.substr(2));return t=parseFloat(t),"+"===r?t+n:"-"===r?t-n:"*"===r?t*n:t/n},ht=function(t,e){for(var r=e.length,n=0;t.indexOf(e[n])<0&&++n<r;);return n<r},ft=function(){var t,e,r=J.length,n=J.slice(0);for(tt={},J.length=0,t=0;t<r;t++)(e=n[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},At=function(t,e,r,n){J.length&&ft(),t.render(e,r,n),J.length&&ft()},_t=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(V).length<2?e:S(t)?t.trim():t},mt=function(t){return t},gt=function(t,e){for(var r in e)r in t||(t[r]=e[r]);return t},Ct=function(t,e){for(var r in e)t[r]=e[r];return t},vt=function t(e,r){for(var n in r)"__proto__"!==n&&"constructor"!==n&&"prototype"!==n&&(e[n]=U(r[n])?t(e[n]||(e[n]={}),r[n]):r[n]);return e},yt=function(t,e){var r,n={};for(r in t)r in e||(n[r]=t[r]);return n},bt=function(t){var e,r=t.parent||a,n=t.keyframes?(e=W(t.keyframes),function(t,r){for(var n in r)n in t||"duration"===n&&e||"ease"===n||(t[n]=r[n])}):gt;if(P(t.inherit))for(;r;)n(t,r.vars.defaults),r=r.parent||r._dp;return t},wt=function(t,e,r,n,i){void 0===r&&(r="_first"),void 0===n&&(n="_last");var o,a=t[n];if(i)for(o=e[i];a&&a[i]>o;)a=a._prev;return a?(e._next=a._next,a._next=e):(e._next=t[r],t[r]=e),e._next?e._next._prev=e:t[n]=e,e._prev=a,e.parent=e._dp=t,e},Bt=function(t,e,r,n){void 0===r&&(r="_first"),void 0===n&&(n="_last");var i=e._prev,o=e._next;i?i._next=o:t[r]===e&&(t[r]=o),o?o._prev=i:t[n]===e&&(t[n]=i),e._next=e._prev=e.parent=null},xt=function(t,e){t.parent&&(!e||t.parent.autoRemoveChildren)&&t.parent.remove(t),t._act=0},kt=function(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var r=t;r;)r._dirty=1,r=r.parent;return t},Tt=function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t},St=function t(e){return!e||e._ts&&t(e.parent)},Et=function(t){return t._repeat?Ot(t._tTime,t=t.duration()+t._rDelay)*t:0},Ot=function(t,e){var r=Math.floor(t/=e);return t&&r===t?r-1:r},Mt=function(t,e){return(t-e._start)*e._ts+(e._ts>=0?0:e._dirty?e.totalDuration():e._tDur)},Ut=function(t){return t._end=pt(t._start+(t._tDur/Math.abs(t._ts||t._rts||y)||0))},Pt=function(t,e){var r=t._dp;return r&&r.smoothChildTiming&&t._ts&&(t._start=pt(r._time-(t._ts>0?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),Ut(t),r._dirty||kt(r,t)),t},Dt=function(t,e){var r;if((e._time||e._initted&&!e._dur)&&(r=Mt(t.rawTime(),e),(!e._dur||Ft(0,e.totalDuration(),r)-e._tTime>y)&&e.render(r,!0)),kt(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(r=t;r._dp;)r.rawTime()>=0&&r.totalTime(r._tTime),r=r._dp;t._zTime=-1e-8}},zt=function(t,e,r,n){return e.parent&&xt(e),e._start=pt((O(r)?r:r||t!==a?Vt(t,r,e):t._time)+e._delay),e._end=pt(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),wt(t,e,"_first","_last",t._sort?"_start":0),qt(e)||(t._recent=e),n||Dt(t,e),t},Yt=function(t,e){return(Q.ScrollTrigger||H("scrollTrigger",e))&&Q.ScrollTrigger.create(e,t)},Wt=function(t,e,r,n){return qe(t,e),t._initted?!r&&t._pt&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&p!==ge.frame?(J.push(t),t._lazy=[e,n],1):void 0:1},It=function t(e){var r=e.parent;return r&&r._ts&&r._initted&&!r._lock&&(r.rawTime()<0||t(r))},qt=function(t){var e=t.data;return"isFromStart"===e||"isStart"===e},Rt=function(t,e,r,n){var i=t._repeat,o=pt(e)||0,a=t._tTime/t._tDur;return a&&!n&&(t._time*=o/t._dur),t._dur=o,t._tDur=i?i<0?1e10:pt(o*(i+1)+t._rDelay*i):o,a>0&&!n?Pt(t,t._tTime=t._tDur*a):t.parent&&Ut(t),r||kt(t.parent,t),t},Xt=function(t){return t instanceof Pe?kt(t):Rt(t,t._dur)},jt={_start:0,endTime:Z,totalDuration:Z},Vt=function t(e,r,n){var i,o,a,s=e.labels,l=e._recent||jt,c=e.duration()>=v?l.endTime(!1):e._dur;return S(r)&&(isNaN(r)||r in s)?(o=r.charAt(0),a="%"===r.substr(-1),i=r.indexOf("="),"<"===o||">"===o?(i>=0&&(r=r.replace(/=/,"")),("<"===o?l._start:l.endTime(l._repeat>=0))+(parseFloat(r.substr(1))||0)*(a?(i<0?l:n).totalDuration()/100:1)):i<0?(r in s||(s[r]=c),s[r]):(o=parseFloat(r.charAt(i-1)+r.substr(i+1)),a&&n&&(o=o/100*(W(n)?n[0]:n).totalDuration()),i>1?t(e,r.substr(0,i-1),n)+o:c+o)):null==r?c:+r},Lt=function(t,e,r){var n,i,o=O(e[1]),a=(o?2:1)+(t<2?0:1),s=e[a];if(o&&(s.duration=e[1]),s.parent=r,t){for(n=s,i=r;i&&!("immediateRender"in n);)n=i.vars.defaults||{},i=P(i.vars.inherit)&&i.parent;s.immediateRender=P(n.immediateRender),t<2?s.runBackwards=1:s.startAt=e[a-1]}return new Le(e[0],s,e[a+1])},Qt=function(t,e){return t||0===t?e(t):e},Ft=function(t,e,r){return r<t?t:r>e?e:r},Nt=function(t,e){return S(t)&&(e=L.exec(t))?e[1]:""},Ht=[].slice,Kt=function(t,e){return t&&U(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&U(t[0]))&&!t.nodeType&&t!==s},Gt=function(t,e,r){return!S(t)||r||!l&&Ce()?W(t)?function(t,e,r){return void 0===r&&(r=[]),t.forEach((function(t){var n;return S(t)&&!e||Kt(t,1)?(n=r).push.apply(n,Gt(t)):r.push(t)}))||r}(t,r):Kt(t)?Ht.call(t,0):t?[t]:[]:Ht.call((e||c).querySelectorAll(t),0)},Zt=function(t){return t.sort((function(){return.5-Math.random()}))},$t=function(t){if(E(t))return t;var e=U(t)?t:{each:t},r=ke(e.ease),n=e.from||0,i=parseFloat(e.base)||0,o={},a=n>0&&n<1,s=isNaN(n)||a,l=e.axis,c=n,u=n;return S(n)?c=u={center:.5,edges:.5,end:1}[n]||0:!a&&s&&(c=n[0],u=n[1]),function(t,a,p){var d,h,f,A,_,m,g,C,y,b=(p||e).length,w=o[b];if(!w){if(!(y="auto"===e.grid?0:(e.grid||[1,v])[1])){for(g=-v;g<(g=p[y++].getBoundingClientRect().left)&&y<b;);y--}for(w=o[b]=[],d=s?Math.min(y,b)*c-.5:n%y,h=y===v?0:s?b*u/y-.5:n/y|0,g=0,C=v,m=0;m<b;m++)f=m%y-d,A=h-(m/y|0),w[m]=_=l?Math.abs("y"===l?A:f):x(f*f+A*A),_>g&&(g=_),_<C&&(C=_);"random"===n&&Zt(w),w.max=g-C,w.min=C,w.v=b=(parseFloat(e.amount)||parseFloat(e.each)*(y>b?b-1:l?"y"===l?b/y:y:Math.max(y,b/y))||0)*("edges"===n?-1:1),w.b=b<0?i-b:i,w.u=Nt(e.amount||e.each)||0,r=r&&b<0?Be(r):r}return b=(w[t]-w.min)/w.max||0,pt(w.b+(r?r(b):b)*w.v)+w.u}},Jt=function(t){var e=Math.pow(10,((t+"").split(".")[1]||"").length);return function(r){var n=Math.round(parseFloat(r)/t)*t*e;return(n-n%1)/e+(O(r)?0:Nt(r))}},te=function(t,e){var r,n,i=W(t);return!i&&U(t)&&(r=i=t.radius||v,t.values?(t=Gt(t.values),(n=!O(t[0]))&&(r*=r)):t=Jt(t.increment)),Qt(e,i?E(t)?function(e){return n=t(e),Math.abs(n-e)<=r?n:e}:function(e){for(var i,o,a=parseFloat(n?e.x:e),s=parseFloat(n?e.y:0),l=v,c=0,u=t.length;u--;)(i=n?(i=t[u].x-a)*i+(o=t[u].y-s)*o:Math.abs(t[u]-a))<l&&(l=i,c=u);return c=!r||l<=r?t[c]:e,n||c===e||O(e)?c:c+Nt(e)}:Jt(t))},ee=function(t,e,r,n){return Qt(W(t)?!e:!0===r?!!(r=0):!n,(function(){return W(t)?t[~~(Math.random()*t.length)]:(r=r||1e-5)&&(n=r<1?Math.pow(10,(r+"").length-2):1)&&Math.floor(Math.round((t-r/2+Math.random()*(e-t+.99*r))/r)*r*n)/n}))},re=function(t,e,r){return Qt(r,(function(r){return t[~~e(r)]}))},ne=function(t){for(var e,r,n,i,o=0,a="";~(e=t.indexOf("random(",o));)n=t.indexOf(")",e),i="["===t.charAt(e+7),r=t.substr(e+7,n-e-7).match(i?V:I),a+=t.substr(o,e-o)+ee(i?r:+r[0],i?0:+r[1],+r[2]||1e-5),o=n+1;return a+t.substr(o,t.length-o)},ie=function(t,e,r,n,i){var o=e-t,a=n-r;return Qt(i,(function(e){return r+((e-t)/o*a||0)}))},oe=function(t,e,r){var n,i,o,a=t.labels,s=v;for(n in a)(i=a[n]-e)<0==!!r&&i&&s>(i=Math.abs(i))&&(o=n,s=i);return o},ae=function(t,e,r){var n,i,o=t.vars,a=o[e];if(a)return n=o[e+"Params"],i=o.callbackScope||t,r&&J.length&&ft(),n?a.apply(i,n):a.call(i)},se=function(t){return xt(t),t.scrollTrigger&&t.scrollTrigger.kill(!1),t.progress()<1&&ae(t,"onInterrupt"),t},le=function(t){var e=(t=!t.name&&t.default||t).name,r=E(t),n=e&&!r&&t.init?function(){this._props=[]}:t,i={init:Z,render:Je,add:We,kill:er,modifier:tr,rawVars:0},o={targetTest:0,get:0,getSetter:Ke,aliases:{},register:0};if(Ce(),t!==n){if(et[e])return;gt(n,gt(yt(t,i),o)),Ct(n.prototype,Ct(i,yt(t,o))),et[n.prop=e]=n,t.targetTest&&(it.push(n),$[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}G(e,n),t.register&&t.register(lr,n,ir)},ce=255,ue={aqua:[0,ce,ce],lime:[0,ce,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,ce],navy:[0,0,128],white:[ce,ce,ce],olive:[128,128,0],yellow:[ce,ce,0],orange:[ce,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[ce,0,0],pink:[ce,192,203],cyan:[0,ce,ce],transparent:[ce,ce,ce,0]},pe=function(t,e,r){return(6*(t+=t<0?1:t>1?-1:0)<1?e+(r-e)*t*6:t<.5?r:3*t<2?e+(r-e)*(2/3-t)*6:e)*ce+.5|0},de=function(t,e,r){var n,i,o,a,s,l,c,u,p,d,h=t?O(t)?[t>>16,t>>8&ce,t&ce]:0:ue.black;if(!h){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),ue[t])h=ue[t];else if("#"===t.charAt(0)){if(t.length<6&&(n=t.charAt(1),i=t.charAt(2),o=t.charAt(3),t="#"+n+n+i+i+o+o+(5===t.length?t.charAt(4)+t.charAt(4):"")),9===t.length)return[(h=parseInt(t.substr(1,6),16))>>16,h>>8&ce,h&ce,parseInt(t.substr(7),16)/255];h=[(t=parseInt(t.substr(1),16))>>16,t>>8&ce,t&ce]}else if("hsl"===t.substr(0,3))if(h=d=t.match(I),e){if(~t.indexOf("="))return h=t.match(q),r&&h.length<4&&(h[3]=1),h}else a=+h[0]%360/360,s=+h[1]/100,n=2*(l=+h[2]/100)-(i=l<=.5?l*(s+1):l+s-l*s),h.length>3&&(h[3]*=1),h[0]=pe(a+1/3,n,i),h[1]=pe(a,n,i),h[2]=pe(a-1/3,n,i);else h=t.match(I)||ue.transparent;h=h.map(Number)}return e&&!d&&(n=h[0]/ce,i=h[1]/ce,o=h[2]/ce,l=((c=Math.max(n,i,o))+(u=Math.min(n,i,o)))/2,c===u?a=s=0:(p=c-u,s=l>.5?p/(2-c-u):p/(c+u),a=c===n?(i-o)/p+(i<o?6:0):c===i?(o-n)/p+2:(n-i)/p+4,a*=60),h[0]=~~(a+.5),h[1]=~~(100*s+.5),h[2]=~~(100*l+.5)),r&&h.length<4&&(h[3]=1),h},he=function(t){var e=[],r=[],n=-1;return t.split(Ae).forEach((function(t){var i=t.match(R)||[];e.push.apply(e,i),r.push(n+=i.length+1)})),e.c=r,e},fe=function(t,e,r){var n,i,o,a,s="",l=(t+s).match(Ae),c=e?"hsla(":"rgba(",u=0;if(!l)return t;if(l=l.map((function(t){return(t=de(t,e,1))&&c+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"})),r&&(o=he(t),(n=r.c).join(s)!==o.c.join(s)))for(a=(i=t.replace(Ae,"1").split(R)).length-1;u<a;u++)s+=i[u]+(~n.indexOf(u)?l.shift()||c+"0,0,0,0)":(o.length?o:l.length?l:r).shift());if(!i)for(a=(i=t.split(Ae)).length-1;u<a;u++)s+=i[u]+l[u];return s+i[a]},Ae=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in ue)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),_e=/hsl[a]?\(/,me=function(t){var e,r=t.join(" ");if(Ae.lastIndex=0,Ae.test(r))return e=_e.test(r),t[1]=fe(t[1],e),t[0]=fe(t[0],e,he(t[1])),!0},ge=function(){var t,e,r,n,i,o,a=Date.now,p=500,d=33,f=a(),A=f,_=1e3/240,m=_,g=[],C=function r(s){var l,c,u,h,C=a()-A,v=!0===s;if(C>p&&(f+=C-d),((l=(u=(A+=C)-f)-m)>0||v)&&(h=++n.frame,i=u-1e3*n.time,n.time=u/=1e3,m+=l+(l>=_?4:_-l),c=1),v||(t=e(r)),c)for(o=0;o<g.length;o++)g[o](u,i,h,s)};return n={time:0,frame:0,tick:function(){C(!0)},deltaRatio:function(t){return i/(1e3/(t||60))},wake:function(){u&&(!l&&D()&&(s=l=window,c=s.document||{},Q.gsap=lr,(s.gsapVersions||(s.gsapVersions=[])).push(lr.version),N(F||s.GreenSockGlobals||!s.gsap&&s||{}),r=s.requestAnimationFrame),t&&n.sleep(),e=r||function(t){return setTimeout(t,m-1e3*n.time+1|0)},h=1,C(2))},sleep:function(){(r?s.cancelAnimationFrame:clearTimeout)(t),h=0,e=Z},lagSmoothing:function(t,e){p=t||1e8,d=Math.min(e,p,0)},fps:function(t){_=1e3/(t||240),m=1e3*n.time+_},add:function(t,e,r){var i=e?function(e,r,o,a){t(e,r,o,a),n.remove(i)}:t;return n.remove(t),g[r?"unshift":"push"](i),Ce(),i},remove:function(t,e){~(e=g.indexOf(t))&&g.splice(e,1)&&o>=e&&o--},_listeners:g}}(),Ce=function(){return!h&&ge.wake()},ve={},ye=/^[\d.\-M][\d.\-,\s]/,be=/["']/g,we=function(t){for(var e,r,n,i={},o=t.substr(1,t.length-3).split(":"),a=o[0],s=1,l=o.length;s<l;s++)r=o[s],e=s!==l-1?r.lastIndexOf(","):r.length,n=r.substr(0,e),i[a]=isNaN(n)?n.replace(be,"").trim():+n,a=r.substr(e+1).trim();return i},Be=function(t){return function(e){return 1-t(1-e)}},xe=function t(e,r){for(var n,i=e._first;i;)i instanceof Pe?t(i,r):!i.vars.yoyoEase||i._yoyo&&i._repeat||i._yoyo===r||(i.timeline?t(i.timeline,r):(n=i._ease,i._ease=i._yEase,i._yEase=n,i._yoyo=r)),i=i._next},ke=function(t,e){return t&&(E(t)?t:ve[t]||function(t){var e,r,n,i,o=(t+"").split("("),a=ve[o[0]];return a&&o.length>1&&a.config?a.config.apply(null,~t.indexOf("{")?[we(o[1])]:(e=t,r=e.indexOf("(")+1,n=e.indexOf(")"),i=e.indexOf("(",r),e.substring(r,~i&&i<n?e.indexOf(")",n+1):n)).split(",").map(_t)):ve._CE&&ye.test(t)?ve._CE("",t):a}(t))||e},Te=function(t,e,r,n){void 0===r&&(r=function(t){return 1-e(1-t)}),void 0===n&&(n=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var i,o={easeIn:e,easeOut:r,easeInOut:n};return ct(t,(function(t){for(var e in ve[t]=Q[t]=o,ve[i=t.toLowerCase()]=r,o)ve[i+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=ve[t+"."+e]=o[e]})),o},Se=function(t){return function(e){return e<.5?(1-t(1-2*e))/2:.5+t(2*(e-.5))/2}},Ee=function t(e,r,n){var i=r>=1?r:1,o=(n||(e?.3:.45))/(r<1?r:1),a=o/b*(Math.asin(1/i)||0),s=function(t){return 1===t?1:i*Math.pow(2,-10*t)*T((t-a)*o)+1},l="out"===e?s:"in"===e?function(t){return 1-s(1-t)}:Se(s);return o=b/o,l.config=function(r,n){return t(e,r,n)},l},Oe=function t(e,r){void 0===r&&(r=1.70158);var n=function(t){return t?--t*t*((r+1)*t+r)+1:0},i="out"===e?n:"in"===e?function(t){return 1-n(1-t)}:Se(n);return i.config=function(r){return t(e,r)},i};ct("Linear,Quad,Cubic,Quart,Quint,Strong",(function(t,e){var r=e<5?e+1:e;Te(t+",Power"+(r-1),e?function(t){return Math.pow(t,r)}:function(t){return t},(function(t){return 1-Math.pow(1-t,r)}),(function(t){return t<.5?Math.pow(2*t,r)/2:1-Math.pow(2*(1-t),r)/2}))})),ve.Linear.easeNone=ve.none=ve.Linear.easeIn,Te("Elastic",Ee("in"),Ee("out"),Ee()),f=7.5625,_=1/(A=2.75),Te("Bounce",(function(t){return 1-m(1-t)}),m=function(t){return t<_?f*t*t:t<.7272727272727273?f*Math.pow(t-1.5/A,2)+.75:t<.9090909090909092?f*(t-=2.25/A)*t+.9375:f*Math.pow(t-2.625/A,2)+.984375}),Te("Expo",(function(t){return t?Math.pow(2,10*(t-1)):0})),Te("Circ",(function(t){return-(x(1-t*t)-1)})),Te("Sine",(function(t){return 1===t?1:1-k(t*w)})),Te("Back",Oe("in"),Oe("out"),Oe()),ve.SteppedEase=ve.steps=Q.SteppedEase={config:function(t,e){void 0===t&&(t=1);var r=1/t,n=t+(e?0:1),i=e?1:0;return function(t){return((n*Ft(0,.99999999,t)|0)+i)*r}}},C.ease=ve["quad.out"],ct("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(t){return ot+=t+","+t+"Params,"}));var Me=function(t,e){this.id=B++,t._gsap=this,this.target=t,this.harness=e,this.get=e?e.get:lt,this.set=e?e.getSetter:Ke},Ue=function(){function t(t){this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,Rt(this,+t.duration,1,1),this.data=t.data,h||ge.wake()}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(this._repeat>0?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,Rt(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(Ce(),!arguments.length)return this._tTime;var r=this._dp;if(r&&r.smoothChildTiming&&this._ts){for(Pt(this,t),!r._dp||r.parent||Dt(r,this);r&&r.parent;)r.parent._time!==r._start+(r._ts>=0?r._tTime/r._ts:(r.totalDuration()-r._tTime)/-r._ts)&&r.totalTime(r._tTime,!0),r=r.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&t<this._tDur||this._ts<0&&t>0||!this._tDur&&!t)&&zt(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===y||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),At(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+Et(this))%(this._dur+this._rDelay)||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+Et(this),e):this.duration()?Math.min(1,this._time/this._dur):this.ratio},e.iteration=function(t,e){var r=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*r,e):this._repeat?Ot(this._tTime,r)+1:1},e.timeScale=function(t){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===t)return this;var e=this.parent&&this._ts?Mt(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||-1e-8===t?0:this._rts,this.totalTime(Ft(-this._delay,this._tDur,e),!0),Ut(this),Tt(this)},e.paused=function(t){return arguments.length?(this._ps!==t&&(this._ps=t,t?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Ce(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==y&&(this._tTime-=y)))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return e&&(e._sort||!this.parent)&&zt(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(P(t)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Mt(e.rawTime(t),this):this._tTime:this._tTime},e.globalTime=function(t){for(var e=this,r=arguments.length?t:e.rawTime();e;)r=e._start+r/(e._ts||1),e=e._dp;return r},e.repeat=function(t){return arguments.length?(this._repeat=t===1/0?-2:t,Xt(this)):-2===this._repeat?1/0:this._repeat},e.repeatDelay=function(t){if(arguments.length){var e=this._time;return this._rDelay=t,Xt(this),e?this.time(e):this}return this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime(Vt(this,t),P(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,P(e))},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-1e-8:0)),this):this._rts<0},e.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},e.isActive=function(){var t,e=this.parent||this._dp,r=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=r&&t<this.endTime(!0)-y))},e.eventCallback=function(t,e,r){var n=this.vars;return arguments.length>1?(e?(n[t]=e,r&&(n[t+"Params"]=r),"onUpdate"===t&&(this._onUpdate=e)):delete n[t],this):n[t]},e.then=function(t){var e=this;return new Promise((function(r){var n=E(t)?t:mt,i=function(){var t=e.then;e.then=null,E(n)&&(n=n(e))&&(n.then||n===e)&&(e.then=t),r(n),e.then=t};e._initted&&1===e.totalProgress()&&e._ts>=0||!e._tTime&&e._ts<0?i():e._prom=i}))},e.kill=function(){se(this)},t}();gt(Ue.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var Pe=function(t){function e(e,r){var i;return void 0===e&&(e={}),(i=t.call(this,e)||this).labels={},i.smoothChildTiming=!!e.smoothChildTiming,i.autoRemoveChildren=!!e.autoRemoveChildren,i._sort=P(e.sortChildren),a&&zt(e.parent||a,n(i),r),e.reversed&&i.reverse(),e.paused&&i.paused(!0),e.scrollTrigger&&Yt(n(i),e.scrollTrigger),i}i(e,t);var r=e.prototype;return r.to=function(t,e,r){return Lt(0,arguments,this),this},r.from=function(t,e,r){return Lt(1,arguments,this),this},r.fromTo=function(t,e,r,n){return Lt(2,arguments,this),this},r.set=function(t,e,r){return e.duration=0,e.parent=this,bt(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new Le(t,e,Vt(this,r),1),this},r.call=function(t,e,r){return zt(this,Le.delayedCall(0,t,e),r)},r.staggerTo=function(t,e,r,n,i,o,a){return r.duration=e,r.stagger=r.stagger||n,r.onComplete=o,r.onCompleteParams=a,r.parent=this,new Le(t,r,Vt(this,i)),this},r.staggerFrom=function(t,e,r,n,i,o,a){return r.runBackwards=1,bt(r).immediateRender=P(r.immediateRender),this.staggerTo(t,e,r,n,i,o,a)},r.staggerFromTo=function(t,e,r,n,i,o,a,s){return n.startAt=r,bt(n).immediateRender=P(n.immediateRender),this.staggerTo(t,e,n,i,o,a,s)},r.render=function(t,e,r){var n,i,o,s,l,c,u,p,d,h,f,A,_=this._time,m=this._dirty?this.totalDuration():this._tDur,g=this._dur,C=t<=0?0:pt(t),v=this._zTime<0!=t<0&&(this._initted||!g);if(this!==a&&C>m&&t>=0&&(C=m),C!==this._tTime||r||v){if(_!==this._time&&g&&(C+=this._time-_,t+=this._time-_),n=C,d=this._start,c=!(p=this._ts),v&&(g||(_=this._zTime),(t||!e)&&(this._zTime=t)),this._repeat){if(f=this._yoyo,l=g+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*l+t,e,r);if(n=pt(C%l),C===m?(s=this._repeat,n=g):((s=~~(C/l))&&s===C/l&&(n=g,s--),n>g&&(n=g)),h=Ot(this._tTime,l),!_&&this._tTime&&h!==s&&(h=s),f&&1&s&&(n=g-n,A=1),s!==h&&!this._lock){var b=f&&1&h,w=b===(f&&1&s);if(s<h&&(b=!b),_=b?0:g,this._lock=1,this.render(_||(A?0:pt(s*l)),e,!g)._lock=0,this._tTime=C,!e&&this.parent&&ae(this,"onRepeat"),this.vars.repeatRefresh&&!A&&(this.invalidate()._lock=1),_&&_!==this._time||c!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(g=this._dur,m=this._tDur,w&&(this._lock=2,_=b?g:-1e-4,this.render(_,!0),this.vars.repeatRefresh&&!A&&this.invalidate()),this._lock=0,!this._ts&&!c)return this;xe(this,A)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(u=function(t,e,r){var n;if(r>e)for(n=t._first;n&&n._start<=r;){if("isPause"===n.data&&n._start>e)return n;n=n._next}else for(n=t._last;n&&n._start>=r;){if("isPause"===n.data&&n._start<e)return n;n=n._prev}}(this,pt(_),pt(n)),u&&(C-=n-(n=u._start))),this._tTime=C,this._time=n,this._act=!p,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,_=0),!_&&n&&!e&&(ae(this,"onStart"),this._tTime!==C))return this;if(n>=_&&t>=0)for(i=this._first;i;){if(o=i._next,(i._act||n>=i._start)&&i._ts&&u!==i){if(i.parent!==this)return this.render(t,e,r);if(i.render(i._ts>0?(n-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(n-i._start)*i._ts,e,r),n!==this._time||!this._ts&&!c){u=0,o&&(C+=this._zTime=-1e-8);break}}i=o}else{i=this._last;for(var B=t<0?t:n;i;){if(o=i._prev,(i._act||B<=i._end)&&i._ts&&u!==i){if(i.parent!==this)return this.render(t,e,r);if(i.render(i._ts>0?(B-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(B-i._start)*i._ts,e,r),n!==this._time||!this._ts&&!c){u=0,o&&(C+=this._zTime=B?-1e-8:y);break}}i=o}}if(u&&!e&&(this.pause(),u.render(n>=_?0:-1e-8)._zTime=n>=_?1:-1,this._ts))return this._start=d,Ut(this),this.render(t,e,r);this._onUpdate&&!e&&ae(this,"onUpdate",!0),(C===m&&this._tTime>=this.totalDuration()||!C&&_)&&(d!==this._start&&Math.abs(p)===Math.abs(this._ts)||this._lock||((t||!g)&&(C===m&&this._ts>0||!C&&this._ts<0)&&xt(this,1),e||t<0&&!_||!C&&!_&&m||(ae(this,C===m&&t>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(C<m&&this.timeScale()>0)&&this._prom())))}return this},r.add=function(t,e){var r=this;if(O(e)||(e=Vt(this,e,t)),!(t instanceof Ue)){if(W(t))return t.forEach((function(t){return r.add(t,e)})),this;if(S(t))return this.addLabel(t,e);if(!E(t))return this;t=Le.delayedCall(0,t)}return this!==t?zt(this,t,e):this},r.getChildren=function(t,e,r,n){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===r&&(r=!0),void 0===n&&(n=-v);for(var i=[],o=this._first;o;)o._start>=n&&(o instanceof Le?e&&i.push(o):(r&&i.push(o),t&&i.push.apply(i,o.getChildren(!0,e,r)))),o=o._next;return i},r.getById=function(t){for(var e=this.getChildren(1,1,1),r=e.length;r--;)if(e[r].vars.id===t)return e[r]},r.remove=function(t){return S(t)?this.removeLabel(t):E(t)?this.killTweensOf(t):(Bt(this,t),t===this._recent&&(this._recent=this._last),kt(this))},r.totalTime=function(e,r){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=pt(ge.time-(this._ts>0?e/this._ts:(this.totalDuration()-e)/-this._ts))),t.prototype.totalTime.call(this,e,r),this._forcing=0,this):this._tTime},r.addLabel=function(t,e){return this.labels[t]=Vt(this,e),this},r.removeLabel=function(t){return delete this.labels[t],this},r.addPause=function(t,e,r){var n=Le.delayedCall(0,e||Z,r);return n.data="isPause",this._hasPause=1,zt(this,n,Vt(this,t))},r.removePause=function(t){var e=this._first;for(t=Vt(this,t);e;)e._start===t&&"isPause"===e.data&&xt(e),e=e._next},r.killTweensOf=function(t,e,r){for(var n=this.getTweensOf(t,r),i=n.length;i--;)De!==n[i]&&n[i].kill(t,e);return this},r.getTweensOf=function(t,e){for(var r,n=[],i=Gt(t),o=this._first,a=O(e);o;)o instanceof Le?ht(o._targets,i)&&(a?(!De||o._initted&&o._ts)&&o.globalTime(0)<=e&&o.globalTime(o.totalDuration())>e:!e||o.isActive())&&n.push(o):(r=o.getTweensOf(i,e)).length&&n.push.apply(n,r),o=o._next;return n},r.tweenTo=function(t,e){e=e||{};var r,n=this,i=Vt(n,t),o=e,a=o.startAt,s=o.onStart,l=o.onStartParams,c=o.immediateRender,u=Le.to(n,gt({ease:e.ease||"none",lazy:!1,immediateRender:!1,time:i,overwrite:"auto",duration:e.duration||Math.abs((i-(a&&"time"in a?a.time:n._time))/n.timeScale())||y,onStart:function(){if(n.pause(),!r){var t=e.duration||Math.abs((i-(a&&"time"in a?a.time:n._time))/n.timeScale());u._dur!==t&&Rt(u,t,0,1).render(u._time,!0,!0),r=1}s&&s.apply(u,l||[])}},e));return c?u.render(0):u},r.tweenFromTo=function(t,e,r){return this.tweenTo(e,gt({startAt:{time:Vt(this,t)}},r))},r.recent=function(){return this._recent},r.nextLabel=function(t){return void 0===t&&(t=this._time),oe(this,Vt(this,t))},r.previousLabel=function(t){return void 0===t&&(t=this._time),oe(this,Vt(this,t),1)},r.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+y)},r.shiftChildren=function(t,e,r){void 0===r&&(r=0);for(var n,i=this._first,o=this.labels;i;)i._start>=r&&(i._start+=t,i._end+=t),i=i._next;if(e)for(n in o)o[n]>=r&&(o[n]+=t);return kt(this)},r.invalidate=function(){var e=this._first;for(this._lock=0;e;)e.invalidate(),e=e._next;return t.prototype.invalidate.call(this)},r.clear=function(t){void 0===t&&(t=!0);for(var e,r=this._first;r;)e=r._next,this.remove(r),r=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),kt(this)},r.totalDuration=function(t){var e,r,n,i=0,o=this,s=o._last,l=v;if(arguments.length)return o.timeScale((o._repeat<0?o.duration():o.totalDuration())/(o.reversed()?-t:t));if(o._dirty){for(n=o.parent;s;)e=s._prev,s._dirty&&s.totalDuration(),(r=s._start)>l&&o._sort&&s._ts&&!o._lock?(o._lock=1,zt(o,s,r-s._delay,1)._lock=0):l=r,r<0&&s._ts&&(i-=r,(!n&&!o._dp||n&&n.smoothChildTiming)&&(o._start+=r/o._ts,o._time-=r,o._tTime-=r),o.shiftChildren(-r,!1,-Infinity),l=0),s._end>i&&s._ts&&(i=s._end),s=e;Rt(o,o===a&&o._time>i?o._time:i,1,1),o._dirty=0}return o._tDur},e.updateRoot=function(t){if(a._ts&&(At(a,Mt(t,a)),p=ge.frame),ge.frame>=nt){nt+=g.autoSleep||120;var e=a._first;if((!e||!e._ts)&&g.autoSleep&&ge._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||ge.sleep()}}},e}(Ue);gt(Pe.prototype,{_lock:0,_hasPause:0,_forcing:0});var De,ze,Ye=function(t,e,r,n,i,o,a){var s,l,c,u,p,d,h,f,A=new ir(this._pt,t,e,0,1,$e,null,i),_=0,m=0;for(A.b=r,A.e=n,r+="",(h=~(n+="").indexOf("random("))&&(n=ne(n)),o&&(o(f=[r,n],t,e),r=f[0],n=f[1]),l=r.match(X)||[];s=X.exec(n);)u=s[0],p=n.substring(_,s.index),c?c=(c+1)%5:"rgba("===p.substr(-5)&&(c=1),u!==l[m++]&&(d=parseFloat(l[m-1])||0,A._pt={_next:A._pt,p:p||1===m?p:",",s:d,c:"="===u.charAt(1)?dt(d,u)-d:parseFloat(u)-d,m:c&&c<4?Math.round:0},_=X.lastIndex);return A.c=_<n.length?n.substring(_,n.length):"",A.fp=a,(j.test(n)||h)&&(A.e=0),this._pt=A,A},We=function(t,e,r,n,i,o,a,s,l){E(n)&&(n=n(i||0,t,o));var c,u=t[e],p="get"!==r?r:E(u)?l?t[e.indexOf("set")||!E(t["get"+e.substr(3)])?e:"get"+e.substr(3)](l):t[e]():u,d=E(u)?l?Ne:Fe:Qe;if(S(n)&&(~n.indexOf("random(")&&(n=ne(n)),"="===n.charAt(1)&&((c=dt(p,n)+(Nt(p)||0))||0===c)&&(n=c)),p!==n||ze)return isNaN(p*n)||""===n?(!u&&!(e in t)&&H(e,n),Ye.call(this,t,e,p,n,d,s||g.stringFilter,l)):(c=new ir(this._pt,t,e,+p||0,n-(p||0),"boolean"==typeof u?Ze:Ge,0,d),l&&(c.fp=l),a&&c.modifier(a,this,t),this._pt=c)},Ie=function(t,e,r,n,i,o){var a,s,l,c;if(et[t]&&!1!==(a=new et[t]).init(i,a.rawVars?e[t]:function(t,e,r,n,i){if(E(t)&&(t=Xe(t,i,e,r,n)),!U(t)||t.style&&t.nodeType||W(t)||Y(t))return S(t)?Xe(t,i,e,r,n):t;var o,a={};for(o in t)a[o]=Xe(t[o],i,e,r,n);return a}(e[t],n,i,o,r),r,n,o)&&(r._pt=s=new ir(r._pt,i,t,0,1,a.render,a,0,a.priority),r!==d))for(l=r._ptLookup[r._targets.indexOf(i)],c=a._props.length;c--;)l[a._props[c]]=s;return a},qe=function t(e,r){var n,i,s,l,c,u,p,d,h,f,A,_,m,g=e.vars,b=g.ease,w=g.startAt,B=g.immediateRender,x=g.lazy,k=g.onUpdate,T=g.onUpdateParams,S=g.callbackScope,E=g.runBackwards,O=g.yoyoEase,M=g.keyframes,U=g.autoRevert,D=e._dur,z=e._startAt,Y=e._targets,W=e.parent,I=W&&"nested"===W.data?W.parent._targets:Y,q="auto"===e._overwrite&&!o,R=e.timeline;if(R&&(!M||!b)&&(b="none"),e._ease=ke(b,C.ease),e._yEase=O?Be(ke(!0===O?b:O,C.ease)):0,O&&e._yoyo&&!e._repeat&&(O=e._yEase,e._yEase=e._ease,e._ease=O),e._from=!R&&!!g.runBackwards,!R||M&&!g.stagger){if(_=(d=Y[0]?st(Y[0]).harness:0)&&g[d.prop],n=yt(g,$),z&&(xt(z.render(-1,!0)),z._lazy=0),w)if(xt(e._startAt=Le.set(Y,gt({data:"isStart",overwrite:!1,parent:W,immediateRender:!0,lazy:P(x),startAt:null,delay:0,onUpdate:k,onUpdateParams:T,callbackScope:S,stagger:0},w))),r<0&&!B&&!U&&e._startAt.render(-1,!0),B){if(r>0&&!U&&(e._startAt=0),D&&r<=0)return void(r&&(e._zTime=r))}else!1===U&&(e._startAt=0);else if(E&&D)if(z)!U&&(e._startAt=0);else if(r&&(B=!1),s=gt({overwrite:!1,data:"isFromStart",lazy:B&&P(x),immediateRender:B,stagger:0,parent:W},n),_&&(s[d.prop]=_),xt(e._startAt=Le.set(Y,s)),r<0&&e._startAt.render(-1,!0),e._zTime=r,B){if(!r)return}else t(e._startAt,y);for(e._pt=e._ptCache=0,x=D&&P(x)||x&&!D,i=0;i<Y.length;i++){if(p=(c=Y[i])._gsap||at(Y)[i]._gsap,e._ptLookup[i]=f={},tt[p.id]&&J.length&&ft(),A=I===Y?i:I.indexOf(c),d&&!1!==(h=new d).init(c,_||n,e,A,I)&&(e._pt=l=new ir(e._pt,c,h.name,0,1,h.render,h,0,h.priority),h._props.forEach((function(t){f[t]=l})),h.priority&&(u=1)),!d||_)for(s in n)et[s]&&(h=Ie(s,n,e,A,c,I))?h.priority&&(u=1):f[s]=l=We.call(e,c,s,"get",n[s],A,I,0,g.stringFilter);e._op&&e._op[i]&&e.kill(c,e._op[i]),q&&e._pt&&(De=e,a.killTweensOf(c,f,e.globalTime(r)),m=!e.parent,De=0),e._pt&&x&&(tt[p.id]=1)}u&&nr(e),e._onInit&&e._onInit(e)}e._onUpdate=k,e._initted=(!e._op||e._pt)&&!m,M&&r<=0&&R.render(v,!0,!0)},Re=function(t,e,r,n){var i,o,a=e.ease||n||"power1.inOut";if(W(e))o=r[t]||(r[t]=[]),e.forEach((function(t,r){return o.push({t:r/(e.length-1)*100,v:t,e:a})}));else for(i in e)o=r[i]||(r[i]=[]),"ease"===i||o.push({t:parseFloat(t),v:e[i],e:a})},Xe=function(t,e,r,n,i){return E(t)?t.call(e,r,n,i):S(t)&&~t.indexOf("random(")?ne(t):t},je=ot+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",Ve={};ct(je+",id,stagger,delay,duration,paused,scrollTrigger",(function(t){return Ve[t]=1}));var Le=function(t){function e(e,r,i,s){var l;"number"==typeof r&&(i.duration=r,r=i,i=null);var c,u,p,d,h,f,A,_,m=(l=t.call(this,s?r:bt(r))||this).vars,C=m.duration,v=m.delay,y=m.immediateRender,b=m.stagger,w=m.overwrite,B=m.keyframes,x=m.defaults,k=m.scrollTrigger,T=m.yoyoEase,S=r.parent||a,E=(W(e)||Y(e)?O(e[0]):"length"in r)?[e]:Gt(e);if(l._targets=E.length?at(E):K("GSAP target "+e+" not found. https://greensock.com",!g.nullTargetWarn)||[],l._ptLookup=[],l._overwrite=w,B||b||z(C)||z(v)){if(r=l.vars,(c=l.timeline=new Pe({data:"nested",defaults:x||{}})).kill(),c.parent=c._dp=n(l),c._start=0,b||z(C)||z(v)){if(d=E.length,A=b&&$t(b),U(b))for(h in b)~je.indexOf(h)&&(_||(_={}),_[h]=b[h]);for(u=0;u<d;u++)(p=yt(r,Ve)).stagger=0,T&&(p.yoyoEase=T),_&&Ct(p,_),f=E[u],p.duration=+Xe(C,n(l),u,f,E),p.delay=(+Xe(v,n(l),u,f,E)||0)-l._delay,!b&&1===d&&p.delay&&(l._delay=v=p.delay,l._start+=v,p.delay=0),c.to(f,p,A?A(u,f,E):0),c._ease=ve.none;c.duration()?C=v=0:l.timeline=0}else if(B){bt(gt(c.vars.defaults,{ease:"none"})),c._ease=ke(B.ease||r.ease||"none");var M,D,I,q=0;if(W(B))B.forEach((function(t){return c.to(E,t,">")}));else{for(h in p={},B)"ease"===h||"easeEach"===h||Re(h,B[h],p,B.easeEach);for(h in p)for(M=p[h].sort((function(t,e){return t.t-e.t})),q=0,u=0;u<M.length;u++)(I={ease:(D=M[u]).e,duration:(D.t-(u?M[u-1].t:0))/100*C})[h]=D.v,c.to(E,I,q),q+=I.duration;c.duration()<C&&c.to({},{duration:C-c.duration()})}}C||l.duration(C=c.duration())}else l.timeline=0;return!0!==w||o||(De=n(l),a.killTweensOf(E),De=0),zt(S,n(l),i),r.reversed&&l.reverse(),r.paused&&l.paused(!0),(y||!C&&!B&&l._start===pt(S._time)&&P(y)&&St(n(l))&&"nested"!==S.data)&&(l._tTime=-1e-8,l.render(Math.max(0,-v))),k&&Yt(n(l),k),l}i(e,t);var r=e.prototype;return r.render=function(t,e,r){var n,i,o,a,s,l,c,u,p,d=this._time,h=this._tDur,f=this._dur,A=t>h-y&&t>=0?h:t<y?0:t;if(f){if(A!==this._tTime||!t||r||!this._initted&&this._tTime||this._startAt&&this._zTime<0!=t<0){if(n=A,u=this.timeline,this._repeat){if(a=f+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*a+t,e,r);if(n=pt(A%a),A===h?(o=this._repeat,n=f):((o=~~(A/a))&&o===A/a&&(n=f,o--),n>f&&(n=f)),(l=this._yoyo&&1&o)&&(p=this._yEase,n=f-n),s=Ot(this._tTime,a),n===d&&!r&&this._initted)return this._tTime=A,this;o!==s&&(u&&this._yEase&&xe(u,l),!this.vars.repeatRefresh||l||this._lock||(this._lock=r=1,this.render(pt(a*o),!0).invalidate()._lock=0))}if(!this._initted){if(Wt(this,t<0?t:n,r,e))return this._tTime=0,this;if(d!==this._time)return this;if(f!==this._dur)return this.render(t,e,r)}if(this._tTime=A,this._time=n,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=c=(p||this._ease)(n/f),this._from&&(this.ratio=c=1-c),n&&!d&&!e&&(ae(this,"onStart"),this._tTime!==A))return this;for(i=this._pt;i;)i.r(c,i.d),i=i._next;u&&u.render(t<0?t:!n&&l?-1e-8:u._dur*u._ease(n/this._dur),e,r)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(t<0&&this._startAt&&this._startAt.render(t,!0,r),ae(this,"onUpdate")),this._repeat&&o!==s&&this.vars.onRepeat&&!e&&this.parent&&ae(this,"onRepeat"),A!==this._tDur&&A||this._tTime!==A||(t<0&&this._startAt&&!this._onUpdate&&this._startAt.render(t,!0,!0),(t||!f)&&(A===this._tDur&&this._ts>0||!A&&this._ts<0)&&xt(this,1),e||t<0&&!d||!A&&!d||(ae(this,A===h?"onComplete":"onReverseComplete",!0),this._prom&&!(A<h&&this.timeScale()>0)&&this._prom()))}}else!function(t,e,r,n){var i,o,a,s=t.ratio,l=e<0||!e&&(!t._start&&It(t)&&(t._initted||!qt(t))||(t._ts<0||t._dp._ts<0)&&!qt(t))?0:1,c=t._rDelay,u=0;if(c&&t._repeat&&(u=Ft(0,t._tDur,e),o=Ot(u,c),t._yoyo&&1&o&&(l=1-l),o!==Ot(t._tTime,c)&&(s=1-l,t.vars.repeatRefresh&&t._initted&&t.invalidate())),l!==s||n||t._zTime===y||!e&&t._zTime){if(!t._initted&&Wt(t,e,n,r))return;for(a=t._zTime,t._zTime=e||(r?y:0),r||(r=e&&!a),t.ratio=l,t._from&&(l=1-l),t._time=0,t._tTime=u,i=t._pt;i;)i.r(l,i.d),i=i._next;t._startAt&&e<0&&t._startAt.render(e,!0,!0),t._onUpdate&&!r&&ae(t,"onUpdate"),u&&t._repeat&&!r&&t.parent&&ae(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===l&&(l&&xt(t,1),r||(ae(t,l?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,r);return this},r.targets=function(){return this._targets},r.invalidate=function(){return this._pt=this._op=this._startAt=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(),t.prototype.invalidate.call(this)},r.resetTo=function(t,e,r,n){h||ge.wake(),this._ts||this.play();var i=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||qe(this,i),function(t,e,r,n,i,o,a){var s,l,c,u=(t._pt&&t._ptCache||(t._ptCache={}))[e];if(!u)for(u=t._ptCache[e]=[],l=t._ptLookup,c=t._targets.length;c--;){if((s=l[c][e])&&s.d&&s.d._pt)for(s=s.d._pt;s&&s.p!==e;)s=s._next;if(!s)return ze=1,t.vars[e]="+=0",qe(t,a),ze=0,1;u.push(s)}for(c=u.length;c--;)(s=u[c]).s=!n&&0!==n||i?s.s+(n||0)+o*s.c:n,s.c=r-s.s,s.e&&(s.e=ut(r)+Nt(s.e)),s.b&&(s.b=s.s+Nt(s.b))}(this,t,e,r,n,this._ease(i/this._dur),i)?this.resetTo(t,e,r,n):(Pt(this,0),this.parent||wt(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},r.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?se(this):this;if(this.timeline){var r=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,De&&!0!==De.vars.overwrite)._first||se(this),this.parent&&r!==this.timeline.totalDuration()&&Rt(this,this._dur*this.timeline._tDur/r,0,1),this}var n,i,o,a,s,l,c,u=this._targets,p=t?Gt(t):u,d=this._ptLookup,h=this._pt;if((!e||"all"===e)&&function(t,e){for(var r=t.length,n=r===e.length;n&&r--&&t[r]===e[r];);return r<0}(u,p))return"all"===e&&(this._pt=0),se(this);for(n=this._op=this._op||[],"all"!==e&&(S(e)&&(s={},ct(e,(function(t){return s[t]=1})),e=s),e=function(t,e){var r,n,i,o,a=t[0]?st(t[0]).harness:0,s=a&&a.aliases;if(!s)return e;for(n in r=Ct({},e),s)if(n in r)for(i=(o=s[n].split(",")).length;i--;)r[o[i]]=r[n];return r}(u,e)),c=u.length;c--;)if(~p.indexOf(u[c]))for(s in i=d[c],"all"===e?(n[c]=e,a=i,o={}):(o=n[c]=n[c]||{},a=e),a)(l=i&&i[s])&&("kill"in l.d&&!0!==l.d.kill(s)||Bt(this,l,"_pt"),delete i[s]),"all"!==o&&(o[s]=1);return this._initted&&!this._pt&&h&&se(this),this},e.to=function(t,r){return new e(t,r,arguments[2])},e.from=function(t,e){return Lt(1,arguments)},e.delayedCall=function(t,r,n,i){return new e(r,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:r,onReverseComplete:r,onCompleteParams:n,onReverseCompleteParams:n,callbackScope:i})},e.fromTo=function(t,e,r){return Lt(2,arguments)},e.set=function(t,r){return r.duration=0,r.repeatDelay||(r.repeat=0),new e(t,r)},e.killTweensOf=function(t,e,r){return a.killTweensOf(t,e,r)},e}(Ue);gt(Le.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),ct("staggerTo,staggerFrom,staggerFromTo",(function(t){Le[t]=function(){var e=new Pe,r=Ht.call(arguments,0);return r.splice("staggerFromTo"===t?5:4,0,0),e[t].apply(e,r)}}));var Qe=function(t,e,r){return t[e]=r},Fe=function(t,e,r){return t[e](r)},Ne=function(t,e,r,n){return t[e](n.fp,r)},He=function(t,e,r){return t.setAttribute(e,r)},Ke=function(t,e){return E(t[e])?Fe:M(t[e])&&t.setAttribute?He:Qe},Ge=function(t,e){return e.set(e.t,e.p,Math.round(1e6*(e.s+e.c*t))/1e6,e)},Ze=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},$e=function(t,e){var r=e._pt,n="";if(!t&&e.b)n=e.b;else if(1===t&&e.e)n=e.e;else{for(;r;)n=r.p+(r.m?r.m(r.s+r.c*t):Math.round(1e4*(r.s+r.c*t))/1e4)+n,r=r._next;n+=e.c}e.set(e.t,e.p,n,e)},Je=function(t,e){for(var r=e._pt;r;)r.r(t,r.d),r=r._next},tr=function(t,e,r,n){for(var i,o=this._pt;o;)i=o._next,o.p===n&&o.modifier(t,e,r),o=i},er=function(t){for(var e,r,n=this._pt;n;)r=n._next,n.p===t&&!n.op||n.op===t?Bt(this,n,"_pt"):n.dep||(e=1),n=r;return!e},rr=function(t,e,r,n){n.mSet(t,e,n.m.call(n.tween,r,n.mt),n)},nr=function(t){for(var e,r,n,i,o=t._pt;o;){for(e=o._next,r=n;r&&r.pr>o.pr;)r=r._next;(o._prev=r?r._prev:i)?o._prev._next=o:n=o,(o._next=r)?r._prev=o:i=o,o=e}t._pt=n},ir=function(){function t(t,e,r,n,i,o,a,s,l){this.t=e,this.s=n,this.c=i,this.p=r,this.r=o||Ge,this.d=a||this,this.set=s||Qe,this.pr=l||0,this._next=t,t&&(t._prev=this)}return t.prototype.modifier=function(t,e,r){this.mSet=this.mSet||this.set,this.set=rr,this.m=t,this.mt=r,this.tween=e},t}();ct(ot+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(t){return $[t]=1})),Q.TweenMax=Q.TweenLite=Le,Q.TimelineLite=Q.TimelineMax=Pe,a=new Pe({sortChildren:!1,defaults:C,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),g.stringFilter=me;var or={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];e.forEach((function(t){return le(t)}))},timeline:function(t){return new Pe(t)},getTweensOf:function(t,e){return a.getTweensOf(t,e)},getProperty:function(t,e,r,n){S(t)&&(t=Gt(t)[0]);var i=st(t||{}).get,o=r?mt:_t;return"native"===r&&(r=""),t?e?o((et[e]&&et[e].get||i)(t,e,r,n)):function(e,r,n){return o((et[e]&&et[e].get||i)(t,e,r,n))}:t},quickSetter:function(t,e,r){if((t=Gt(t)).length>1){var n=t.map((function(t){return lr.quickSetter(t,e,r)})),i=n.length;return function(t){for(var e=i;e--;)n[e](t)}}t=t[0]||{};var o=et[e],a=st(t),s=a.harness&&(a.harness.aliases||{})[e]||e,l=o?function(e){var n=new o;d._pt=0,n.init(t,r?e+r:e,d,0,[t]),n.render(1,n),d._pt&&Je(1,d)}:a.set(t,s);return o?l:function(e){return l(t,s,r?e+r:e,a,1)}},quickTo:function(t,e,r){var n,i=lr.to(t,Ct(((n={})[e]="+=0.1",n.paused=!0,n),r||{})),o=function(t,r,n){return i.resetTo(e,t,r,n)};return o.tween=i,o},isTweening:function(t){return a.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=ke(t.ease,C.ease)),vt(C,t||{})},config:function(t){return vt(g,t||{})},registerEffect:function(t){var e=t.name,r=t.effect,n=t.plugins,i=t.defaults,o=t.extendTimeline;(n||"").split(",").forEach((function(t){return t&&!et[t]&&!Q[t]&&K(e+" effect requires "+t+" plugin.")})),rt[e]=function(t,e,n){return r(Gt(t),gt(e||{},i),n)},o&&(Pe.prototype[e]=function(t,r,n){return this.add(rt[e](t,U(r)?r:(n=r)&&{},this),n)})},registerEase:function(t,e){ve[t]=ke(e)},parseEase:function(t,e){return arguments.length?ke(t,e):ve},getById:function(t){return a.getById(t)},exportRoot:function(t,e){void 0===t&&(t={});var r,n,i=new Pe(t);for(i.smoothChildTiming=P(t.smoothChildTiming),a.remove(i),i._dp=0,i._time=i._tTime=a._time,r=a._first;r;)n=r._next,!e&&!r._dur&&r instanceof Le&&r.vars.onComplete===r._targets[0]||zt(i,r,r._start-r._delay),r=n;return zt(a,i,0),i},utils:{wrap:function t(e,r,n){var i=r-e;return W(e)?re(e,t(0,e.length),r):Qt(n,(function(t){return(i+(t-e)%i)%i+e}))},wrapYoyo:function t(e,r,n){var i=r-e,o=2*i;return W(e)?re(e,t(0,e.length-1),r):Qt(n,(function(t){return e+((t=(o+(t-e)%o)%o||0)>i?o-t:t)}))},distribute:$t,random:ee,snap:te,normalize:function(t,e,r){return ie(t,e,0,1,r)},getUnit:Nt,clamp:function(t,e,r){return Qt(r,(function(r){return Ft(t,e,r)}))},splitColor:de,toArray:Gt,selector:function(t){return t=Gt(t)[0]||K("Invalid scope")||{},function(e){var r=t.current||t.nativeElement||t;return Gt(e,r.querySelectorAll?r:r===t?K("Invalid scope")||c.createElement("div"):t)}},mapRange:ie,pipe:function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return function(t){return e.reduce((function(t,e){return e(t)}),t)}},unitize:function(t,e){return function(r){return t(parseFloat(r))+(e||Nt(r))}},interpolate:function t(e,r,n,i){var o=isNaN(e+r)?0:function(t){return(1-t)*e+t*r};if(!o){var a,s,l,c,u,p=S(e),d={};if(!0===n&&(i=1)&&(n=null),p)e={p:e},r={p:r};else if(W(e)&&!W(r)){for(l=[],c=e.length,u=c-2,s=1;s<c;s++)l.push(t(e[s-1],e[s]));c--,o=function(t){t*=c;var e=Math.min(u,~~t);return l[e](t-e)},n=r}else i||(e=Ct(W(e)?[]:{},e));if(!l){for(a in r)We.call(d,e,a,"get",r[a]);o=function(t){return Je(t,d)||(p?e.p:e)}}}return Qt(n,o)},shuffle:Zt},install:N,effects:rt,ticker:ge,updateRoot:Pe.updateRoot,plugins:et,globalTimeline:a,core:{PropTween:ir,globals:G,Tween:Le,Timeline:Pe,Animation:Ue,getCache:st,_removeLinkedListItem:Bt,suppressOverwrites:function(t){return o=t}}};ct("to,from,fromTo,delayedCall,set,killTweensOf",(function(t){return or[t]=Le[t]})),ge.add(Pe.updateRoot),d=or.to({},{duration:0});var ar=function(t,e){for(var r=t._pt;r&&r.p!==e&&r.op!==e&&r.fp!==e;)r=r._next;return r},sr=function(t,e){return{name:t,rawVars:1,init:function(t,r,n){n._onInit=function(t){var n,i;if(S(r)&&(n={},ct(r,(function(t){return n[t]=1})),r=n),e){for(i in n={},r)n[i]=e(r[i]);r=n}!function(t,e){var r,n,i,o=t._targets;for(r in e)for(n=o.length;n--;)(i=t._ptLookup[n][r])&&(i=i.d)&&(i._pt&&(i=ar(i,r)),i&&i.modifier&&i.modifier(e[r],t,o[n],r))}(t,r)}}}},lr=or.registerPlugin({name:"attr",init:function(t,e,r,n,i){var o,a;for(o in e)(a=this.add(t,"setAttribute",(t.getAttribute(o)||0)+"",e[o],n,i,0,0,o))&&(a.op=o),this._props.push(o)}},{name:"endArray",init:function(t,e){for(var r=e.length;r--;)this.add(t,r,t[r]||0,e[r])}},sr("roundProps",Jt),sr("modifiers"),sr("snap",te))||or;Le.version=Pe.version=lr.version="3.10.4",u=1,D()&&Ce(),ve.Power0,ve.Power1,ve.Power2,ve.Power3,ve.Power4,ve.Linear,ve.Quad,ve.Cubic,ve.Quart,ve.Quint,ve.Strong,ve.Elastic,ve.Back,ve.SteppedEase,ve.Bounce,ve.Sine,ve.Expo,ve.Circ;var cr,ur,pr,dr,hr,fr,Ar,_r={},mr=180/Math.PI,gr=Math.PI/180,Cr=Math.atan2,vr=/([A-Z])/g,yr=/(left|right|width|margin|padding|x)/i,br=/[\s,\(]\S/,wr={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},Br=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},xr=function(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},kr=function(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)},Tr=function(t,e){var r=e.s+e.c*t;e.set(e.t,e.p,~~(r+(r<0?-.5:.5))+e.u,e)},Sr=function(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)},Er=function(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)},Or=function(t,e,r){return t.style[e]=r},Mr=function(t,e,r){return t.style.setProperty(e,r)},Ur=function(t,e,r){return t._gsap[e]=r},Pr=function(t,e,r){return t._gsap.scaleX=t._gsap.scaleY=r},Dr=function(t,e,r,n,i){var o=t._gsap;o.scaleX=o.scaleY=r,o.renderTransform(i,o)},zr=function(t,e,r,n,i){var o=t._gsap;o[e]=r,o.renderTransform(i,o)},Yr="transform",Wr=Yr+"Origin",Ir=function(t,e){var r=ur.createElementNS?ur.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):ur.createElement(t);return r.style?r:ur.createElement(t)},qr=function t(e,r,n){var i=getComputedStyle(e);return i[r]||i.getPropertyValue(r.replace(vr,"-$1").toLowerCase())||i.getPropertyValue(r)||!n&&t(e,Xr(r)||r,1)||""},Rr="O,Moz,ms,Ms,Webkit".split(","),Xr=function(t,e,r){var n=(e||hr).style,i=5;if(t in n&&!r)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);i--&&!(Rr[i]+t in n););return i<0?null:(3===i?"ms":i>=0?Rr[i]:"")+t},jr=function(){"undefined"!=typeof window&&window.document&&(cr=window,ur=cr.document,pr=ur.documentElement,hr=Ir("div")||{style:{}},Ir("div"),Yr=Xr(Yr),Wr=Yr+"Origin",hr.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",Ar=!!Xr("perspective"),dr=1)},Vr=function t(e){var r,n=Ir("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),i=this.parentNode,o=this.nextSibling,a=this.style.cssText;if(pr.appendChild(n),n.appendChild(this),this.style.display="block",e)try{r=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=t}catch(t){}else this._gsapBBox&&(r=this._gsapBBox());return i&&(o?i.insertBefore(this,o):i.appendChild(this)),pr.removeChild(n),this.style.cssText=a,r},Lr=function(t,e){for(var r=e.length;r--;)if(t.hasAttribute(e[r]))return t.getAttribute(e[r])},Qr=function(t){var e;try{e=t.getBBox()}catch(r){e=Vr.call(t,!0)}return e&&(e.width||e.height)||t.getBBox===Vr||(e=Vr.call(t,!0)),!e||e.width||e.x||e.y?e:{x:+Lr(t,["x","cx","x1"])||0,y:+Lr(t,["y","cy","y1"])||0,width:0,height:0}},Fr=function(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!Qr(t))},Nr=function(t,e){if(e){var r=t.style;e in _r&&e!==Wr&&(e=Yr),r.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),r.removeProperty(e.replace(vr,"-$1").toLowerCase())):r.removeAttribute(e)}},Hr=function(t,e,r,n,i,o){var a=new ir(t._pt,e,r,0,1,o?Er:Sr);return t._pt=a,a.b=n,a.e=i,t._props.push(r),a},Kr={deg:1,rad:1,turn:1},Gr=function t(e,r,n,i){var o,a,s,l,c=parseFloat(n)||0,u=(n+"").trim().substr((c+"").length)||"px",p=hr.style,d=yr.test(r),h="svg"===e.tagName.toLowerCase(),f=(h?"client":"offset")+(d?"Width":"Height"),A=100,_="px"===i,m="%"===i;return i===u||!c||Kr[i]||Kr[u]?c:("px"!==u&&!_&&(c=t(e,r,n,"px")),l=e.getCTM&&Fr(e),!m&&"%"!==u||!_r[r]&&!~r.indexOf("adius")?(p[d?"width":"height"]=A+(_?u:i),a=~r.indexOf("adius")||"em"===i&&e.appendChild&&!h?e:e.parentNode,l&&(a=(e.ownerSVGElement||{}).parentNode),a&&a!==ur&&a.appendChild||(a=ur.body),(s=a._gsap)&&m&&s.width&&d&&s.time===ge.time?ut(c/s.width*A):((m||"%"===u)&&(p.position=qr(e,"position")),a===e&&(p.position="static"),a.appendChild(hr),o=hr[f],a.removeChild(hr),p.position="absolute",d&&m&&((s=st(a)).time=ge.time,s.width=a[f]),ut(_?o*c/A:o&&c?A/o*c:0))):(o=l?e.getBBox()[d?"width":"height"]:e[f],ut(m?c/o*A:c/100*o)))},Zr=function(t,e,r,n){var i;return dr||jr(),e in wr&&"transform"!==e&&~(e=wr[e]).indexOf(",")&&(e=e.split(",")[0]),_r[e]&&"transform"!==e?(i=cn(t,n),i="transformOrigin"!==e?i[e]:i.svg?i.origin:un(qr(t,Wr))+" "+i.zOrigin+"px"):(!(i=t.style[e])||"auto"===i||n||~(i+"").indexOf("calc("))&&(i=en[e]&&en[e](t,e,r)||qr(t,e)||lt(t,e)||("opacity"===e?1:0)),r&&!~(i+"").trim().indexOf(" ")?Gr(t,e,i,r)+r:i},$r=function(t,e,r,n){if(!r||"none"===r){var i=Xr(e,t,1),o=i&&qr(t,i,1);o&&o!==r?(e=i,r=o):"borderColor"===e&&(r=qr(t,"borderTopColor"))}var a,s,l,c,u,p,d,h,f,A,_,m=new ir(this._pt,t.style,e,0,1,$e),C=0,v=0;if(m.b=r,m.e=n,r+="","auto"==(n+="")&&(t.style[e]=n,n=qr(t,e)||n,t.style[e]=r),me(a=[r,n]),n=a[1],l=(r=a[0]).match(R)||[],(n.match(R)||[]).length){for(;s=R.exec(n);)d=s[0],f=n.substring(C,s.index),u?u=(u+1)%5:"rgba("!==f.substr(-5)&&"hsla("!==f.substr(-5)||(u=1),d!==(p=l[v++]||"")&&(c=parseFloat(p)||0,_=p.substr((c+"").length),"="===d.charAt(1)&&(d=dt(c,d)+_),h=parseFloat(d),A=d.substr((h+"").length),C=R.lastIndex-A.length,A||(A=A||g.units[e]||_,C===n.length&&(n+=A,m.e+=A)),_!==A&&(c=Gr(t,e,p,A)||0),m._pt={_next:m._pt,p:f||1===v?f:",",s:c,c:h-c,m:u&&u<4||"zIndex"===e?Math.round:0});m.c=C<n.length?n.substring(C,n.length):""}else m.r="display"===e&&"none"===n?Er:Sr;return j.test(n)&&(m.e=0),this._pt=m,m},Jr={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},tn=function(t,e){if(e.tween&&e.tween._time===e.tween._dur){var r,n,i,o=e.t,a=o.style,s=e.u,l=o._gsap;if("all"===s||!0===s)a.cssText="",n=1;else for(i=(s=s.split(",")).length;--i>-1;)r=s[i],_r[r]&&(n=1,r="transformOrigin"===r?Wr:Yr),Nr(o,r);n&&(Nr(o,Yr),l&&(l.svg&&o.removeAttribute("transform"),cn(o,1),l.uncache=1))}},en={clearProps:function(t,e,r,n,i){if("isFromStart"!==i.data){var o=t._pt=new ir(t._pt,e,r,0,0,tn);return o.u=n,o.pr=-10,o.tween=i,t._props.push(r),1}}},rn=[1,0,0,1,0,0],nn={},on=function(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t},an=function(t){var e=qr(t,Yr);return on(e)?rn:e.substr(7).match(q).map(ut)},sn=function(t,e){var r,n,i,o,a=t._gsap||st(t),s=t.style,l=an(t);return a.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(l=[(i=t.transform.baseVal.consolidate().matrix).a,i.b,i.c,i.d,i.e,i.f]).join(",")?rn:l:(l!==rn||t.offsetParent||t===pr||a.svg||(i=s.display,s.display="block",(r=t.parentNode)&&t.offsetParent||(o=1,n=t.nextSibling,pr.appendChild(t)),l=an(t),i?s.display=i:Nr(t,"display"),o&&(n?r.insertBefore(t,n):r?r.appendChild(t):pr.removeChild(t))),e&&l.length>6?[l[0],l[1],l[4],l[5],l[12],l[13]]:l)},ln=function(t,e,r,n,i,o){var a,s,l,c=t._gsap,u=i||sn(t,!0),p=c.xOrigin||0,d=c.yOrigin||0,h=c.xOffset||0,f=c.yOffset||0,A=u[0],_=u[1],m=u[2],g=u[3],C=u[4],v=u[5],y=e.split(" "),b=parseFloat(y[0])||0,w=parseFloat(y[1])||0;r?u!==rn&&(s=A*g-_*m)&&(l=b*(-_/s)+w*(A/s)-(A*v-_*C)/s,b=b*(g/s)+w*(-m/s)+(m*v-g*C)/s,w=l):(b=(a=Qr(t)).x+(~y[0].indexOf("%")?b/100*a.width:b),w=a.y+(~(y[1]||y[0]).indexOf("%")?w/100*a.height:w)),n||!1!==n&&c.smooth?(C=b-p,v=w-d,c.xOffset=h+(C*A+v*m)-C,c.yOffset=f+(C*_+v*g)-v):c.xOffset=c.yOffset=0,c.xOrigin=b,c.yOrigin=w,c.smooth=!!n,c.origin=e,c.originIsAbsolute=!!r,t.style[Wr]="0px 0px",o&&(Hr(o,c,"xOrigin",p,b),Hr(o,c,"yOrigin",d,w),Hr(o,c,"xOffset",h,c.xOffset),Hr(o,c,"yOffset",f,c.yOffset)),t.setAttribute("data-svg-origin",b+" "+w)},cn=function(t,e){var r=t._gsap||new Me(t);if("x"in r&&!e&&!r.uncache)return r;var n,i,o,a,s,l,c,u,p,d,h,f,A,_,m,C,v,y,b,w,B,x,k,T,S,E,O,M,U,P,D,z,Y=t.style,W=r.scaleX<0,I="px",q="deg",R=qr(t,Wr)||"0";return n=i=o=l=c=u=p=d=h=0,a=s=1,r.svg=!(!t.getCTM||!Fr(t)),_=sn(t,r.svg),r.svg&&(T=(!r.uncache||"0px 0px"===R)&&!e&&t.getAttribute("data-svg-origin"),ln(t,T||R,!!T||r.originIsAbsolute,!1!==r.smooth,_)),f=r.xOrigin||0,A=r.yOrigin||0,_!==rn&&(y=_[0],b=_[1],w=_[2],B=_[3],n=x=_[4],i=k=_[5],6===_.length?(a=Math.sqrt(y*y+b*b),s=Math.sqrt(B*B+w*w),l=y||b?Cr(b,y)*mr:0,(p=w||B?Cr(w,B)*mr+l:0)&&(s*=Math.abs(Math.cos(p*gr))),r.svg&&(n-=f-(f*y+A*w),i-=A-(f*b+A*B))):(z=_[6],P=_[7],O=_[8],M=_[9],U=_[10],D=_[11],n=_[12],i=_[13],o=_[14],c=(m=Cr(z,U))*mr,m&&(T=x*(C=Math.cos(-m))+O*(v=Math.sin(-m)),S=k*C+M*v,E=z*C+U*v,O=x*-v+O*C,M=k*-v+M*C,U=z*-v+U*C,D=P*-v+D*C,x=T,k=S,z=E),u=(m=Cr(-w,U))*mr,m&&(C=Math.cos(-m),D=B*(v=Math.sin(-m))+D*C,y=T=y*C-O*v,b=S=b*C-M*v,w=E=w*C-U*v),l=(m=Cr(b,y))*mr,m&&(T=y*(C=Math.cos(m))+b*(v=Math.sin(m)),S=x*C+k*v,b=b*C-y*v,k=k*C-x*v,y=T,x=S),c&&Math.abs(c)+Math.abs(l)>359.9&&(c=l=0,u=180-u),a=ut(Math.sqrt(y*y+b*b+w*w)),s=ut(Math.sqrt(k*k+z*z)),m=Cr(x,k),p=Math.abs(m)>2e-4?m*mr:0,h=D?1/(D<0?-D:D):0),r.svg&&(T=t.getAttribute("transform"),r.forceCSS=t.setAttribute("transform","")||!on(qr(t,Yr)),T&&t.setAttribute("transform",T))),Math.abs(p)>90&&Math.abs(p)<270&&(W?(a*=-1,p+=l<=0?180:-180,l+=l<=0?180:-180):(s*=-1,p+=p<=0?180:-180)),e=e||r.uncache,r.x=n-((r.xPercent=n&&(!e&&r.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-n)?-50:0)))?t.offsetWidth*r.xPercent/100:0)+I,r.y=i-((r.yPercent=i&&(!e&&r.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-i)?-50:0)))?t.offsetHeight*r.yPercent/100:0)+I,r.z=o+I,r.scaleX=ut(a),r.scaleY=ut(s),r.rotation=ut(l)+q,r.rotationX=ut(c)+q,r.rotationY=ut(u)+q,r.skewX=p+q,r.skewY=d+q,r.transformPerspective=h+I,(r.zOrigin=parseFloat(R.split(" ")[2])||0)&&(Y[Wr]=un(R)),r.xOffset=r.yOffset=0,r.force3D=g.force3D,r.renderTransform=r.svg?mn:Ar?_n:dn,r.uncache=0,r},un=function(t){return(t=t.split(" "))[0]+" "+t[1]},pn=function(t,e,r){var n=Nt(e);return ut(parseFloat(e)+parseFloat(Gr(t,"x",r+"px",n)))+n},dn=function(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,_n(t,e)},hn="0deg",fn="0px",An=") ",_n=function(t,e){var r=e||this,n=r.xPercent,i=r.yPercent,o=r.x,a=r.y,s=r.z,l=r.rotation,c=r.rotationY,u=r.rotationX,p=r.skewX,d=r.skewY,h=r.scaleX,f=r.scaleY,A=r.transformPerspective,_=r.force3D,m=r.target,g=r.zOrigin,C="",v="auto"===_&&t&&1!==t||!0===_;if(g&&(u!==hn||c!==hn)){var y,b=parseFloat(c)*gr,w=Math.sin(b),B=Math.cos(b);b=parseFloat(u)*gr,y=Math.cos(b),o=pn(m,o,w*y*-g),a=pn(m,a,-Math.sin(b)*-g),s=pn(m,s,B*y*-g+g)}A!==fn&&(C+="perspective("+A+An),(n||i)&&(C+="translate("+n+"%, "+i+"%) "),(v||o!==fn||a!==fn||s!==fn)&&(C+=s!==fn||v?"translate3d("+o+", "+a+", "+s+") ":"translate("+o+", "+a+An),l!==hn&&(C+="rotate("+l+An),c!==hn&&(C+="rotateY("+c+An),u!==hn&&(C+="rotateX("+u+An),p===hn&&d===hn||(C+="skew("+p+", "+d+An),1===h&&1===f||(C+="scale("+h+", "+f+An),m.style[Yr]=C||"translate(0, 0)"},mn=function(t,e){var r,n,i,o,a,s=e||this,l=s.xPercent,c=s.yPercent,u=s.x,p=s.y,d=s.rotation,h=s.skewX,f=s.skewY,A=s.scaleX,_=s.scaleY,m=s.target,g=s.xOrigin,C=s.yOrigin,v=s.xOffset,y=s.yOffset,b=s.forceCSS,w=parseFloat(u),B=parseFloat(p);d=parseFloat(d),h=parseFloat(h),(f=parseFloat(f))&&(h+=f=parseFloat(f),d+=f),d||h?(d*=gr,h*=gr,r=Math.cos(d)*A,n=Math.sin(d)*A,i=Math.sin(d-h)*-_,o=Math.cos(d-h)*_,h&&(f*=gr,a=Math.tan(h-f),i*=a=Math.sqrt(1+a*a),o*=a,f&&(a=Math.tan(f),r*=a=Math.sqrt(1+a*a),n*=a)),r=ut(r),n=ut(n),i=ut(i),o=ut(o)):(r=A,o=_,n=i=0),(w&&!~(u+"").indexOf("px")||B&&!~(p+"").indexOf("px"))&&(w=Gr(m,"x",u,"px"),B=Gr(m,"y",p,"px")),(g||C||v||y)&&(w=ut(w+g-(g*r+C*i)+v),B=ut(B+C-(g*n+C*o)+y)),(l||c)&&(a=m.getBBox(),w=ut(w+l/100*a.width),B=ut(B+c/100*a.height)),a="matrix("+r+","+n+","+i+","+o+","+w+","+B+")",m.setAttribute("transform",a),b&&(m.style[Yr]=a)},gn=function(t,e,r,n,i){var o,a,s=360,l=S(i),c=parseFloat(i)*(l&&~i.indexOf("rad")?mr:1)-n,u=n+c+"deg";return l&&("short"===(o=i.split("_")[1])&&(c%=s)!=c%180&&(c+=c<0?s:-360),"cw"===o&&c<0?c=(c+36e9)%s-~~(c/s)*s:"ccw"===o&&c>0&&(c=(c-36e9)%s-~~(c/s)*s)),t._pt=a=new ir(t._pt,e,r,n,c,xr),a.e=u,a.u="deg",t._props.push(r),a},Cn=function(t,e){for(var r in e)t[r]=e[r];return t},vn=function(t,e,r){var n,i,o,a,s,l,c,u=Cn({},r._gsap),p=r.style;for(i in u.svg?(o=r.getAttribute("transform"),r.setAttribute("transform",""),p[Yr]=e,n=cn(r,1),Nr(r,Yr),r.setAttribute("transform",o)):(o=getComputedStyle(r)[Yr],p[Yr]=e,n=cn(r,1),p[Yr]=o),_r)(o=u[i])!==(a=n[i])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(i)<0&&(s=Nt(o)!==(c=Nt(a))?Gr(r,i,o,c):parseFloat(o),l=parseFloat(a),t._pt=new ir(t._pt,n,i,s,l-s,Br),t._pt.u=c||0,t._props.push(i));Cn(n,u)};ct("padding,margin,Width,Radius",(function(t,e){var r="Top",n="Right",i="Bottom",o="Left",a=(e<3?[r,n,i,o]:[r+o,r+n,i+n,i+o]).map((function(r){return e<2?t+r:"border"+r+t}));en[e>1?"border"+t:t]=function(t,e,r,n,i){var o,s;if(arguments.length<4)return o=a.map((function(e){return Zr(t,e,r)})),5===(s=o.join(" ")).split(o[0]).length?o[0]:s;o=(n+"").split(" "),s={},a.forEach((function(t,e){return s[t]=o[e]=o[e]||o[(e-1)/2|0]})),t.init(e,s,i)}}));var yn,bn,wn={name:"css",register:jr,targetTest:function(t){return t.style&&t.nodeType},init:function(t,e,r,n,i){var o,a,s,l,c,u,p,d,h,f,A,_,m,C,v,y,b,w,B,x=this._props,k=t.style,T=r.vars.startAt;for(p in dr||jr(),e)if("autoRound"!==p&&(a=e[p],!et[p]||!Ie(p,e,r,n,t,i)))if(c=typeof a,u=en[p],"function"===c&&(c=typeof(a=a.call(r,n,t,i))),"string"===c&&~a.indexOf("random(")&&(a=ne(a)),u)u(this,t,p,a,r)&&(v=1);else if("--"===p.substr(0,2))o=(getComputedStyle(t).getPropertyValue(p)+"").trim(),a+="",Ae.lastIndex=0,Ae.test(o)||(d=Nt(o),h=Nt(a)),h?d!==h&&(o=Gr(t,p,o,h)+h):d&&(a+=d),this.add(k,"setProperty",o,a,n,i,0,0,p),x.push(p);else if("undefined"!==c){if(T&&p in T?(o="function"==typeof T[p]?T[p].call(r,n,t,i):T[p],S(o)&&~o.indexOf("random(")&&(o=ne(o)),Nt(o+"")||(o+=g.units[p]||Nt(Zr(t,p))||""),"="===(o+"").charAt(1)&&(o=Zr(t,p))):o=Zr(t,p),l=parseFloat(o),(f="string"===c&&"="===a.charAt(1)&&a.substr(0,2))&&(a=a.substr(2)),s=parseFloat(a),p in wr&&("autoAlpha"===p&&(1===l&&"hidden"===Zr(t,"visibility")&&s&&(l=0),Hr(this,k,"visibility",l?"inherit":"hidden",s?"inherit":"hidden",!s)),"scale"!==p&&"transform"!==p&&~(p=wr[p]).indexOf(",")&&(p=p.split(",")[0])),A=p in _r)if(_||((m=t._gsap).renderTransform&&!e.parseTransform||cn(t,e.parseTransform),C=!1!==e.smoothOrigin&&m.smooth,(_=this._pt=new ir(this._pt,k,Yr,0,1,m.renderTransform,m,0,-1)).dep=1),"scale"===p)this._pt=new ir(this._pt,m,"scaleY",m.scaleY,(f?dt(m.scaleY,f+s):s)-m.scaleY||0),x.push("scaleY",p),p+="X";else{if("transformOrigin"===p){b=void 0,w=void 0,B=void 0,w=(b=(y=a).split(" "))[0],B=b[1]||"50%","top"!==w&&"bottom"!==w&&"left"!==B&&"right"!==B||(y=w,w=B,B=y),b[0]=Jr[w]||w,b[1]=Jr[B]||B,a=b.join(" "),m.svg?ln(t,a,0,C,0,this):((h=parseFloat(a.split(" ")[2])||0)!==m.zOrigin&&Hr(this,m,"zOrigin",m.zOrigin,h),Hr(this,k,p,un(o),un(a)));continue}if("svgOrigin"===p){ln(t,a,1,C,0,this);continue}if(p in nn){gn(this,m,p,l,f?dt(l,f+a):a);continue}if("smoothOrigin"===p){Hr(this,m,"smooth",m.smooth,a);continue}if("force3D"===p){m[p]=a;continue}if("transform"===p){vn(this,a,t);continue}}else p in k||(p=Xr(p)||p);if(A||(s||0===s)&&(l||0===l)&&!br.test(a)&&p in k)s||(s=0),(d=(o+"").substr((l+"").length))!==(h=Nt(a)||(p in g.units?g.units[p]:d))&&(l=Gr(t,p,o,h)),this._pt=new ir(this._pt,A?m:k,p,l,(f?dt(l,f+s):s)-l,A||"px"!==h&&"zIndex"!==p||!1===e.autoRound?Br:Tr),this._pt.u=h||0,d!==h&&"%"!==h&&(this._pt.b=o,this._pt.r=kr);else if(p in k)$r.call(this,t,p,o,f?f+a:a);else{if(!(p in t)){H(p,a);continue}this.add(t,p,o||t[p],f?f+a:a,n,i)}x.push(p)}v&&nr(this)},get:Zr,aliases:wr,getSetter:function(t,e,r){var n=wr[e];return n&&n.indexOf(",")<0&&(e=n),e in _r&&e!==Wr&&(t._gsap.x||Zr(t,"x"))?r&&fr===r?"scale"===e?Pr:Ur:(fr=r||{})&&("scale"===e?Dr:zr):t.style&&!M(t.style[e])?Or:~e.indexOf("-")?Mr:Ke(t,e)},core:{_removeProperty:Nr,_getMatrix:sn}};lr.utils.checkPrefix=Xr,bn=ct("x,y,z,scale,scaleX,scaleY,xPercent,yPercent"+","+(yn="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(t){_r[t]=1})),ct(yn,(function(t){g.units[t]="deg",nn[t]=1})),wr[bn[13]]="x,y,z,scale,scaleX,scaleY,xPercent,yPercent,"+yn,ct("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(t){var e=t.split(":");wr[e[1]]=bn[e[0]]})),ct("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(t){g.units[t]="px"})),lr.registerPlugin(wn);var Bn=lr.registerPlugin(wn)||lr;function xn(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}Bn.core.Tween;var kn,Tn,Sn,En,On,Mn,Un,Pn,Dn,zn,Yn,Wn,In=function(){return kn||"undefined"!=typeof window&&(kn=window.gsap)&&kn.registerPlugin&&kn},qn=1,Rn=[],Xn=[],jn=[],Vn=Date.now,Ln=function(t,e){return e},Qn=function(t,e){return~jn.indexOf(t)&&jn[jn.indexOf(t)+1][e]},Fn=function(t){return!!~zn.indexOf(t)},Nn=function(t,e,r,n,i){return t.addEventListener(e,r,{passive:!n,capture:!!i})},Hn=function(t,e,r,n){return t.removeEventListener(e,r,!!n)},Kn=function(){return Yn&&Yn.isPressed||Xn.cache++},Gn=function(t,e){var r=function r(n){if(n||0===n){qn&&(Sn.history.scrollRestoration="manual");var i=Yn&&Yn.isPressed;n=r.v=Math.round(n)||(Yn&&Yn.iOS?1:0),t(n),r.cacheID=Xn.cache,i&&Ln("ss",n)}else(e||Xn.cache!==r.cacheID||Ln("ref"))&&(r.cacheID=Xn.cache,r.v=t());return r.v+r.offset};return r.offset=0,t&&r},Zn={s:"scrollLeft",p:"left",p2:"Left",os:"right",os2:"Right",d:"width",d2:"Width",a:"x",sc:Gn((function(t){return arguments.length?Sn.scrollTo(t,$n.sc()):Sn.pageXOffset||En.scrollLeft||On.scrollLeft||Mn.scrollLeft||0}))},$n={s:"scrollTop",p:"top",p2:"Top",os:"bottom",os2:"Bottom",d:"height",d2:"Height",a:"y",op:Zn,sc:Gn((function(t){return arguments.length?Sn.scrollTo(Zn.sc(),t):Sn.pageYOffset||En.scrollTop||On.scrollTop||Mn.scrollTop||0}))},Jn=function(t){return kn.utils.toArray(t)[0]||("string"==typeof t&&!1!==kn.config().nullTargetWarn?console.warn("Element not found:",t):null)},ti=function(t,e){var r=e.s,n=e.sc,i=Xn.indexOf(t),o=n===$n.sc?1:2;return!~i&&(i=Xn.push(t)-1),Xn[i+o]||(Xn[i+o]=Gn(Qn(t,r),!0)||(Fn(t)?n:Gn((function(e){return arguments.length?t[r]=e:t[r]}))))},ei=function(t,e,r){var n=t,i=t,o=Vn(),a=o,s=e||50,l=Math.max(500,3*s),c=function(t,e){var l=Vn();e||l-o>s?(i=n,n=t,a=o,o=l):r?n+=t:n=i+(t-i)/(l-a)*(o-a)};return{update:c,reset:function(){i=n=r?0:n,a=o=0},getVelocity:function(t){var e=a,s=i,u=Vn();return(t||0===t)&&t!==n&&c(t),o===a||u-a>l?0:(n+(r?s:-s))/((r?u:o)-e)*1e3}}},ri=function(t,e){return e&&!t._gsapAllow&&t.preventDefault(),t.changedTouches?t.changedTouches[0]:t},ni=function(t){var e=Math.max.apply(Math,t),r=Math.min.apply(Math,t);return Math.abs(e)>=Math.abs(r)?e:r},ii=function(){var t,e,r,n;(Dn=kn.core.globals().ScrollTrigger)&&Dn.core&&(t=Dn.core,e=t.bridge||{},r=t._scrollers,n=t._proxies,r.push.apply(r,Xn),n.push.apply(n,jn),Xn=r,jn=n,Ln=function(t,r){return e[t](r)})},oi=function(t){return(kn=t||In())&&"undefined"!=typeof document&&document.body&&(Sn=window,En=document,On=En.documentElement,Mn=En.body,zn=[Sn,En,On,Mn],kn.utils.clamp,Pn="onpointerenter"in Mn?"pointer":"mouse",Un=ai.isTouch=Sn.matchMedia&&Sn.matchMedia("(hover: none), (pointer: coarse)").matches?1:"ontouchstart"in Sn||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0?2:0,Wn=ai.eventTypes=("ontouchstart"in On?"touchstart,touchmove,touchcancel,touchend":"onpointerdown"in On?"pointerdown,pointermove,pointercancel,pointerup":"mousedown,mousemove,mouseup,mouseup").split(","),setTimeout((function(){return qn=0}),500),ii(),Tn=1),Tn};Zn.op=$n,Xn.cache=0;var ai=function(){function t(t){this.init(t)}var e,r;return t.prototype.init=function(t){Tn||oi(kn)||console.warn("Please gsap.registerPlugin(Observer)"),Dn||ii();var e=t.tolerance,r=t.dragMinimum,n=t.type,i=t.target,o=t.lineHeight,a=t.debounce,s=t.preventDefault,l=t.onStop,c=t.onStopDelay,u=t.ignore,p=t.wheelSpeed,d=t.event,h=t.onDragStart,f=t.onDragEnd,A=t.onDrag,_=t.onPress,m=t.onRelease,g=t.onRight,C=t.onLeft,v=t.onUp,y=t.onDown,b=t.onChangeX,w=t.onChangeY,B=t.onChange,x=t.onToggleX,k=t.onToggleY,T=t.onHover,S=t.onHoverEnd,E=t.onMove,O=t.ignoreCheck,M=t.isNormalizer,U=t.onGestureStart,P=t.onGestureEnd,D=t.onWheel,z=t.onEnable,Y=t.onDisable,W=t.onClick,I=t.scrollSpeed,q=t.capture,R=t.allowClicks,X=t.lockAxis,j=t.onLockAxis;this.target=i=Jn(i)||On,this.vars=t,u&&(u=kn.utils.toArray(u)),e=e||0,r=r||0,p=p||1,I=I||1,n=n||"wheel,touch,pointer",a=!1!==a,o||(o=parseFloat(Sn.getComputedStyle(Mn).lineHeight)||22);var V,L,Q,F,N,H,K,G=this,Z=0,$=0,J=ti(i,Zn),tt=ti(i,$n),et=J(),rt=tt(),nt=~n.indexOf("touch")&&!~n.indexOf("pointer")&&"pointerdown"===Wn[0],it=Fn(i),ot=i.ownerDocument||En,at=[0,0,0],st=[0,0,0],lt=0,ct=function(){return lt=Vn()},ut=function(t,e){return(G.event=t)&&u&&~u.indexOf(t.target)||e&&nt&&"touch"!==t.pointerType||O&&O(t,e)},pt=function(){var t=G.deltaX=ni(at),r=G.deltaY=ni(st),n=Math.abs(t)>=e,i=Math.abs(r)>=e;B&&(n||i)&&B(G,t,r,at,st),n&&(g&&G.deltaX>0&&g(G),C&&G.deltaX<0&&C(G),b&&b(G),x&&G.deltaX<0!=Z<0&&x(G),Z=G.deltaX,at[0]=at[1]=at[2]=0),i&&(y&&G.deltaY>0&&y(G),v&&G.deltaY<0&&v(G),w&&w(G),k&&G.deltaY<0!=$<0&&k(G),$=G.deltaY,st[0]=st[1]=st[2]=0),(F||Q)&&(E&&E(G),j&&H&&j(G),Q&&(A(G),Q=!1),F=H=!1),N&&(D(G),N=!1),V=0},dt=function(t,e,r){at[r]+=t,st[r]+=e,G._vx.update(t),G._vy.update(e),a?V||(V=requestAnimationFrame(pt)):pt()},ht=function(t,e){"y"!==K&&(at[2]+=t,G._vx.update(t,!0)),"x"!==K&&(st[2]+=e,G._vy.update(e,!0)),X&&!K&&(G.axis=K=Math.abs(t)>Math.abs(e)?"x":"y",H=!0),a?V||(V=requestAnimationFrame(pt)):pt()},ft=function(t){if(!ut(t,1)){var e=(t=ri(t,s)).clientX,n=t.clientY,i=e-G.x,o=n-G.y,a=G.isDragging;G.x=e,G.y=n,(a||Math.abs(G.startX-e)>=r||Math.abs(G.startY-n)>=r)&&(A&&(Q=!0),a||(G.isDragging=!0),ht(i,o),a||h&&h(G))}},At=G.onPress=function(t){ut(t,1)||(G.axis=K=null,L.pause(),G.isPressed=!0,t=ri(t),Z=$=0,G.startX=G.x=t.clientX,G.startY=G.y=t.clientY,G._vx.reset(),G._vy.reset(),Nn(M?i:ot,Wn[1],ft,s,!0),G.deltaX=G.deltaY=0,_&&_(G))},_t=function(t){if(!ut(t,1)){Hn(M?i:ot,Wn[1],ft,!0);var e=G.isDragging&&(Math.abs(G.x-G.startX)>3||Math.abs(G.y-G.startY)>3),r=ri(t);e||(G._vx.reset(),G._vy.reset(),s&&R&&kn.delayedCall(.08,(function(){if(Vn()-lt>300&&!t.defaultPrevented)if(t.target.click)t.target.click();else if(ot.createEvent){var e=ot.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,Sn,1,r.screenX,r.screenY,r.clientX,r.clientY,!1,!1,!1,!1,0,null),t.target.dispatchEvent(e)}}))),G.isDragging=G.isGesturing=G.isPressed=!1,l&&!M&&L.restart(!0),f&&e&&f(G),m&&m(G,e)}},mt=function(t){return t.touches&&t.touches.length>1&&(G.isGesturing=!0)&&U(t,G.isDragging)},gt=function(){return(G.isGesturing=!1)||P(G)},Ct=function(t){if(!ut(t)){var e=J(),r=tt();dt((e-et)*I,(r-rt)*I,1),et=e,rt=r,l&&L.restart(!0)}},vt=function(t){if(!ut(t)){t=ri(t,s),D&&(N=!0);var e=(1===t.deltaMode?o:2===t.deltaMode?Sn.innerHeight:1)*p;dt(t.deltaX*e,t.deltaY*e,0),l&&!M&&L.restart(!0)}},yt=function(t){if(!ut(t)){var e=t.clientX,r=t.clientY,n=e-G.x,i=r-G.y;G.x=e,G.y=r,F=!0,(n||i)&&ht(n,i)}},bt=function(t){G.event=t,T(G)},wt=function(t){G.event=t,S(G)},Bt=function(t){return ut(t)||ri(t,s)&&W(G)};L=G._dc=kn.delayedCall(c||.25,(function(){G._vx.reset(),G._vy.reset(),L.pause(),l&&l(G)})).pause(),G.deltaX=G.deltaY=0,G._vx=ei(0,50,!0),G._vy=ei(0,50,!0),G.scrollX=J,G.scrollY=tt,G.isDragging=G.isGesturing=G.isPressed=!1,G.enable=function(t){return G.isEnabled||(Nn(it?ot:i,"scroll",Kn),n.indexOf("scroll")>=0&&Nn(it?ot:i,"scroll",Ct,s,q),n.indexOf("wheel")>=0&&Nn(i,"wheel",vt,s,q),(n.indexOf("touch")>=0&&Un||n.indexOf("pointer")>=0)&&(Nn(i,Wn[0],At,s,q),Nn(ot,Wn[2],_t),Nn(ot,Wn[3],_t),R&&Nn(i,"click",ct,!1,!0),W&&Nn(i,"click",Bt),U&&Nn(ot,"gesturestart",mt),P&&Nn(ot,"gestureend",gt),T&&Nn(i,Pn+"enter",bt),S&&Nn(i,Pn+"leave",wt),E&&Nn(i,Pn+"move",yt)),G.isEnabled=!0,t&&t.type&&At(t),z&&z(G)),G},G.disable=function(){G.isEnabled&&(Rn.filter((function(t){return t!==G&&Fn(t.target)})).length||Hn(it?ot:i,"scroll",Kn),G.isPressed&&(G._vx.reset(),G._vy.reset(),Hn(M?i:ot,Wn[1],ft,!0)),Hn(it?ot:i,"scroll",Ct,q),Hn(i,"wheel",vt,q),Hn(i,Wn[0],At,q),Hn(ot,Wn[2],_t),Hn(ot,Wn[3],_t),Hn(i,"click",ct,!0),Hn(i,"click",Bt),Hn(ot,"gesturestart",mt),Hn(ot,"gestureend",gt),Hn(i,Pn+"enter",bt),Hn(i,Pn+"leave",wt),Hn(i,Pn+"move",yt),G.isEnabled=G.isPressed=G.isDragging=!1,Y&&Y(G))},G.kill=function(){G.disable();var t=Rn.indexOf(G);t>=0&&Rn.splice(t,1),Yn===G&&(Yn=0)},Rn.push(G),M&&Fn(i)&&(Yn=G),G.enable(d)},e=t,(r=[{key:"velocityX",get:function(){return this._vx.getVelocity()}},{key:"velocityY",get:function(){return this._vy.getVelocity()}}])&&xn(e.prototype,r),t}();ai.version="3.10.4",ai.create=function(t){return new ai(t)},ai.register=oi,ai.getAll=function(){return Rn.slice()},ai.getById=function(t){return Rn.filter((function(e){return e.vars.id===t}))[0]},In()&&kn.registerPlugin(ai);var si,li,ci,ui,pi,di,hi,fi,Ai,_i,mi,gi,Ci,vi,yi,bi,wi,Bi,xi,ki,Ti,Si,Ei,Oi,Mi,Ui,Pi,Di,zi,Yi,Wi,Ii,qi,Ri=1,Xi=Date.now,ji=Xi(),Vi=0,Li=0,Qi=function(){return vi=1},Fi=function(){return vi=0},Ni=function(t){return t},Hi=function(t){return Math.round(1e5*t)/1e5||0},Ki=function(){return"undefined"!=typeof window},Gi=function(){return si||Ki()&&(si=window.gsap)&&si.registerPlugin&&si},Zi=function(t){return!!~hi.indexOf(t)},$i=function(t){return Qn(t,"getBoundingClientRect")||(Zi(t)?function(){return la.width=ci.innerWidth,la.height=ci.innerHeight,la}:function(){return yo(t)})},Ji=function(t,e){var r=e.s,n=e.d2,i=e.d,o=e.a;return(r="scroll"+n)&&(o=Qn(t,r))?o()-$i(t)()[i]:Zi(t)?(pi[r]||di[r])-(ci["inner"+n]||pi["client"+n]||di["client"+n]):t[r]-t["offset"+n]},to=function(t,e){for(var r=0;r<xi.length;r+=3)(!e||~e.indexOf(xi[r+1]))&&t(xi[r],xi[r+1],xi[r+2])},eo=function(t){return"string"==typeof t},ro=function(t){return"function"==typeof t},no=function(t){return"number"==typeof t},io=function(t){return"object"==typeof t},oo=function(t){return ro(t)&&t()},ao=function(t,e){return function(){var r=oo(t),n=oo(e);return function(){oo(r),oo(n)}}},so=function(t,e,r){return t&&t.progress(e?0:1)&&r&&t.pause()},lo=function(t,e){if(t.enabled){var r=e(t);r&&r.totalTime&&(t.callbackAnimation=r)}},co=Math.abs,uo="right",po="bottom",ho="width",fo="height",Ao="padding",_o="margin",mo="Width",go="px",Co=function(t){return ci.getComputedStyle(t)},vo=function(t,e){for(var r in e)r in t||(t[r]=e[r]);return t},yo=function(t,e){var r=e&&"matrix(1, 0, 0, 1, 0, 0)"!==Co(t)[yi]&&si.to(t,{x:0,y:0,xPercent:0,yPercent:0,rotation:0,rotationX:0,rotationY:0,scale:1,skewX:0,skewY:0}).progress(1),n=t.getBoundingClientRect();return r&&r.progress(0).kill(),n},bo=function(t,e){var r=e.d2;return t["offset"+r]||t["client"+r]||0},wo=function(t){var e,r=[],n=t.labels,i=t.duration();for(e in n)r.push(n[e]/i);return r},Bo=function(t){var e=si.utils.snap(t),r=Array.isArray(t)&&t.slice(0).sort((function(t,e){return t-e}));return r?function(t,n,i){var o;if(void 0===i&&(i=.001),!n)return e(t);if(n>0){for(t-=i,o=0;o<r.length;o++)if(r[o]>=t)return r[o];return r[o-1]}for(o=r.length,t+=i;o--;)if(r[o]<=t)return r[o];return r[0]}:function(r,n,i){void 0===i&&(i=.001);var o=e(r);return!n||Math.abs(o-r)<i||o-r<0==n<0?o:e(n<0?r-t:r+t)}},xo=function(t,e,r,n){return r.split(",").forEach((function(r){return t(e,r,n)}))},ko=function(t,e,r,n,i){return t.addEventListener(e,r,{passive:!n,capture:!!i})},To=function(t,e,r,n){return t.removeEventListener(e,r,!!n)},So=function(t,e,r){return r&&r.wheelHandler&&t(e,"wheel",r)},Eo={startColor:"green",endColor:"red",indent:0,fontSize:"16px",fontWeight:"normal"},Oo={toggleActions:"play",anticipatePin:0},Mo={top:0,left:0,center:.5,bottom:1,right:1},Uo=function(t,e){if(eo(t)){var r=t.indexOf("="),n=~r?+(t.charAt(r-1)+1)*parseFloat(t.substr(r+1)):0;~r&&(t.indexOf("%")>r&&(n*=e/100),t=t.substr(0,r-1)),t=n+(t in Mo?Mo[t]*e:~t.indexOf("%")?parseFloat(t)*e/100:parseFloat(t)||0)}return t},Po=function(t,e,r,n,i,o,a,s){var l=i.startColor,c=i.endColor,u=i.fontSize,p=i.indent,d=i.fontWeight,h=ui.createElement("div"),f=Zi(r)||"fixed"===Qn(r,"pinType"),A=-1!==t.indexOf("scroller"),_=f?di:r,m=-1!==t.indexOf("start"),g=m?l:c,C="border-color:"+g+";font-size:"+u+";color:"+g+";font-weight:"+d+";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";return C+="position:"+((A||s)&&f?"fixed;":"absolute;"),(A||s||!f)&&(C+=(n===$n?uo:po)+":"+(o+parseFloat(p))+"px;"),a&&(C+="box-sizing:border-box;text-align:left;width:"+a.offsetWidth+"px;"),h._isStart=m,h.setAttribute("class","gsap-marker-"+t+(e?" marker-"+e:"")),h.style.cssText=C,h.innerText=e||0===e?t+"-"+e:t,_.children[0]?_.insertBefore(h,_.children[0]):_.appendChild(h),h._offset=h["offset"+n.op.d2],Do(h,0,n,m),h},Do=function(t,e,r,n){var i={display:"block"},o=r[n?"os2":"p2"],a=r[n?"p2":"os2"];t._isFlipped=n,i[r.a+"Percent"]=n?-100:0,i[r.a]=n?"1px":0,i["border"+o+mo]=1,i["border"+a+mo]=0,i[r.p]=e+"px",si.set(t,i)},zo=[],Yo={},Wo=function(){return Xi()-Vi>34&&ea()},Io=function(){(!Ei||!Ei.isPressed||Ei.startX>di.clientWidth)&&(Xn.cache++,zi||(zi=requestAnimationFrame(ea)),Vi||Fo("scrollStart"),Vi=Xi())},qo=function(){Ui=ci.innerWidth,Mi=ci.innerHeight},Ro=function(){Xn.cache++,!Ci&&!Si&&!ui.fullscreenElement&&!ui.webkitFullscreenElement&&(!Oi||Ui!==ci.innerWidth||Math.abs(ci.innerHeight-Mi)>.25*ci.innerHeight)&&fi.restart(!0)},Xo={},jo=[],Vo=[],Lo=function(t){var e,r=si.ticker.frame,n=[],i=0;if(Wi!==r||Ri){for(Ko();i<Vo.length;i+=4)(e=ci.matchMedia(Vo[i]).matches)!==Vo[i+3]&&(Vo[i+3]=e,e?n.push(i):Ko(1,Vo[i])||ro(Vo[i+2])&&Vo[i+2]());for(Ho(),i=0;i<n.length;i++)e=n[i],Yi=Vo[e],Vo[e+2]=Vo[e+1](t);Yi=0,li&&$o(0,1),Wi=r,Fo("matchMedia")}},Qo=function t(){return To(ha,"scrollEnd",t)||$o(!0)},Fo=function(t){return Xo[t]&&Xo[t].map((function(t){return t()}))||jo},No=[],Ho=function(t){for(var e=0;e<No.length;e+=5)t&&No[e+4]!==t||(No[e].style.cssText=No[e+1],No[e].getBBox&&No[e].setAttribute("transform",No[e+2]||""),No[e+3].uncache=1)},Ko=function(t,e){var r;for(bi=0;bi<zo.length;bi++)r=zo[bi],e&&r.media!==e||(t?r.kill(1):r.revert());e&&Ho(e),e||Fo("revert")},Go=function(){return Xn.cache++&&Xn.forEach((function(t){return"function"==typeof t&&(t.rec=0)}))},Zo=0,$o=function(t,e){if(!Vi||t){Ii=!0;var r=Fo("refreshInit");ki&&ha.sort(),e||Ko(),zo.slice(0).forEach((function(t){return t.refresh()})),zo.forEach((function(t){return"max"===t.vars.end&&t.setPositions(t.start,Ji(t.scroller,t._dir))})),r.forEach((function(t){return t&&t.render&&t.render(-1)})),Go(),fi.pause(),Zo++,Ii=!1,Fo("refresh")}else ko(ha,"scrollEnd",Qo)},Jo=0,ta=1,ea=function(){if(!Ii){ha.isUpdating=!0,qi&&qi.update(0);var t=zo.length,e=Xi(),r=e-ji>=50,n=t&&zo[0].scroll();if(ta=Jo>n?-1:1,Jo=n,r&&(Vi&&!vi&&e-Vi>200&&(Vi=0,Fo("scrollEnd")),mi=ji,ji=e),ta<0){for(bi=t;bi-- >0;)zo[bi]&&zo[bi].update(0,r);ta=1}else for(bi=0;bi<t;bi++)zo[bi]&&zo[bi].update(0,r);ha.isUpdating=!1}zi=0},ra=["left","top",po,uo,"marginBottom","marginRight","marginTop","marginLeft","display","flexShrink","float","zIndex","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","gridArea","justifySelf","alignSelf","placeSelf","order"],na=ra.concat([ho,fo,"boxSizing","maxWidth","maxHeight","position",_o,Ao,"paddingTop","paddingRight","paddingBottom","paddingLeft"]),ia=function(t,e,r,n){if(t.parentNode!==e){for(var i,o=ra.length,a=e.style,s=t.style;o--;)a[i=ra[o]]=r[i];a.position="absolute"===r.position?"absolute":"relative","inline"===r.display&&(a.display="inline-block"),s.bottom=s.right=a.flexBasis="auto",a.overflow="visible",a.boxSizing="border-box",a.width=bo(t,Zn)+go,a.height=bo(t,$n)+go,a.padding=s.margin=s.top=s.left="0",aa(n),s.width=s.maxWidth=r.width,s.height=s.maxHeight=r.height,s.padding=r.padding,t.parentNode.insertBefore(e,t),e.appendChild(t)}},oa=/([A-Z])/g,aa=function(t){if(t){var e,r,n=t.t.style,i=t.length,o=0;for((t.t._gsap||si.core.getCache(t.t)).uncache=1;o<i;o+=2)r=t[o+1],e=t[o],r?n[e]=r:n[e]&&n.removeProperty(e.replace(oa,"-$1").toLowerCase())}},sa=function(t){for(var e=na.length,r=t.style,n=[],i=0;i<e;i++)n.push(na[i],r[na[i]]);return n.t=t,n},la={left:0,top:0},ca=function(t,e,r,n,i,o,a,s,l,c,u,p,d){ro(t)&&(t=t(s)),eo(t)&&"max"===t.substr(0,3)&&(t=p+("="===t.charAt(4)?Uo("0"+t.substr(3),r):0));var h,f,A,_=d?d.time():0;if(d&&d.seek(0),no(t))a&&Do(a,r,n,!0);else{ro(e)&&(e=e(s));var m,g,C,v,y=t.split(" ");A=Jn(e)||di,(m=yo(A)||{})&&(m.left||m.top)||"none"!==Co(A).display||(v=A.style.display,A.style.display="block",m=yo(A),v?A.style.display=v:A.style.removeProperty("display")),g=Uo(y[0],m[n.d]),C=Uo(y[1]||"0",r),t=m[n.p]-l[n.p]-c+g+i-C,a&&Do(a,C,n,r-C<20||a._isStart&&C>20),r-=r-C}if(o){var b=t+r,w=o._isStart;h="scroll"+n.d2,Do(o,b,n,w&&b>20||!w&&(u?Math.max(di[h],pi[h]):o.parentNode[h])<=b+1),u&&(l=yo(a),u&&(o.style[n.op.p]=l[n.op.p]-n.op.m-o._offset+go))}return d&&A&&(h=yo(A),d.seek(p),f=yo(A),d._caScrollDist=h[n.p]-f[n.p],t=t/d._caScrollDist*p),d&&d.seek(_),d?t:Math.round(t)},ua=/(webkit|moz|length|cssText|inset)/i,pa=function(t,e,r,n){if(t.parentNode!==e){var i,o,a=t.style;if(e===di){for(i in t._stOrig=a.cssText,o=Co(t))+i||ua.test(i)||!o[i]||"string"!=typeof a[i]||"0"===i||(a[i]=o[i]);a.top=r,a.left=n}else a.cssText=t._stOrig;si.core.getCache(t).uncache=1,e.appendChild(t)}},da=function(t,e){var r,n,i=ti(t,e),o="_scroll"+e.p2,a=function e(a,s,l,c,u){var p=e.tween,d=s.onComplete,h={};return l=l||i(),u=c&&u||0,c=c||a-l,p&&p.kill(),r=Math.round(l),s[o]=a,s.modifiers=h,h[o]=function(t){return(t=Hi(i()))!==r&&t!==n&&Math.abs(t-r)>2&&Math.abs(t-n)>2?(p.kill(),e.tween=0):t=l+c*p.ratio+u*p.ratio*p.ratio,n=r,r=Hi(t)},s.onComplete=function(){e.tween=0,d&&d.call(p)},p=e.tween=si.to(t,s)};return t[o]=i,i.wheelHandler=function(){return a.tween&&a.tween.kill()&&(a.tween=0)},ko(t,"wheel",i.wheelHandler),a},ha=function(){function t(e,r){li||t.register(si)||console.warn("Please gsap.registerPlugin(ScrollTrigger)"),this.init(e,r)}return t.prototype.init=function(e,r){if(this.progress=this.start=0,this.vars&&this.kill(!0,!0),Li){var n,i,o,a,s,l,c,u,p,d,h,f,A,_,m,g,C,v,y,b,w,B,x,k,T,S,E,O,M,U,P,D,z,Y,W,I,q,R,X,j,V,L=e=vo(eo(e)||no(e)||e.nodeType?{trigger:e}:e,Oo),Q=L.onUpdate,F=L.toggleClass,N=L.id,H=L.onToggle,K=L.onRefresh,G=L.scrub,Z=L.trigger,$=L.pin,J=L.pinSpacing,tt=L.invalidateOnRefresh,et=L.anticipatePin,rt=L.onScrubComplete,nt=L.onSnapComplete,it=L.once,ot=L.snap,at=L.pinReparent,st=L.pinSpacer,lt=L.containerAnimation,ct=L.fastScrollEnd,ut=L.preventOverlaps,pt=e.horizontal||e.containerAnimation&&!1!==e.horizontal?Zn:$n,dt=!G&&0!==G,ht=Jn(e.scroller||ci),ft=si.core.getCache(ht),At=Zi(ht),_t="fixed"===("pinType"in e?e.pinType:Qn(ht,"pinType")||At&&"fixed"),mt=[e.onEnter,e.onLeave,e.onEnterBack,e.onLeaveBack],gt=dt&&e.toggleActions.split(" "),Ct="markers"in e?e.markers:Oo.markers,vt=At?0:parseFloat(Co(ht)["border"+pt.p2+mo])||0,yt=this,bt=e.onRefreshInit&&function(){return e.onRefreshInit(yt)},wt=function(t,e,r){var n=r.d,i=r.d2,o=r.a;return(o=Qn(t,"getBoundingClientRect"))?function(){return o()[n]}:function(){return(e?ci["inner"+i]:t["client"+i])||0}}(ht,At,pt),Bt=function(t,e){return!e||~jn.indexOf(t)?$i(t):function(){return la}}(ht,At),xt=0,kt=0,Tt=ti(ht,pt);if(yt.media=Yi,yt._dir=pt,et*=45,yt.scroller=ht,yt.scroll=lt?lt.time.bind(lt):Tt,a=Tt(),yt.vars=e,r=r||e.animation,"refreshPriority"in e&&(ki=1,-9999===e.refreshPriority&&(qi=yt)),ft.tweenScroll=ft.tweenScroll||{top:da(ht,$n),left:da(ht,Zn)},yt.tweenTo=n=ft.tweenScroll[pt.p],yt.scrubDuration=function(t){(P=no(t)&&t)?U?U.duration(t):U=si.to(r,{ease:"expo",totalProgress:"+=0.001",duration:P,paused:!0,onComplete:function(){return rt&&rt(yt)}}):(U&&U.progress(1).kill(),U=0)},r&&(r.vars.lazy=!1,r._initted||!1!==r.vars.immediateRender&&!1!==e.immediateRender&&r.render(0,!0,!0),yt.animation=r.pause(),r.scrollTrigger=yt,yt.scrubDuration(G),O=0,N||(N=r.vars.id)),zo.push(yt),ot&&(io(ot)&&!ot.push||(ot={snapTo:ot}),"scrollBehavior"in di.style&&si.set(At?[di,pi]:ht,{scrollBehavior:"auto"}),o=ro(ot.snapTo)?ot.snapTo:"labels"===ot.snapTo?function(t){return function(e){return si.utils.snap(wo(t),e)}}(r):"labelsDirectional"===ot.snapTo?(X=r,function(t,e){return Bo(wo(X))(t,e.direction)}):!1!==ot.directional?function(t,e){return Bo(ot.snapTo)(t,Xi()-kt<500?0:e.direction)}:si.utils.snap(ot.snapTo),D=ot.duration||{min:.1,max:2},D=io(D)?_i(D.min,D.max):_i(D,D),z=si.delayedCall(ot.delay||P/2||.1,(function(){var t=Tt(),e=Xi()-kt<500,i=n.tween;if(!(e||Math.abs(yt.getVelocity())<10)||i||vi||xt===t)yt.isActive&&xt!==t&&z.restart(!0);else{var a=(t-l)/A,s=r&&!dt?r.totalProgress():a,u=e?0:(s-M)/(Xi()-mi)*1e3||0,p=si.utils.clamp(-a,1-a,co(u/2)*u/.185),d=a+(!1===ot.inertia?0:p),h=_i(0,1,o(d,yt)),f=Math.round(l+h*A),_=ot,m=_.onStart,g=_.onInterrupt,C=_.onComplete;if(t<=c&&t>=l&&f!==t){if(i&&!i._initted&&i.data<=co(f-t))return;!1===ot.inertia&&(p=h-a),n(f,{duration:D(co(.185*Math.max(co(d-s),co(h-s))/u/.05||0)),ease:ot.ease||"power3",data:co(f-t),onInterrupt:function(){return z.restart(!0)&&g&&g(yt)},onComplete:function(){yt.update(),xt=Tt(),O=M=r&&!dt?r.totalProgress():yt.progress,nt&&nt(yt),C&&C(yt)}},t,p*A,f-t-p*A),m&&m(yt,n.tween)}}})).pause()),N&&(Yo[N]=yt),(R=(Z=yt.trigger=Jn(Z||$))&&Z._gsap&&Z._gsap.stRevert)&&(R=R(yt)),$=!0===$?Z:Jn($),eo(F)&&(F={targets:Z,className:F}),$&&(!1===J||J===_o||(J=!(!J&&"flex"===Co($.parentNode).display)&&Ao),yt.pin=$,!1!==e.force3D&&si.set($,{force3D:!0}),(i=si.core.getCache($)).spacer?_=i.pinState:(st&&((st=Jn(st))&&!st.nodeType&&(st=st.current||st.nativeElement),i.spacerIsNative=!!st,st&&(i.spacerState=sa(st))),i.spacer=C=st||ui.createElement("div"),C.classList.add("pin-spacer"),N&&C.classList.add("pin-spacer-"+N),i.pinState=_=sa($)),yt.spacer=C=i.spacer,E=Co($),x=E[J+pt.os2],y=si.getProperty($),b=si.quickSetter($,pt.a,go),ia($,C,E),g=sa($)),Ct){f=io(Ct)?vo(Ct,Eo):Eo,d=Po("scroller-start",N,ht,pt,f,0),h=Po("scroller-end",N,ht,pt,f,0,d),v=d["offset"+pt.op.d2];var St=Jn(Qn(ht,"content")||ht);u=this.markerStart=Po("start",N,St,pt,f,v,0,lt),p=this.markerEnd=Po("end",N,St,pt,f,v,0,lt),lt&&(q=si.quickSetter([u,p],pt.a,go)),_t||jn.length&&!0===Qn(ht,"fixedMarkers")||(V=Co(j=At?di:ht).position,j.style.position="absolute"===V||"fixed"===V?V:"relative",si.set([d,h],{force3D:!0}),T=si.quickSetter(d,pt.a,go),S=si.quickSetter(h,pt.a,go))}if(lt){var Et=lt.vars.onUpdate,Ot=lt.vars.onUpdateParams;lt.eventCallback("onUpdate",(function(){yt.update(0,0,1),Et&&Et.apply(Ot||[])}))}yt.previous=function(){return zo[zo.indexOf(yt)-1]},yt.next=function(){return zo[zo.indexOf(yt)+1]},yt.revert=function(t){var e=!1!==t||!yt.enabled,n=Ci;e!==yt.isReverted&&(e&&(yt.scroll.rec||!Ci||!Ii||(yt.scroll.rec=Tt()),W=Math.max(Tt(),yt.scroll.rec||0),Y=yt.progress,I=r&&r.progress()),u&&[u,p,d,h].forEach((function(t){return t.style.display=e?"none":"block"})),e&&(Ci=1),yt.update(e),Ci=n,$&&(e?function(t,e,r){aa(r);var n=t._gsap;if(n.spacerIsNative)aa(n.spacerState);else if(t.parentNode===e){var i=e.parentNode;i&&(i.insertBefore(t,e),i.removeChild(e))}}($,C,_):(!at||!yt.isActive)&&ia($,C,Co($),k)),yt.isReverted=e)},yt.refresh=function(i,o){if(!Ci&&yt.enabled||o)if($&&i&&Vi)ko(t,"scrollEnd",Qo);else{!Ii&&bt&&bt(yt),Ci=1,kt=Xi(),n.tween&&(n.tween.kill(),n.tween=0),U&&U.pause(),tt&&r&&r.time(-.01,!0).invalidate(),yt.isReverted||yt.revert();for(var f,v,b,x,T,S,E,O,M,P,D=wt(),q=Bt(),R=lt?lt.duration():Ji(ht,pt),X=0,j=0,V=e.end,L=e.endTrigger||Z,Q=e.start||(0!==e.start&&Z?$?"0 0":"0 100%":0),F=yt.pinnedContainer=e.pinnedContainer&&Jn(e.pinnedContainer),N=Z&&Math.max(0,zo.indexOf(yt))||0,H=N;H--;)(S=zo[H]).end||S.refresh(0,1)||(Ci=1),!(E=S.pin)||E!==Z&&E!==$||S.isReverted||(P||(P=[]),P.unshift(S),S.revert()),S!==zo[H]&&(N--,H--);for(ro(Q)&&(Q=Q(yt)),l=ca(Q,Z,D,pt,Tt(),u,d,yt,q,vt,_t,R,lt)||($?-.001:0),ro(V)&&(V=V(yt)),eo(V)&&!V.indexOf("+=")&&(~V.indexOf(" ")?V=(eo(Q)?Q.split(" ")[0]:"")+V:(X=Uo(V.substr(2),D),V=eo(Q)?Q:l+X,L=Z)),c=Math.max(l,ca(V||(L?"100% 0":R),L,D,pt,Tt()+X,p,h,yt,q,vt,_t,R,lt))||-.001,A=c-l||(l-=.01)&&.001,X=0,H=N;H--;)(E=(S=zo[H]).pin)&&S.start-S._pinPush<l&&!lt&&S.end>0&&(f=S.end-S.start,E!==Z&&E!==F||no(Q)||(X+=f*(1-S.progress)),E===$&&(j+=f));if(l+=X,c+=X,yt._pinPush=j,u&&X&&((f={})[pt.a]="+="+X,F&&(f[pt.p]="-="+Tt()),si.set([u,p],f)),$)f=Co($),x=pt===$n,b=Tt(),w=parseFloat(y(pt.a))+j,!R&&c>1&&((At?di:ht).style["overflow-"+pt.a]="scroll"),ia($,C,f),g=sa($),v=yo($,!0),O=_t&&ti(ht,x?Zn:$n)(),J&&((k=[J+pt.os2,A+j+go]).t=C,(H=J===Ao?bo($,pt)+A+j:0)&&k.push(pt.d,H+go),aa(k),_t&&Tt(W)),_t&&((T={top:v.top+(x?b-l:O)+go,left:v.left+(x?O:b-l)+go,boxSizing:"border-box",position:"fixed"}).width=T.maxWidth=Math.ceil(v.width)+go,T.height=T.maxHeight=Math.ceil(v.height)+go,T.margin=T.marginTop=T.marginRight=T.marginBottom=T.marginLeft="0",T.padding=f.padding,T.paddingTop=f.paddingTop,T.paddingRight=f.paddingRight,T.paddingBottom=f.paddingBottom,T.paddingLeft=f.paddingLeft,m=function(t,e,r){for(var n,i=[],o=t.length,a=r?8:0;a<o;a+=2)n=t[a],i.push(n,n in e?e[n]:t[a+1]);return i.t=t.t,i}(_,T,at)),r?(M=r._initted,Ti(1),r.render(r.duration(),!0,!0),B=y(pt.a)-w+A+j,A!==B&&_t&&m.splice(m.length-2,2),r.render(0,!0,!0),M||r.invalidate(),Ti(0)):B=A;else if(Z&&Tt()&&!lt)for(v=Z.parentNode;v&&v!==di;)v._pinOffset&&(l-=v._pinOffset,c-=v._pinOffset),v=v.parentNode;P&&P.forEach((function(t){return t.revert(!1)})),yt.start=l,yt.end=c,a=s=Tt(),lt||(a<W&&Tt(W),yt.scroll.rec=0),yt.revert(!1),z&&(xt=-1,yt.isActive&&Tt(l+A*Y),z.restart(!0)),Ci=0,r&&dt&&(r._initted||I)&&r.progress()!==I&&r.progress(I,!0).render(r.time(),!0,!0),(Y!==yt.progress||lt)&&(r&&!dt&&r.totalProgress(Y,!0),yt.progress=Y,yt.update(0,0,1)),$&&J&&(C._pinOffset=Math.round(yt.progress*B)),K&&K(yt)}},yt.getVelocity=function(){return(Tt()-s)/(Xi()-mi)*1e3||0},yt.endAnimation=function(){so(yt.callbackAnimation),r&&(U?U.progress(1):r.paused()?dt||so(r,yt.direction<0,1):so(r,r.reversed()))},yt.labelToScroll=function(t){return r&&r.labels&&(l||yt.refresh()||l)+r.labels[t]/r.duration()*A||0},yt.getTrailing=function(t){var e=zo.indexOf(yt),r=yt.direction>0?zo.slice(0,e).reverse():zo.slice(e+1);return(eo(t)?r.filter((function(e){return e.vars.preventOverlaps===t})):r).filter((function(t){return yt.direction>0?t.end<=l:t.start>=c}))},yt.update=function(t,e,i){if(!lt||i||t){var o,u,p,h,f,_,v,y=yt.scroll(),k=t?0:(y-l)/A,E=k<0?0:k>1?1:k||0,P=yt.progress;if(e&&(s=a,a=lt?Tt():y,ot&&(M=O,O=r&&!dt?r.totalProgress():E)),et&&!E&&$&&!Ci&&!Ri&&Vi&&l<y+(y-s)/(Xi()-mi)*et&&(E=1e-4),E!==P&&yt.enabled){if(h=(f=(o=yt.isActive=!!E&&E<1)!=(!!P&&P<1))||!!E!=!!P,yt.direction=E>P?1:-1,yt.progress=E,h&&!Ci&&(u=E&&!P?0:1===E?1:1===P?2:3,dt&&(p=!f&&"none"!==gt[u+1]&&gt[u+1]||gt[u],v=r&&("complete"===p||"reset"===p||p in r))),ut&&(f||v)&&(v||G||!r)&&(ro(ut)?ut(yt):yt.getTrailing(ut).forEach((function(t){return t.endAnimation()}))),dt||(!U||Ci||Ri?r&&r.totalProgress(E,!!Ci):((lt||qi&&qi!==yt)&&U.render(U._dp._time-U._start),U.resetTo?U.resetTo("totalProgress",E,r._tTime/r._tDur):(U.vars.totalProgress=E,U.invalidate().restart()))),$)if(t&&J&&(C.style[J+pt.os2]=x),_t){if(h){if(_=!t&&E>P&&c+1>y&&y+1>=Ji(ht,pt),at)if(t||!o&&!_)pa($,C);else{var D=yo($,!0),Y=y-l;pa($,di,D.top+(pt===$n?Y:0)+go,D.left+(pt===$n?0:Y)+go)}aa(o||_?m:g),B!==A&&E<1&&o||b(w+(1!==E||_?0:B))}}else b(Hi(w+B*E));ot&&!n.tween&&!Ci&&!Ri&&z.restart(!0),F&&(f||it&&E&&(E<1||!Di))&&Ai(F.targets).forEach((function(t){return t.classList[o||it?"add":"remove"](F.className)})),Q&&!dt&&!t&&Q(yt),h&&!Ci?(dt&&(v&&("complete"===p?r.pause().totalProgress(1):"reset"===p?r.restart(!0).pause():"restart"===p?r.restart(!0):r[p]()),Q&&Q(yt)),!f&&Di||(H&&f&&lo(yt,H),mt[u]&&lo(yt,mt[u]),it&&(1===E?yt.kill(!1,1):mt[u]=0),f||mt[u=1===E?1:3]&&lo(yt,mt[u])),ct&&!o&&Math.abs(yt.getVelocity())>(no(ct)?ct:2500)&&(so(yt.callbackAnimation),U?U.progress(1):so(r,!E,1))):dt&&Q&&!Ci&&Q(yt)}if(S){var W=lt?y/lt.duration()*(lt._caScrollDist||0):y;T(W+(d._isFlipped?1:0)),S(W)}q&&q(-y/lt.duration()*(lt._caScrollDist||0))}},yt.enable=function(e,r){yt.enabled||(yt.enabled=!0,ko(ht,"resize",Ro),ko(At?ui:ht,"scroll",Io),bt&&ko(t,"refreshInit",bt),!1!==e&&(yt.progress=Y=0,a=s=xt=Tt()),!1!==r&&yt.refresh())},yt.getTween=function(t){return t&&n?n.tween:U},yt.setPositions=function(t,e){$&&(w+=t-l,B+=e-t-A),yt.start=l=t,yt.end=c=e,A=e-t,yt.update()},yt.disable=function(e,r){if(yt.enabled&&(!1!==e&&yt.revert(),yt.enabled=yt.isActive=!1,r||U&&U.pause(),W=0,i&&(i.uncache=1),bt&&To(t,"refreshInit",bt),z&&(z.pause(),n.tween&&n.tween.kill()&&(n.tween=0)),!At)){for(var o=zo.length;o--;)if(zo[o].scroller===ht&&zo[o]!==yt)return;To(ht,"resize",Ro),To(ht,"scroll",Io)}},yt.kill=function(t,n){yt.disable(t,n),U&&!n&&U.kill(),N&&delete Yo[N];var o=zo.indexOf(yt);o>=0&&zo.splice(o,1),o===bi&&ta>0&&bi--,o=0,zo.forEach((function(t){return t.scroller===yt.scroller&&(o=1)})),o||(yt.scroll.rec=0),r&&(r.scrollTrigger=null,t&&r.render(-1),n||r.kill()),u&&[u,p,d,h].forEach((function(t){return t.parentNode&&t.parentNode.removeChild(t)})),qi===yt&&(qi=0),$&&(i&&(i.uncache=1),o=0,zo.forEach((function(t){return t.pin===$&&o++})),o||(i.spacer=0)),e.onKill&&e.onKill(yt)},yt.enable(!1,!1),R&&R(yt),r&&r.add&&!A?si.delayedCall(.01,(function(){return l||c||yt.refresh()}))&&(A=.01)&&(l=c=0):yt.refresh()}else this.update=this.refresh=this.kill=Ni},t.register=function(e){return li||(si=e||Gi(),Ki()&&window.document&&t.enable(),li=Li),li},t.defaults=function(t){if(t)for(var e in t)Oo[e]=t[e];return Oo},t.disable=function(t,e){Li=0,zo.forEach((function(r){return r[e?"kill":"disable"](t)})),To(ci,"wheel",Io),To(ui,"scroll",Io),clearInterval(gi),To(ui,"touchcancel",Ni),To(di,"touchstart",Ni),xo(To,ui,"pointerdown,touchstart,mousedown",Qi),xo(To,ui,"pointerup,touchend,mouseup",Fi),fi.kill(),to(To);for(var r=0;r<Xn.length;r+=3)So(To,Xn[r],Xn[r+1]),So(To,Xn[r],Xn[r+2])},t.enable=function(){if(ci=window,ui=document,pi=ui.documentElement,di=ui.body,si&&(Ai=si.utils.toArray,_i=si.utils.clamp,Ti=si.core.suppressOverwrites||Ni,si.core.globals("ScrollTrigger",t),di)){Li=1,ai.register(si),t.isTouch=ai.isTouch,Pi=ai.isTouch&&/(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent),ko(ci,"wheel",Io),hi=[ci,ui,pi,di],t.matchMedia({"(orientation: portrait)":function(){return qo(),qo}}),ko(ui,"scroll",Io);var e,r,n=di.style,i=n.borderTopStyle;for(n.borderTopStyle="solid",e=yo(di),$n.m=Math.round(e.top+$n.sc())||0,Zn.m=Math.round(e.left+Zn.sc())||0,i?n.borderTopStyle=i:n.removeProperty("border-top-style"),gi=setInterval(Wo,250),si.delayedCall(.5,(function(){return Ri=0})),ko(ui,"touchcancel",Ni),ko(di,"touchstart",Ni),xo(ko,ui,"pointerdown,touchstart,mousedown",Qi),xo(ko,ui,"pointerup,touchend,mouseup",Fi),yi=si.utils.checkPrefix("transform"),na.push(yi),li=Xi(),fi=si.delayedCall(.2,$o).pause(),xi=[ui,"visibilitychange",function(){var t=ci.innerWidth,e=ci.innerHeight;ui.hidden?(wi=t,Bi=e):wi===t&&Bi===e||Ro()},ui,"DOMContentLoaded",$o,ci,"load",$o,ci,"resize",Ro],to(ko),zo.forEach((function(t){return t.enable(0,1)})),r=0;r<Xn.length;r+=3)So(To,Xn[r],Xn[r+1]),So(To,Xn[r],Xn[r+2])}},t.config=function(e){"limitCallbacks"in e&&(Di=!!e.limitCallbacks);var r=e.syncInterval;r&&clearInterval(gi)||(gi=r)&&setInterval(Wo,r),"ignoreMobileResize"in e&&(Oi=1===t.isTouch&&e.ignoreMobileResize),"autoRefreshEvents"in e&&(to(To)||to(ko,e.autoRefreshEvents||"none"),Si=-1===(e.autoRefreshEvents+"").indexOf("resize"))},t.scrollerProxy=function(t,e){var r=Jn(t),n=Xn.indexOf(r),i=Zi(r);~n&&Xn.splice(n,i?6:2),e&&(i?jn.unshift(ci,e,di,e,pi,e):jn.unshift(r,e))},t.matchMedia=function(t){var e,r,n,i,o;for(r in t)n=Vo.indexOf(r),i=t[r],Yi=r,"all"===r?i():(e=ci.matchMedia(r))&&(e.matches&&(o=i()),~n?(Vo[n+1]=ao(Vo[n+1],i),Vo[n+2]=ao(Vo[n+2],o)):(n=Vo.length,Vo.push(r,i,o),e.addListener?e.addListener(Lo):e.addEventListener("change",Lo)),Vo[n+3]=e.matches),Yi=0;return Vo},t.clearMatchMedia=function(t){t||(Vo.length=0),(t=Vo.indexOf(t))>=0&&Vo.splice(t,4)},t.isInViewport=function(t,e,r){var n=(eo(t)?Jn(t):t).getBoundingClientRect(),i=n[r?ho:fo]*e||0;return r?n.right-i>0&&n.left+i<ci.innerWidth:n.bottom-i>0&&n.top+i<ci.innerHeight},t.positionInViewport=function(t,e,r){eo(t)&&(t=Jn(t));var n=t.getBoundingClientRect(),i=n[r?ho:fo],o=null==e?i/2:e in Mo?Mo[e]*i:~e.indexOf("%")?parseFloat(e)*i/100:parseFloat(e)||0;return r?(n.left+o)/ci.innerWidth:(n.top+o)/ci.innerHeight},t}();ha.version="3.10.4",ha.saveStyles=function(t){return t?Ai(t).forEach((function(t){if(t&&t.style){var e=No.indexOf(t);e>=0&&No.splice(e,5),No.push(t,t.style.cssText,t.getBBox&&t.getAttribute("transform"),si.core.getCache(t),Yi)}})):No},ha.revert=function(t,e){return Ko(!t,e)},ha.create=function(t,e){return new ha(t,e)},ha.refresh=function(t){return t?Ro():(li||ha.register())&&$o(!0)},ha.update=ea,ha.clearScrollMemory=Go,ha.maxScroll=function(t,e){return Ji(t,e?Zn:$n)},ha.getScrollFunc=function(t,e){return ti(Jn(t),e?Zn:$n)},ha.getById=function(t){return Yo[t]},ha.getAll=function(){return zo.filter((function(t){return"ScrollSmoother"!==t.vars.id}))},ha.isScrolling=function(){return!!Vi},ha.snapDirectional=Bo,ha.addEventListener=function(t,e){var r=Xo[t]||(Xo[t]=[]);~r.indexOf(e)||r.push(e)},ha.removeEventListener=function(t,e){var r=Xo[t],n=r&&r.indexOf(e);n>=0&&r.splice(n,1)},ha.batch=function(t,e){var r,n=[],i={},o=e.interval||.016,a=e.batchMax||1e9,s=function(t,e){var r=[],n=[],i=si.delayedCall(o,(function(){e(r,n),r=[],n=[]})).pause();return function(t){r.length||i.restart(!0),r.push(t.trigger),n.push(t),a<=r.length&&i.progress(1)}};for(r in e)i[r]="on"===r.substr(0,2)&&ro(e[r])&&"onRefreshInit"!==r?s(0,e[r]):e[r];return ro(a)&&(a=a(),ko(ha,"refresh",(function(){return a=e.batchMax()}))),Ai(t).forEach((function(t){var e={};for(r in i)e[r]=i[r];e.trigger=t,n.push(ha.create(e))})),n};var fa,Aa=function(t,e,r,n){return e>n?t(n):e<0&&t(0),r>n?(n-e)/(r-e):r<0?e/(e-r):1},_a=function t(e,r){!0===r?e.style.removeProperty("touch-action"):e.style.touchAction=!0===r?"auto":r?"pan-"+r+(ai.isTouch?" pinch-zoom":""):"none",e===pi&&t(di,r)},ma={auto:1,scroll:1},ga=function(t){var e,r=t.event,n=t.target,i=t.axis,o=(r.changedTouches?r.changedTouches[0]:r).target,a=o._gsap||si.core.getCache(o),s=Xi();if(!a._isScrollT||s-a._isScrollT>2e3){for(;o&&o.scrollHeight<=o.clientHeight;)o=o.parentNode;a._isScroll=o&&!Zi(o)&&o!==n&&(ma[(e=Co(o)).overflowY]||ma[e.overflowX]),a._isScrollT=s}(a._isScroll||"x"===i)&&(r._gsapAllow=!0)},Ca=function(t,e,r,n){return ai.create({target:t,capture:!0,debounce:!1,lockAxis:!0,type:e,onWheel:n=n&&ga,onPress:n,onDrag:n,onScroll:n,onEnable:function(){return r&&ko(ui,ai.eventTypes[0],ya,!1,!0)},onDisable:function(){return To(ui,ai.eventTypes[0],ya,!0)}})},va=/(input|label|select|textarea)/i,ya=function(t){var e=va.test(t.target.tagName);(e||fa)&&(t._gsapAllow=!0,fa=e)};ha.sort=function(t){return zo.sort(t||function(t,e){return-1e6*(t.vars.refreshPriority||0)+t.start-(e.start+-1e6*(e.vars.refreshPriority||0))})},ha.observe=function(t){return new ai(t)},ha.normalizeScroll=function(t){if(void 0===t)return Ei;if(!0===t&&Ei)return Ei.enable();if(!1===t)return Ei&&Ei.kill();var e=t instanceof ai?t:function(t){io(t)||(t={}),t.preventDefault=t.isNormalizer=t.allowClicks=!0,t.type||(t.type="wheel,touch"),t.debounce=!!t.debounce,t.id=t.id||"normalizer";var e,r,n,i,o,a,s,l,c=t,u=c.normalizeScrollX,p=c.momentum,d=c.allowNestedScroll,h=Jn(t.target)||pi,f=si.core.globals().ScrollSmoother,A=Pi&&(t.content&&Jn(t.content)||f&&f.get()&&f.get().content()),_=ti(h,$n),m=ti(h,Zn),g=1,C=(ai.isTouch&&ci.visualViewport?ci.visualViewport.scale*ci.visualViewport.width:ci.outerWidth)/ci.innerWidth,v=0,y=ro(p)?function(){return p(e)}:function(){return p||2.8},b=Ca(h,t.type,!0,d),w=function(){return n=!1},B=Ni,x=Ni,k=function(){r=Ji(h,$n),x=_i(Pi?1:0,r),u&&(B=_i(0,Ji(h,Zn))),i=Zo},T=function(){k(),o.isActive()&&o.vars.scrollY>r&&(_()>r?o.progress(1)&&_(r):o.resetTo("scrollY",r))};return t.ignoreCheck=function(t){return Pi&&"touchmove"===t.type&&function(){if(n){requestAnimationFrame(w);var t=Hi(e.deltaY/2),r=x(_.v-t);return A&&r!==_.v+_.offset&&(_.offset=r-_.v,A.style.transform="translateY("+-_.offset+"px)",A._gsap&&(A._gsap.y=-_.offset+"px"),_.cacheID=Xn.cache,ea()),!0}A&&(A.style.transform="translateY(0px)",_.offset=_.cacheID=0,A._gsap&&(A._gsap.y="0px")),n=!0}()||g>1.05&&"touchstart"!==t.type||e.isGesturing||t.touches&&t.touches.length>1},t.onPress=function(){var t=g;g=Hi((ci.visualViewport&&ci.visualViewport.scale||1)/C),o.pause(),t!==g&&_a(h,g>1.01||!u&&"x"),n=!1,a=m(),s=_(),k(),i=Zo},t.onRelease=t.onGestureStart=function(t,e){if(A&&(A.style.transform="translateY(0px)",_.offset=_.cacheID=0,A._gsap&&(A._gsap.y="0px")),e){Xn.cache++;var n,i,a=y();u&&(i=(n=m())+.05*a*-t.velocityX/.227,a*=Aa(m,n,i,Ji(h,Zn)),o.vars.scrollX=B(i)),i=(n=_())+.05*a*-t.velocityY/.227,a*=Aa(_,n,i,Ji(h,$n)),o.vars.scrollY=x(i),o.invalidate().duration(a).play(.01),(Pi&&o.vars.scrollY>=r||n>=r-1)&&si.to({},{onUpdate:T,duration:a})}else l.restart(!0)},t.onWheel=function(){o._ts&&o.pause(),Xi()-v>1e3&&(i=0,v=Xi())},t.onChange=function(t,e,r,n,o){Zo!==i&&k(),e&&u&&m(B(n[2]===e?a+(t.startX-t.x):m()+e-n[1])),r&&_(x(o[2]===r?s+(t.startY-t.y):_()+r-o[1])),ea()},t.onEnable=function(){_a(h,!u&&"x"),ko(ci,"resize",T),b.enable()},t.onDisable=function(){_a(h,!0),To(ci,"resize",T),b.kill()},(e=new ai(t)).iOS=Pi,Pi&&!_()&&_(1),l=e._dc,o=si.to(e,{ease:"power4",paused:!0,scrollX:u?"+=0.1":"+=0",scrollY:"+=0.1",onComplete:l.vars.onComplete}),e}(t);return Ei&&Ei.target===e.target&&Ei.kill(),Zi(e.target)&&(Ei=e),e},ha.core={_getVelocityProp:ei,_inputObserver:Ca,_scrollers:Xn,_proxies:jn,bridge:{ss:function(){Vi||Fo("scrollStart"),Vi=Xi()},ref:function(){return Ci}}},Gi()&&si.registerPlugin(ha);var ba,wa,Ba,xa,ka,Ta,Sa,Ea=function(){return"undefined"!=typeof window},Oa=function(){return ba||Ea()&&(ba=window.gsap)&&ba.registerPlugin&&ba},Ma=function(t){return"string"==typeof t},Ua=function(t){return"function"==typeof t},Pa=function(t,e){var r="x"===e?"Width":"Height",n="scroll"+r,i="client"+r;return t===Ba||t===xa||t===ka?Math.max(xa[n],ka[n])-(Ba["inner"+r]||xa[i]||ka[i]):t[n]-t["offset"+r]},Da=function(t,e){var r="scroll"+("x"===e?"Left":"Top");return t===Ba&&(null!=t.pageXOffset?r="page"+e.toUpperCase()+"Offset":t=null!=xa[r]?xa:ka),function(){return t[r]}},za=function(t,e){if(!(t=Ta(t)[0])||!t.getBoundingClientRect)return console.warn("scrollTo target doesn't exist. Using 0")||{x:0,y:0};var r=t.getBoundingClientRect(),n=!e||e===Ba||e===ka,i=n?{top:xa.clientTop-(Ba.pageYOffset||xa.scrollTop||ka.scrollTop||0),left:xa.clientLeft-(Ba.pageXOffset||xa.scrollLeft||ka.scrollLeft||0)}:e.getBoundingClientRect(),o={x:r.left-i.left,y:r.top-i.top};return!n&&e&&(o.x+=Da(e,"x")(),o.y+=Da(e,"y")()),o},Ya=function(t,e,r,n,i){return isNaN(t)||"object"==typeof t?Ma(t)&&"="===t.charAt(1)?parseFloat(t.substr(2))*("-"===t.charAt(0)?-1:1)+n-i:"max"===t?Pa(e,r)-i:Math.min(Pa(e,r),za(t,e)[r]-i):parseFloat(t)-i},Wa=function(){ba=Oa(),Ea()&&ba&&document.body&&(Ba=window,ka=document.body,xa=document.documentElement,Ta=ba.utils.toArray,ba.config({autoKillThreshold:7}),Sa=ba.config(),wa=1)},Ia={version:"3.10.4",name:"scrollTo",rawVars:1,register:function(t){ba=t,Wa()},init:function(t,e,r,n,i){wa||Wa();var o=this,a=ba.getProperty(t,"scrollSnapType");o.isWin=t===Ba,o.target=t,o.tween=r,e=function(t,e,r,n){if(Ua(t)&&(t=t(e,r,n)),"object"!=typeof t)return Ma(t)&&"max"!==t&&"="!==t.charAt(1)?{x:t,y:t}:{y:t};if(t.nodeType)return{y:t,x:t};var i,o={};for(i in t)o[i]="onAutoKill"!==i&&Ua(t[i])?t[i](e,r,n):t[i];return o}(e,n,t,i),o.vars=e,o.autoKill=!!e.autoKill,o.getX=Da(t,"x"),o.getY=Da(t,"y"),o.x=o.xPrev=o.getX(),o.y=o.yPrev=o.getY(),a&&"none"!==a&&(o.snap=1,o.snapInline=t.style.scrollSnapType,t.style.scrollSnapType="none"),null!=e.x?(o.add(o,"x",o.x,Ya(e.x,t,"x",o.x,e.offsetX||0),n,i),o._props.push("scrollTo_x")):o.skipX=1,null!=e.y?(o.add(o,"y",o.y,Ya(e.y,t,"y",o.y,e.offsetY||0),n,i),o._props.push("scrollTo_y")):o.skipY=1},render:function(t,e){for(var r,n,i,o,a,s=e._pt,l=e.target,c=e.tween,u=e.autoKill,p=e.xPrev,d=e.yPrev,h=e.isWin,f=e.snap,A=e.snapInline;s;)s.r(t,s.d),s=s._next;r=h||!e.skipX?e.getX():p,i=(n=h||!e.skipY?e.getY():d)-d,o=r-p,a=Sa.autoKillThreshold,e.x<0&&(e.x=0),e.y<0&&(e.y=0),u&&(!e.skipX&&(o>a||o<-a)&&r<Pa(l,"x")&&(e.skipX=1),!e.skipY&&(i>a||i<-a)&&n<Pa(l,"y")&&(e.skipY=1),e.skipX&&e.skipY&&(c.kill(),e.vars.onAutoKill&&e.vars.onAutoKill.apply(c,e.vars.onAutoKillParams||[]))),h?Ba.scrollTo(e.skipX?r:e.x,e.skipY?n:e.y):(e.skipY||(l.scrollTop=e.y),e.skipX||(l.scrollLeft=e.x)),!f||1!==t&&0!==t||(n=l.scrollTop,r=l.scrollLeft,A?l.style.scrollSnapType=A:l.style.removeProperty("scroll-snap-type"),l.scrollTop=n+1,l.scrollLeft=r+1,l.scrollTop=n,l.scrollLeft=r),e.xPrev=e.x,e.yPrev=e.y},kill:function(t){var e="scrollTo"===t;(e||"scrollTo_x"===t)&&(this.skipX=1),(e||"scrollTo_y"===t)&&(this.skipY=1)}};function qa(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}Ia.max=Pa,Ia.getOffset=za,Ia.buildGetter=Da,Oa()&&ba.registerPlugin(Ia);var Ra,Xa,ja,Va,La,Qa,Fa,Na,Ha,Ka,Ga,Za,$a,Ja=function(){return"undefined"!=typeof window},ts=function(){return Ra||Ja()&&(Ra=window.gsap)&&Ra.registerPlugin&&Ra},es=(Date.now,function(t){var e=Va.querySelector(".ScrollSmoother-wrapper");return e||((e=Va.createElement("div")).classList.add("ScrollSmoother-wrapper"),t.parentNode.insertBefore(e,t),e.appendChild(t)),e}),rs=function(){function t(e){var r=this;Xa||t.register(Ra)||console.warn("Please gsap.registerPlugin(ScrollSmoother)"),e=this.vars=e||{},Ka&&Ka.kill(),Ka=this;var n,i,o,a,s,l,c,u,p,d,h,f,A,_,m=e,g=m.smoothTouch,C=m.onUpdate,v=m.onStop,y=m.smooth,b=m.onFocusIn,w=m.normalizeScroll,B=Ha.getScrollFunc(ja),x=1===Ha.isTouch?!0===g?.8:parseFloat(g)||0:0===y||!1===y?0:parseFloat(y)||.8,k=0,T=0,S=1,E=Za(0),O=function(){return E.update(-k)},M={y:0},U=function(){return n.style.overflow="visible"},P=function(t){t.update();var e=t.getTween();e&&(e.pause(),e._time=e._dur,e._tTime=e._tDur),A=!1,t.animation.progress(t.progress,!0)},D=function(t,e){(t!==k&&!d||e)&&(x&&(n.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+t+", 0, 1)"),T=t-k,k=t,Ha.isUpdating||Ha.update())},z=function(t){return arguments.length?(d?k=-t:D(-t),M.y=-t,A=!0,B(t),this):-k-B.offset},Y=function(t){i.scrollTop=0,b&&!1===b(r,t)||(Ha.isInViewport(t.target)||t.target===_||r.scrollTo(t.target,!1,"center center"),_=t.target)},W=function(t,e){var r,n,i,o;s.forEach((function(e){r=e.pins,o=e.markers,t.forEach((function(t){t.trigger!==e.trigger&&t.pinnedContainer!==e.trigger||e===t||(n=t.start,i=(n-e.start-e.offset)/e.ratio-(n-e.start),r.forEach((function(t){return i-=t.distance/e.ratio-t.distance})),t.setPositions(n+i,t.end+i),t.markerStart&&o.push(Ra.quickSetter([t.markerStart,t.markerEnd],"y","px")),t.pin&&t.end>0&&(i=t.end-t.start,r.push({start:t.start,end:t.end,distance:i,trig:t}),e.setPositions(e.start,e.end+i),e.vars.onRefresh(e)))}))}))},I=function(){U(),requestAnimationFrame(U),s&&(s.forEach((function(t){var e=t.start,r=t.auto?Math.min(Ha.maxScroll(t.scroller),t.end):e+(t.end-e)/t.ratio,n=(r-t.end)/2;e-=n,r-=n,t.offset=n||1e-4,t.pins.length=0,t.setPositions(Math.min(e,r),Math.max(e,r)),t.vars.onRefresh(t)})),W(Ha.sort())),E.reset()},q=function(){return s&&s.forEach((function(t){return t.vars.onRefresh(t)}))},R=function(){return s&&s.forEach((function(t){return t.vars.onRefreshInit(t)})),q},X=function(t,e,r,n){return function(){var i="function"==typeof e?e(r,n):e;return i||0===i||(i=n.getAttribute("data-"+t)||("speed"===t?1:0)),n.setAttribute("data-"+t,i),"auto"===i?i:parseFloat(i)}},j=function(t,e,r,n){var o,a,l,c,u,p,d=X("speed",e,n,t),h=X("lag",r,n,t),f=Ra.getProperty(t,"y"),A=t._gsap,_=function(){e=d(),r=h(),o=parseFloat(e)||1,u=(l="auto"===e)?0:.5,c&&c.kill(),c=r&&Ra.to(t,{ease:Ga,overwrite:!1,y:"+=0",duration:r}),a&&(a.ratio=o,a.autoSpeed=l)},m=function(){A.y=f+"px",A.renderTransform(1),_()},g=[],C=[],v=0,y=function(e){if(l){m();var r=function(t,e){var r,n,i=t.parentNode||La,o=t.getBoundingClientRect(),a=i.getBoundingClientRect(),s=a.top-o.top,l=a.bottom-o.bottom,c=(Math.abs(s)>Math.abs(l)?s:l)/(1-e),u=-c*e;return c>0&&(u+=-(n=.5==(r=a.height/(ja.innerHeight+a.height))?2*a.height:2*Math.min(a.height,-c*r/(2*r-1)))/2,c+=n),{change:c,offset:u}}(t,Na(0,1,-e.start/(e.end-e.start)));v=r.change,p=r.offset}else v=(e.end-e.start)*(1-o),p=0;g.forEach((function(t){return v-=t.distance*(1-o)})),e.vars.onUpdate(e),c&&c.progress(1)};return _(),(1!==o||l||c)&&(y(a=Ha.create({trigger:l?t.parentNode:t,scroller:i,scrub:!0,refreshPriority:-999,onRefreshInit:m,onRefresh:y,onKill:function(t){var e=s.indexOf(t);e>=0&&s.splice(e,1),m()},onUpdate:function(t){var e,r,n,i,o=f+v*(t.progress-u),a=g.length,s=0;if(t.offset){if(a){for(r=-k,n=t.end;a--;){if((e=g[a]).trig.isActive||r>=e.start&&r<=e.end)return void(c&&(e.trig.progress+=e.trig.direction<0?.001:-.001,e.trig.update(0,0,1),c.resetTo("y",parseFloat(A.y),-T,!0),S&&c.progress(1)));r>e.end&&(s+=e.distance),n-=e.distance}o=f+s+v*((Ra.utils.clamp(t.start,t.end,r)-t.start-s)/(n-t.start)-u)}i=o+p,o=Math.round(1e5*i)/1e5||0,C.length&&!l&&C.forEach((function(t){return t(o-s)})),c?(c.resetTo("y",o,-T,!0),S&&c.progress(1)):(A.y=o+"px",A.renderTransform(1))}}})),Ra.core.getCache(a.trigger).stRevert=R,a.startY=f,a.pins=g,a.markers=C,a.ratio=o,a.autoSpeed=l,t.style.willChange="transform"),a};function V(){return o=n.clientHeight,n.style.overflow="visible",Qa.style.height=o+"px",o-ja.innerHeight}Ha.addEventListener("refresh",I),Ra.delayedCall(.5,(function(){return S=0})),this.scrollTop=z,this.scrollTo=function(t,e,n){var i=Ra.utils.clamp(0,Ha.maxScroll(ja),isNaN(t)?r.offset(t,n):+t);e?d?Ra.to(r,{duration:x,scrollTop:i,overwrite:"auto",ease:Ga}):B(i):z(i)},this.offset=function(t,e){var r,n=(t=Fa(t)[0]).style.cssText,i=Ha.create({trigger:t,start:e||"top top"});return s&&W([i]),r=i.start,i.kill(!1),t.style.cssText=n,Ra.core.getCache(t).uncache=1,r},this.content=function(t){if(arguments.length){var e=Fa(t||"#smooth-content")[0]||Qa.children[0];return e!==n&&(p=(n=e).getAttribute("style")||"",Ra.set(n,{overflow:"visible",width:"100%",boxSizing:"border-box"})),this}return n},this.wrapper=function(t){return arguments.length?(i=Fa(t||"#smooth-wrapper")[0]||es(n),u=i.getAttribute("style")||"",V(),Ra.set(i,x?{overflow:"hidden",position:"fixed",height:"100%",width:"100%",top:0,left:0,right:0,bottom:0}:{overflow:"visible",position:"relative",width:"100%",height:"auto",top:"auto",bottom:"auto",left:"auto",right:"auto"}),this):i},this.effects=function(t,e){var r;if(s||(s=[]),!t)return s.slice(0);(t=Fa(t)).forEach((function(t){for(var e=s.length;e--;)s[e].trigger===t&&(s[e].kill(),s.splice(e,1))}));var n,i,o=e=e||{},a=o.speed,l=o.lag,c=[];for(n=0;n<t.length;n++)(i=j(t[n],a,l,n))&&c.push(i);return(r=s).push.apply(r,c),c},this.sections=function(t,e){var r;if(l||(l=[]),!t)return l.slice(0);var n=Fa(t).map((function(t){return Ha.create({trigger:t,start:"top 120%",end:"bottom -20%",onToggle:function(e){t.style.opacity=e.isActive?"1":"0",t.style.pointerEvents=e.isActive?"all":"none"}})}));return e&&e.add?(r=l).push.apply(r,n):l=n.slice(0),n},this.content(e.content),this.wrapper(e.wrapper),this.render=function(t){return D(t||0===t?t:k)},this.getVelocity=function(){return E.getVelocity(-k)},Ha.scrollerProxy(i,{scrollTop:z,scrollHeight:function(){return V()&&Qa.scrollHeight},fixedMarkers:!1!==e.fixedMarkers&&!!x,content:n,getBoundingClientRect:function(){return{top:0,left:0,width:ja.innerWidth,height:ja.innerHeight}}}),Ha.defaults({scroller:i});var L=Ha.getAll().filter((function(t){return t.scroller===ja||t.scroller===i}));L.forEach((function(t){return t.revert(!0)})),a=Ha.create({animation:Ra.to(M,{y:function(){return-V()},ease:"none",data:"ScrollSmoother",duration:100,onUpdate:function(){var t=A;t&&(M.y=k,P(a)),D(M.y,t),O(),C&&!d&&C(r)}}),onRefreshInit:function(){f=k,M.y=i.scrollTop=0},id:"ScrollSmoother",scroller:ja,invalidateOnRefresh:!0,start:0,refreshPriority:-9999,end:V,onScrubComplete:function(){E.reset(),v&&v(r)},scrub:x||!0,onRefresh:function(t){P(t),M.y=-B(),D(M.y),S||t.animation.progress(Ra.utils.clamp(0,1,f/-t.end))}}),this.smooth=function(t){return x=t,arguments.length?a.scrubDuration(t):a.getTween()?a.getTween().duration():0},a.getTween()&&(a.getTween().vars.ease=e.ease||Ga),this.scrollTrigger=a,e.effects&&this.effects(!0===e.effects?"[data-speed], [data-lag]":e.effects,{}),e.sections&&this.sections(!0===e.sections?"[data-section]":e.sections),L.forEach((function(t){t.vars.scroller=i,t.init(t.vars,t.animation)})),this.paused=function(t,e){return arguments.length?(!!d!==t&&(t?(a.getTween()&&a.getTween().pause(),B(-k),E.reset(),(h=Ha.normalizeScroll())&&h.disable(),(d=Ha.observe({preventDefault:!0,type:"wheel,touch,scroll",debounce:!1,allowClicks:!0,onChangeY:function(){return z(-k)}})).nested=$a(La,"wheel,touch,scroll",!0,!1!==e)):(d.nested.kill(),d.kill(),d=0,h&&h.enable(),a.progress=(-k-a.start)/(a.end-a.start),P(a))),this):!!d},this.kill=function(){r.paused(!1),P(a),a.kill();for(var t=(s||[]).concat(l||[]),e=t.length;e--;)t[e].kill();Ha.scrollerProxy(i),Ha.removeEventListener("refresh",I),Qa.style.removeProperty("height"),i.style.cssText=u,n.style.cssText=p;var o=Ha.defaults({});o&&o.scroller===i&&Ha.defaults({scroller:ja}),r.normalizer&&Ha.normalizeScroll(!1),clearInterval(c),Ka=null,ja.removeEventListener("focusin",Y)},this.refresh=function(t,e){return a.refresh(t,e)},w&&(this.normalizer=Ha.normalizeScroll(!0===w?{debounce:!0,content:n}:w)),Ha.config(e),"overscrollBehavior"in ja.getComputedStyle(Qa)&&Ra.set([Qa,La],{overscrollBehavior:"none"}),"scrollBehavior"in ja.getComputedStyle(Qa)&&Ra.set([Qa,La],{scrollBehavior:"auto"}),ja.addEventListener("focusin",Y),c=setInterval(O,250),"loading"===Va.readyState||requestAnimationFrame((function(){return Ha.refresh()}))}var e,r;return t.register=function(e){return Xa||(Ra=e||ts(),Ja()&&window.document&&(ja=window,Va=document,La=Va.documentElement,Qa=Va.body),Ra&&(Fa=Ra.utils.toArray,Na=Ra.utils.clamp,Ga=Ra.parseEase("expo"),Ha=Ra.core.globals().ScrollTrigger,Ra.core.globals("ScrollSmoother",t),Qa&&Ha&&(Za=Ha.core._getVelocityProp,$a=Ha.core._inputObserver,t.refresh=Ha.refresh,Xa=1))),Xa},e=t,(r=[{key:"progress",get:function(){return this.scrollTrigger.animation._time/100}}])&&qa(e.prototype,r),t}();rs.version="3.10.4",rs.create=function(t){return Ka&&t&&Ka.content()===Fa(t.content)[0]?Ka:new rs(t)},rs.get=function(){return Ka},ts()&&Ra.registerPlugin(rs),r(439),Bn.registerPlugin(ha,rs,Ia);var ns=function(t,e){return"./images/config/".concat(e,"/").concat((t+1).toString(),".png")},is=[],os=[],as=[],ss=[],ls=[],cs=[];window.addEventListener("DOMContentLoaded",(function(){document.querySelector("html").classList.add("stop_scroll");var t=document.getElementById("overlay"),e=document.getElementById("progress"),r=document.getElementById("progstat"),n=document.images,i=0,o=n.length,a=o+432;if(0==a)return l();function s(){var t=(100/a*(i+=1)<<0)+"%";if(e.style.width=t,r.innerHTML=t,i===a)return l()}function l(){Bn.to(overlay,{opacity:0,duration:1}),setTimeout((function(){t.style.display="none",document.querySelector("html").classList.remove("stop_scroll"),function(){var t=rs.create({smooth:2.2,smoothTouch:.1}),e=function(t){return window.innerHeight*(t/100)},r=function(t){return window.innerWidth*(t/100)},n=!1;window.innerHeight==screen.height&&(n=!0),t.scrollTo(e(0));var i=document.querySelector(".configuration_link"),o=document.querySelector(".logo_Lenovo_top"),a=document.querySelector(".fake_header .configuration_link"),s=document.querySelector(".fake_header .try_link"),l=document.querySelector(".theStory_link"),c=document.querySelector(".try_link"),u=document.querySelector(".huddle_item"),p=document.querySelector(".small_item"),d=document.querySelector(".medium_item "),h=document.querySelector(".large_item "),f=document.querySelector(".many_item ");i.addEventListener("click",(function(){return n?t.scrollTo(e(2100)):t.scrollTo(e(2200))})),a.addEventListener("click",(function(){return n?t.scrollTo(e(2100)):t.scrollTo(e(2200))})),c.addEventListener("click",(function(){return t.scrollTo(e(11e3))})),s.addEventListener("click",(function(){return t.scrollTo(e(11e3))})),u.addEventListener("click",(function(){return n?t.scrollTo(e(2450)):t.scrollTo(e(2522))})),p.addEventListener("click",(function(){return n?t.scrollTo(e(3550)):t.scrollTo(e(3612))})),d.addEventListener("click",(function(){return n?t.scrollTo(e(5210)):t.scrollTo(e(5300))})),h.addEventListener("click",(function(){return n?t.scrollTo(e(7800)):t.scrollTo(e(7893))})),f.addEventListener("click",(function(){return n?t.scrollTo(e(10360)):t.scrollTo(e(10440))})),o.addEventListener("click",(function(){return t.scrollTo(e(0))})),l.addEventListener("click",(function(){return t.scrollTo(e(0))})),document.querySelector(".hub_huddle_btn").addEventListener("click",(function(){n?t.scrollTo(e(2530)):t.scrollTo(e(2595))})),document.querySelector(".hub_small_btn").addEventListener("click",(function(){n?t.scrollTo(e(3685)):t.scrollTo(e(3747))})),document.querySelector(".camera_huddle_btn").addEventListener("click",(function(){n?t.scrollTo(e(2973)):t.scrollTo(e(3052))})),document.querySelector(".camera_small_btn").addEventListener("click",(function(){n?t.scrollTo(e(4162)):t.scrollTo(e(4236))})),document.querySelector(".bar_small_btn").addEventListener("click",(function(){n?t.scrollTo(e(4650)):t.scrollTo(e(4715))})),document.querySelector(".view_medium_btn").addEventListener("click",(function(){n?t.scrollTo(e(5300)):t.scrollTo(e(5370))})),document.querySelector(".view_large_btn").addEventListener("click",(function(){n?t.scrollTo(e(7883)):t.scrollTo(e(7955))})),document.querySelector(".core_medium_btn").addEventListener("click",(function(){n?t.scrollTo(e(5750)):t.scrollTo(e(5843))})),document.querySelector(".core_large_btn").addEventListener("click",(function(){n?t.scrollTo(e(8330)):t.scrollTo(e(8402))})),document.querySelector(".camera_medium_btn").addEventListener("click",(function(){n?t.scrollTo(e(6240)):t.scrollTo(e(6290))})),document.querySelector(".camera_large_btn").addEventListener("click",(function(){n?t.scrollTo(e(8792)):t.scrollTo(e(8864))})),document.querySelector(".bar_medium_btn").addEventListener("click",(function(){n?t.scrollTo(e(6730)):t.scrollTo(e(6800))})),document.querySelector(".bar_large_btn").addEventListener("click",(function(){n?t.scrollTo(e(9300)):t.scrollTo(e(9363))})),document.querySelector(".micro_medium_btn").addEventListener("click",(function(){n?t.scrollTo(e(7220)):t.scrollTo(e(7300))})),document.querySelector(".micro_large_btn").addEventListener("click",(function(){n?t.scrollTo(e(9800)):t.scrollTo(e(9862))}));var A=Bn.utils.toArray(".panel"),_=Bn.to(A,{xPercent:-100*(A.length-1),ease:"none",scrollTrigger:{trigger:".container",start:"top top",pin:!0,scrub:.1,fastScrollEnd:!0,end:"+="+document.querySelector(".container").offsetWidth}}),m=document.querySelector(".re_title span"),g=m.getBoundingClientRect().top,C=m.getBoundingClientRect().right,v=m.getBoundingClientRect().bottom,y=m.getBoundingClientRect().left,b=Math.max(document.documentElement.clientWidth||0,window.innerWidth||0),w=Math.max(document.documentElement.clientHeight||0,window.innerHeight||0),B="inset(".concat(g/w*100,"% ").concat(100-C/b*100,"% ").concat(100-v/w*100,"% ").concat((y+.003*b)/b*100,"%)"),x=Bn.utils.toArray(".y1920_line"),k=Bn.utils.toArray(".text_1920 div"),T=Bn.utils.toArray(".text_1950 div"),S=Bn.utils.toArray(".text_1980 div"),E=Bn.utils.toArray(".text_2010 div"),O=Bn.utils.toArray(".text_lady div"),M=Bn.timeline({scrollTrigger:{ease:"none",trigger:".intro_section",start:"top top",end:"+=100%",pin:".red_clip",scrub:.1,fastScrollEnd:!0,id:"1"}});M.to(".red_clip",{clipPath:B,duration:3}),M.to(".theStory_link",{color:"#000",duration:.01},0),M.to(".configuration_link",{color:"#000",duration:.01},0),M.to(".try_link",{color:"#000",duration:.01},0),M.set("header",{zIndex:99999},.4),M.to(".red_clip",{clipPath:B,opacity:0,duration:1}),M.to(".red_clip",{clipPath:B,opacity:0,duration:2}),M.fromTo(".theStory_link",{color:"#000"},{color:"#d80018",duration:.5},1),M.fromTo(".configuration_link",{color:"#000"},{color:"#fff",duration:.5},2),M.fromTo(".try_link",{color:"#000"},{color:"#fff",duration:.5},2),M.fromTo(".top_menu_wrap",{borderBottom:"1px solid #222"},{borderBottom:"1px solid #fff",duration:.5},2);var U=Bn.timeline({scrollTrigger:{ease:"none",trigger:".intro_section",start:"top top",end:"+=1800%",pin:!0,scrub:.1,fastScrollEnd:!0,id:"1"}});U.to(".bg_video",{opacity:0,duration:2}),U.to(".bg_video",{opacity:1,duration:1}),U.to(".re_title",{yPercent:0,duration:3}),U.to(".re_title",{yPercent:1e3,duration:3}),U.to(".re_title",{autoAlpha:0,duration:.1}),U.to(".y1920_wrap",{yPercent:180,duration:3},"-=3.5"),U.to(".bg_video",{opacity:0,duration:3}),U.to(".bg_main_image",{opacity:1,duration:3},"<"),U.to(x,{autoAlpha:1,scale:1,duration:2,stagger:.4},"-=3.1"),U.to(x,{autoAlpha:0,duration:2,stagger:.4}),U.to(".y1920_wrap .num1",{opacity:1,duration:2},"-=.5"),U.to(".y1920_wrap",{scale:1,left:"50%",y:0,yPercent:-50,duration:2}),U.to(".y1920_wrap",{scale:1,y:0,yPercent:-50,duration:2}),U.to(".left_column",{left:0,duration:2}),U.to(".bg_main_image",{left:"25%",duration:2},"<"),U.to(".y1920_wrap",{transformOrigin:"50% 50%",top:"140px",left:"12.5vw",scale:.25,duration:2},"-=2.5"),U.to(k,{scale:1,autoAlpha:1,duration:1,delay:1,stagger:.4},"<"),U.to(".scroll_bg_1920",{left:"-100%",delay:2,duration:2}),U.to(".text_1920",{left:"-120%",duration:2},"<"),U.to(".img1920",{top:"100vh",duration:2},"<"),U.to(".img1950",{top:"0vh",duration:2},"<"),U.to(".num2_in1920",{opacity:0,duration:.5},"<"),U.to(".num5",{opacity:1,duration:.5},"<"),U.to(T,{autoAlpha:1,scale:1,stagger:.4,duration:3}),U.to(".scroll_bg_1950",{left:"-100%",delay:2,duration:2}),U.to(".text_1950",{left:"-120%",duration:2},"<"),U.to(".img1950",{top:"100vh",duration:2},"<"),U.to(".img1980",{top:"0vh",duration:2},"<"),U.to(".num5",{opacity:0,duration:.5},"<"),U.to(".num8",{opacity:1,duration:.5},"<"),U.to(S,{autoAlpha:1,scale:1,stagger:.4,duration:3}),U.to(".scroll_bg_1980",{left:"-100%",delay:2,duration:2}),U.to(".text_1980",{left:"-120%",duration:2},"<"),U.to(".img1980",{top:"100vh",duration:2},"<"),U.to(".img2010",{top:"0vh",duration:2},"<"),U.to(".num8, .num1, .num9",{opacity:0,duration:.5},"<"),U.to(".num2_in2010, .num0, .num1_in2010",{opacity:1,duration:.5},"<"),U.to(E,{autoAlpha:1,scale:1,stagger:.4,duration:3}),U.to(".scroll_image",{left:"-3000px",duration:30},23),U.to(".long_img, .y1920_wrap, .scroll_image, .text_2010",{delay:2,opacity:0,duration:2}),U.to(".lady, .last_device",{scale:1,opacity:1,duration:2},"-=1"),U.to(O,{autoAlpha:1,scale:1,stagger:.4,duration:2},"<"),U.to(".intro_section",{autoAlpha:1,delay:2,duration:2}),U.to(".intro_section",{autoAlpha:0,duration:2}),U.fromTo(".theStory_link",{color:"#d80018"},{color:"#000",duration:.5}),U.fromTo(".configuration_link",{color:"#fff"},{color:"#d80018",duration:.5},"<"),U.fromTo(".try_link",{color:"#fff"},{color:"#000",duration:.5},"<"),U.fromTo(".top_menu_wrap",{borderBottom:"1px solid #fff"},{borderBottom:"1px solid #000",duration:.5},"<");var P=Bn.utils.toArray(".text_anim div");Bn.timeline({ease:"none",scrollTrigger:{trigger:".black_cube",containerAnimation:_,start:"left left",end:"+=200%",toggleActions:"play none none reverse",fastScrollEnd:!0,id:"111"}}).to(P,{x:0,opacity:1,stagger:.5,duration:.5}),window.addEventListener("resize",(function(){ha.sort(),ha.refresh()}),!1);var D,z,Y,W,I,q,R,X,j,V,L,Q,F,N,H,K=document.querySelector(".pointHub_huddle"),G=document.querySelector(".pointCamera_huddle"),Z=document.querySelector(".pointHub_small"),$=document.querySelector(".pointCamera_small"),J=document.querySelector(".pointBar_small"),tt=document.querySelector(".pointView_medium"),et=document.querySelector(".pointCore_medium"),rt=document.querySelector(".pointCamera_medium"),nt=document.querySelector(".pointBar_medium"),it=document.querySelector(".pointMicro_medium"),ot=document.querySelector(".pointView_large"),at=document.querySelector(".pointCore_large"),st=document.querySelector(".pointCamera_large"),lt=document.querySelector(".pointBar_large"),ct=document.querySelector(".pointMicro_large"),ut=document.querySelector(".container");function pt(t){var e=t.getBoundingClientRect();return{top:e.top,left:e.left}}setTimeout((function(){var t=pt(ut),e=pt(K);D=Math.abs(e.top-t.top);var r=pt(G);z=Math.abs(r.top-t.top);var n=pt(Z);Y=Math.abs(n.top-t.top);var i=pt($);W=Math.abs(i.top-t.top);var o=pt(J);I=Math.abs(o.top-t.top);var a=pt(tt);q=Math.abs(a.top-t.top);var s=pt(et);R=Math.abs(s.top-t.top);var l=pt(rt);X=Math.abs(l.top-t.top);var c=pt(nt);j=Math.abs(c.top-t.top);var u=pt(it);V=Math.abs(u.top-t.top);var p=pt(ot);L=Math.abs(p.top-t.top);var d=pt(at);Q=Math.abs(d.top-t.top);var h=pt(st);F=Math.abs(h.top-t.top);var f=pt(lt);N=Math.abs(f.top-t.top);var A=pt(ct);H=Math.abs(A.top-t.top)}),1e3);var dt=Bn.timeline({ease:"none",scrollTrigger:{trigger:".trg_start_config",containerAnimation:_,start:"left center",end:"+="+e(5e3),fastScrollEnd:!0,scrub:1,toggleActions:"play none none reverse"}});dt.to(".sub_menu_bot",{autoAlpha:1,zIndex:9999999,duration:.5}),dt.to(".room",{autoAlpha:1,duration:.5},"<"),dt.to(".sub_menu_top_wrap",{autoAlpha:1,delay:6,duration:.5}),dt.to(".huddle_item ",{color:"#f00",fontWeight:"bold",duration:.1}),dt.to(".device1 ",{border:"1px solid #f00",duration:1}),dt.to(".huddle_room_group_image",{opacity:0,delay:2,duration:1}),dt.to(".hub_sequence",{opacity:1,duration:1},"<"),dt.to(".top_panel_left ",{height:e(60),delay:2,duration:1}),dt.to(".text_hub_left ",{opacity:1,duration:.5}),dt.to(".top_panel_right ",{height:e(60),duration:1},"<"),dt.to(".text_hub_right ",{opacity:1,duration:.5}),dt.to(".text_hub_right ",{opacity:0,delay:8,duration:.5}),dt.to(".top_panel_right ",{height:e(0),duration:1}),dt.to(".text_hub_left ",{opacity:0,duration:.5},"<"),dt.to(".top_panel_left ",{height:e(0),duration:1}),dt.to(".hub_sequence",{opacity:0,delay:2,duration:.3}),dt.to(".hub_main_image",{opacity:1,duration:.3}),dt.to(".hub_main_image",{left:function(){return K.getBoundingClientRect().left},top:function(){return D},scale:.15,duration:2}),dt.to(".device1 ",{border:"1px solid #fff",duration:.3}),dt.to(".device2 ",{border:"1px solid #f00",duration:.3},"<"),dt.to(".cam_sequence ",{opacity:1,duration:.3},"<"),dt.to(".top_panel_left ",{height:e(60),delay:2,duration:1}),dt.to(".cam_hub_left ",{opacity:1,duration:.5}),dt.to(".top_panel_right ",{height:e(60),duration:1},"<"),dt.to(".cam_hub_right ",{opacity:1,duration:.5}),dt.to(".cam_hub_right ",{opacity:0,delay:8,duration:.5}),dt.to(".top_panel_right ",{height:e(0),duration:1}),dt.to(".cam_hub_left ",{opacity:0,duration:.5},"<"),dt.to(".top_panel_left ",{height:e(0),duration:1}),dt.to(".camera_main_image ",{opacity:1,delay:2,duration:1}),dt.to(".cam_sequence ",{opacity:0,duration:1},"<"),dt.to(".camera_main_image",{left:function(){return G.getBoundingClientRect().left},top:function(){return z},scale:.15,duration:2}),dt.to(".room",{autoAlpha:0,delay:2,duration:1}),dt.set(".device3",{opacity:1}),dt.set(".device1 ",{border:"1px solid #f00"}),dt.set(".device2 ",{border:"1px solid #fff"}),dt.set(".hub_huddle_btn ",{autoAlpha:0}),dt.set(".hub_small_btn ",{autoAlpha:1}),dt.set(".camera_huddle_btn ",{autoAlpha:0}),dt.set(".camera_small_btn ",{autoAlpha:1}),dt.set(".bar_small_btn ",{autoAlpha:1}),dt.set(".huddle_item ",{color:"#000",fontWeight:"400"}),dt.set(".small_item ",{color:"#f00",fontWeight:"bold"}),dt.set(".huddle_room_image",{opacity:0}),dt.set(".small_room_image",{opacity:1}),dt.set(".text_small_section",{opacity:1}),dt.set(".text_huddle",{opacity:0}),dt.set(".hub_main_image",{left:r(10),top:e(35),scale:1,opacity:0}),dt.set(".camera_main_image",{left:r(10),top:e(35),scale:1,opacity:0}),dt.set(".small_space_group_image",{opacity:1}),dt.set(".top_panel",{background:"#0e58c7"}),dt.to(".room",{autoAlpha:1,duration:1}),dt.to(".small_space_group_image",{opacity:0,delay:4,duration:1}),dt.to(".hub_sequence",{opacity:1,duration:1}),dt.to(".top_panel_left ",{height:e(60),delay:2,duration:1}),dt.to(".text_hub_left ",{opacity:1,duration:.5}),dt.to(".top_panel_right ",{height:e(60),duration:1},"<"),dt.to(".text_hub_right ",{opacity:1,duration:.5}),dt.to(".text_hub_right ",{opacity:0,delay:8,duration:.5}),dt.to(".top_panel_right ",{height:e(0),duration:1}),dt.to(".text_hub_left ",{opacity:0,duration:.5},"<"),dt.to(".top_panel_left ",{height:e(0),duration:1}),dt.to(".hub_sequence",{opacity:0,delay:2,duration:.3}),dt.to(".hub_main_image",{opacity:1,duration:.3}),dt.to(".hub_main_image",{left:function(){return Z.getBoundingClientRect().left},top:function(){return Y},scale:.15,duration:2}),dt.to(".device1 ",{border:"1px solid #fff",duration:.3}),dt.to(".device2 ",{border:"1px solid #f00",duration:.3},"<"),dt.to(".cam_sequence ",{opacity:1,duration:.3},"<"),dt.to(".top_panel_left ",{height:e(60),delay:2,duration:1}),dt.to(".cam_hub_left ",{opacity:1,duration:.5}),dt.to(".top_panel_right ",{height:e(60),duration:1},"<"),dt.to(".cam_hub_right ",{opacity:1,duration:.5}),dt.to(".cam_hub_right ",{opacity:0,delay:8,duration:.5}),dt.to(".top_panel_right ",{height:e(0),duration:1}),dt.to(".cam_hub_left ",{opacity:0,duration:.5},"<"),dt.to(".top_panel_left ",{height:e(0),duration:1}),dt.to(".camera_main_image ",{opacity:1,delay:2,duration:1}),dt.to(".cam_sequence ",{opacity:0,duration:1},"<"),dt.to(".camera_main_image",{left:function(){return $.getBoundingClientRect().left},top:function(){return W},scale:.15,duration:2}),dt.to(".device2 ",{border:"1px solid #fff",duration:.3}),dt.to(".device3 ",{border:"1px solid #f00",duration:.3},"<"),dt.to(".bar_sequence",{opacity:1,duration:1}),dt.to(".top_panel_left ",{height:e(60),delay:2,duration:1}),dt.to(".bar_hub_left ",{opacity:1,duration:.5}),dt.to(".top_panel_right ",{height:e(60),duration:1},"<"),dt.to(".bar_hub_right ",{opacity:1,duration:.5}),dt.to(".bar_hub_right ",{opacity:0,delay:8,duration:.5}),dt.to(".top_panel_right ",{height:e(0),duration:1}),dt.to(".bar_hub_left ",{opacity:0,duration:.5},"<"),dt.to(".top_panel_left ",{height:e(0),duration:1}),dt.to(".bar_main_image ",{opacity:1,delay:2,duration:1}),dt.to(".bar_sequence ",{opacity:0,duration:1},"<"),dt.to(".bar_main_image",{left:function(){return J.getBoundingClientRect().left},top:function(){return I},rotation:-6,scale:.5,duration:2}),dt.to(".room",{autoAlpha:0,delay:2,duration:1}),dt.set(".device_medium1",{border:"1px solid #f00"}),dt.set(".small_item ",{color:"#000",fontWeight:"400"}),dt.set(".medium_item ",{color:"#f00",fontWeight:"bold"}),dt.set(".small_room_image",{opacity:0}),dt.set(".medium_room_image",{opacity:1}),dt.set(".text_small_section",{opacity:0}),dt.set(".text_medium_section",{opacity:1}),dt.set(".hub_main_image",{left:r(10),top:e(35),scale:1,opacity:0}),dt.set(".camera_main_image",{left:r(10),top:e(35),scale:1,opacity:0}),dt.set(".bar_main_image",{left:r(10),top:e(47.3),scale:1,rotation:0,opacity:0}),dt.set(".medium_space_group_image",{opacity:1}),dt.set(".top_panel",{background:"#e36db1"}),dt.set(".sub_menu_top",{autoAlpha:0}),dt.set(".sub_menu_top_from_medium",{autoAlpha:1}),dt.to(".room",{autoAlpha:1,duration:1}),dt.to(".medium_space_group_image",{opacity:0,delay:2,duration:1}),dt.to(".smartview_sequence",{opacity:1,duration:1}),dt.to(".top_panel_left ",{height:e(60),delay:2,duration:1}),dt.to(".controller_hub_left ",{opacity:1,duration:.5}),dt.to(".top_panel_right ",{height:e(60),duration:1},"<"),dt.to(".controller_hub_right ",{opacity:1,duration:.5}),dt.to(".controller_hub_right ",{opacity:0,delay:8,duration:.5}),dt.to(".top_panel_right ",{height:e(0),duration:1}),dt.to(".controller_hub_left ",{opacity:0,duration:.5},"<"),dt.to(".top_panel_left ",{height:e(0),duration:1}),dt.to(".smartview_sequence",{opacity:0,duration:1}),dt.to(".smartview_main_image",{opacity:1,duration:1},"<"),dt.to(".smartview_main_image",{left:function(){return tt.getBoundingClientRect().left},top:function(){return q},scale:.2,duration:2}),dt.to(".device_medium1",{border:"1px solid #fff",duration:.3}),dt.to(".device_medium2",{border:"1px solid #f00",duration:.3},"<"),dt.to(".smartcore_sequence",{opacity:1,duration:1}),dt.to(".top_panel_left ",{height:e(60),delay:2,duration:1}),dt.to(".core_hub_left ",{opacity:1,duration:.5}),dt.to(".top_panel_right ",{height:e(60),duration:1},"<"),dt.to(".core_hub_right ",{opacity:1,duration:.5}),dt.to(".core_hub_right ",{opacity:0,delay:8,duration:.5}),dt.to(".top_panel_right ",{height:e(0),duration:1}),dt.to(".core_hub_left ",{opacity:0,duration:.5},"<"),dt.to(".top_panel_left ",{height:e(0),duration:1}),dt.to(".smartcore_sequence",{opacity:0,duration:1}),dt.to(".core_main_image",{opacity:1,duration:1},"<"),dt.to(".core_main_image",{left:function(){return et.getBoundingClientRect().left},top:function(){return R},scale:.2,duration:2}),dt.to(".device_medium2",{border:"1px solid #fff",duration:.3}),dt.to(".device_medium3",{border:"1px solid #f00",duration:.3},"<"),dt.to(".cam_sequence ",{opacity:1,duration:1}),dt.to(".top_panel_left ",{height:e(60),delay:2,duration:1}),dt.to(".cam_hub_left ",{opacity:1,duration:.5}),dt.to(".top_panel_right ",{height:e(60),duration:1},"<"),dt.to(".cam_hub_right ",{opacity:1,duration:.5}),dt.to(".cam_hub_right ",{opacity:0,delay:8,duration:.5}),dt.to(".top_panel_right ",{height:e(0),duration:1}),dt.to(".cam_hub_left ",{opacity:0,duration:.5},"<"),dt.to(".top_panel_left ",{height:e(0),duration:1}),dt.to(".cam_sequence ",{opacity:0,delay:2,duration:1}),dt.to(".camera_main_image ",{opacity:1,duration:1},"<"),dt.to(".camera_main_image",{left:function(){return rt.getBoundingClientRect().left},top:function(){return X},scale:.15,duration:2}),dt.to(".device_medium3",{border:"1px solid #fff",duration:.3}),dt.to(".device_medium4",{border:"1px solid #f00",duration:.3},"<"),dt.to(".bar_sequence ",{opacity:1,duration:1}),dt.to(".top_panel_left ",{height:e(60),delay:2,duration:1}),dt.to(".bar_hub_left ",{opacity:1,duration:.5}),dt.to(".top_panel_right ",{height:e(60),duration:1},"<"),dt.to(".bar_hub_right ",{opacity:1,duration:.5}),dt.to(".bar_hub_right ",{opacity:0,delay:8,duration:.5}),dt.to(".top_panel_right ",{height:e(0),duration:1}),dt.to(".bar_hub_left ",{opacity:0,duration:.5},"<"),dt.to(".top_panel_left ",{height:e(0),duration:1}),dt.to(".bar_sequence ",{opacity:0,delay:2,duration:1}),dt.to(".bar_main_image ",{opacity:1,duration:1},"<"),dt.to(".bar_main_image",{left:function(){return nt.getBoundingClientRect().left},top:function(){return j},rotation:-4,scale:.4,duration:2}),dt.to(".device_medium4",{border:"1px solid #fff",duration:.3}),dt.to(".device_medium5",{border:"1px solid #f00",duration:.3},"<"),dt.to(".micro_sequence ",{opacity:1,duration:1}),dt.to(".top_panel_left ",{height:e(60),delay:2,duration:1}),dt.to(".micro_hub_left ",{opacity:1,duration:.5}),dt.to(".top_panel_right ",{height:e(60),duration:1},"<"),dt.to(".micro_hub_right ",{opacity:1,duration:.5}),dt.to(".micro_hub_right ",{opacity:0,delay:8,duration:.5}),dt.to(".top_panel_right ",{height:e(0),duration:1}),dt.to(".micro_hub_left ",{opacity:0,duration:.5},"<"),dt.to(".top_panel_left ",{height:e(0),duration:1}),dt.to(".micro_sequence ",{opacity:0,delay:2,duration:1}),dt.to(".micro_main_image ",{opacity:1,duration:1},"<"),dt.to(".micro_main_image",{left:function(){return it.getBoundingClientRect().left},top:function(){return V},scale:.15,duration:2}),dt.to(".room",{autoAlpha:0,delay:2,duration:1}),dt.set(".view_medium_btn ",{autoAlpha:0}),dt.set(".view_large_btn ",{autoAlpha:1}),dt.set(".core_medium_btn ",{autoAlpha:0}),dt.set(".core_large_btn ",{autoAlpha:1}),dt.set(".camera_medium_btn ",{autoAlpha:0}),dt.set(".camera_large_btn ",{autoAlpha:1}),dt.set(".bar_medium_btn ",{autoAlpha:0}),dt.set(".bar_large_btn ",{autoAlpha:1}),dt.set(".micro_medium_btn ",{autoAlpha:0}),dt.set(".micro_large_btn ",{autoAlpha:1}),dt.set(".device_medium1",{border:"1px solid #f00"}),dt.set(".device_medium5",{border:"1px solid #fff"}),dt.set(".medium_item ",{color:"#000",fontWeight:"400"}),dt.set(".large_item ",{color:"#f00",fontWeight:"bold"}),dt.set(".text_medium_section",{opacity:0}),dt.set(".text_large_section",{opacity:1}),dt.set(".medium_room_image",{opacity:0}),dt.set(".large_room_image",{opacity:1}),dt.set(".core_main_image",{left:r(10),top:e(35),scale:1,opacity:0}),dt.set(".camera_main_image",{left:r(10),top:e(35),scale:1,opacity:0}),dt.set(".bar_main_image",{left:r(10),top:e(47.3),scale:1,rotation:0,opacity:0}),dt.set(".micro_main_image",{left:r(10),top:e(35),scale:1,rotation:0,opacity:0}),dt.set(".smartview_main_image",{left:r(10),top:e(35),scale:1,rotation:0,opacity:0}),dt.set(".medium_space_group_image",{opacity:1}),dt.set(".top_panel",{background:"#F5691C"}),dt.to(".room",{autoAlpha:1,duration:1}),dt.to(".medium_space_group_image",{opacity:0,delay:2,duration:1}),dt.to(".smartview_sequence",{opacity:1,duration:1}),dt.to(".top_panel_left ",{height:e(60),delay:2,duration:1}),dt.to(".controller_hub_left ",{opacity:1,duration:.5}),dt.to(".top_panel_right ",{height:e(60),duration:1},"<"),dt.to(".controller_hub_right ",{opacity:1,duration:.5}),dt.to(".controller_hub_right ",{opacity:0,delay:8,duration:.5}),dt.to(".top_panel_right ",{height:e(0),duration:1}),dt.to(".controller_hub_left ",{opacity:0,duration:.5},"<"),dt.to(".top_panel_left ",{height:e(0),duration:1}),dt.to(".smartview_sequence",{opacity:0,duration:1}),dt.to(".smartview_main_image",{opacity:1,duration:1},"<"),dt.to(".smartview_main_image",{left:function(){return ot.getBoundingClientRect().left},top:function(){return L},scale:.15,duration:2}),dt.to(".device_medium1",{border:"1px solid #fff",duration:.3}),dt.to(".device_medium2",{border:"1px solid #f00",duration:.3},"<"),dt.to(".smartcore_sequence",{opacity:1,duration:1}),dt.to(".top_panel_left ",{height:e(60),delay:2,duration:1}),dt.to(".core_hub_left ",{opacity:1,duration:.5}),dt.to(".top_panel_right ",{height:e(60),duration:1},"<"),dt.to(".core_hub_right ",{opacity:1,duration:.5}),dt.to(".core_hub_right ",{opacity:0,delay:8,duration:.5}),dt.to(".top_panel_right ",{height:e(0),duration:1}),dt.to(".core_hub_left ",{opacity:0,duration:.5},"<"),dt.to(".top_panel_left ",{height:e(0),duration:1}),dt.to(".smartcore_sequence",{opacity:0,duration:1}),dt.to(".core_main_image",{opacity:1,duration:1},"<"),dt.to(".core_main_image",{left:function(){return at.getBoundingClientRect().left},top:function(){return Q},scale:.15,duration:2}),dt.to(".device_medium2",{border:"1px solid #fff",duration:.3}),dt.to(".device_medium3",{border:"1px solid #f00",duration:.3},"<"),dt.to(".cam_sequence ",{opacity:1,duration:1}),dt.to(".top_panel_left ",{height:e(60),delay:2,duration:1}),dt.to(".cam_hub_left ",{opacity:1,duration:.5}),dt.to(".top_panel_right ",{height:e(60),duration:1},"<"),dt.to(".cam_hub_right ",{opacity:1,duration:.5}),dt.to(".cam_hub_right ",{opacity:0,delay:8,duration:.5}),dt.to(".top_panel_right ",{height:e(0),duration:1}),dt.to(".cam_hub_left ",{opacity:0,duration:.5},"<"),dt.to(".top_panel_left ",{height:e(0),duration:1}),dt.to(".cam_sequence ",{opacity:0,delay:2,duration:1}),dt.to(".camera_main_image ",{opacity:1,duration:1},"<"),dt.to(".camera_main_image",{left:function(){return st.getBoundingClientRect().left},top:function(){return F},scale:.15,duration:2}),dt.to(".device_medium3",{border:"1px solid #fff",duration:.3}),dt.to(".device_medium4",{border:"1px solid #f00",duration:.3},"<"),dt.to(".bar_sequence ",{opacity:1,duration:1}),dt.to(".top_panel_left ",{height:e(60),delay:2,duration:1}),dt.to(".bar_hub_left ",{opacity:1,duration:.5}),dt.to(".top_panel_right ",{height:e(60),duration:1},"<"),dt.to(".bar_hub_right ",{opacity:1,duration:.5}),dt.to(".bar_hub_right ",{opacity:0,delay:8,duration:.5}),dt.to(".top_panel_right ",{height:e(0),duration:1}),dt.to(".bar_hub_left ",{opacity:0,duration:.5},"<"),dt.to(".top_panel_left ",{height:e(0),duration:1}),dt.to(".bar_sequence ",{opacity:0,delay:2,duration:1}),dt.to(".bar_main_image ",{opacity:1,duration:1},"<"),dt.to(".bar_main_image",{left:function(){return lt.getBoundingClientRect().left},top:function(){return N},rotation:12,scale:.3,duration:2}),dt.to(".device_medium4",{border:"1px solid #fff",duration:.3}),dt.to(".device_medium5",{border:"1px solid #f00",duration:.3},"<"),dt.to(".micro_sequence ",{opacity:1,duration:1}),dt.to(".top_panel_left ",{height:e(60),delay:2,duration:1}),dt.to(".micro_hub_left ",{opacity:1,duration:.5}),dt.to(".top_panel_right ",{height:e(60),duration:1},"<"),dt.to(".micro_hub_right ",{opacity:1,duration:.5}),dt.to(".micro_hub_right ",{opacity:0,delay:8,duration:.5}),dt.to(".top_panel_right ",{height:e(0),duration:1}),dt.to(".micro_hub_left ",{opacity:0,duration:.5},"<"),dt.to(".top_panel_left ",{height:e(0),duration:1}),dt.to(".micro_sequence ",{opacity:0,delay:2,duration:1}),dt.to(".micro_main_image ",{opacity:1,duration:1},"<"),dt.to(".micro_main_image",{left:function(){return ct.getBoundingClientRect().left},top:function(){return H},scale:.1,duration:2}),dt.to(".room",{autoAlpha:0,delay:2,duration:1}),dt.set(".many_spaces",{autoAlpha:1}),dt.set(".large_item",{color:"#000",fontWeight:"400"}),dt.set(".many_item",{color:"#f00",fontWeight:"bold"}),dt.set(".text_large_section",{opacity:0}),dt.set(".text_many_section",{opacity:1}),dt.set(".sub_menu_top_wrap",{opacity:0}),dt.set(".large_room_image",{opacity:0}),dt.set(".core_main_image",{opacity:0}),dt.set(".camera_main_image",{opacity:0}),dt.set(".bar_main_image",{opacity:0}),dt.set(".micro_main_image",{opacity:0}),dt.set(".smartview_main_image",{opacity:0}),dt.set(".medium_space_group_image",{opacity:0}),dt.set(".many_space_group_image",{opacity:1}),dt.set(".top_panel",{top:"50px",background:"#63C2DF"}),dt.set("header",{background:"#fff"}),dt.to(".room",{autoAlpha:1,duration:1}),dt.to(".top_panel_left ",{height:e(70),delay:2,duration:1}),dt.to(".many_hub_left ",{opacity:1,duration:.5}),dt.to(".top_panel_right ",{height:e(70),duration:1}),dt.to(".many_hub_right ",{opacity:1,duration:.5}),dt.to(".many_hub_right ",{opacity:0,delay:2,duration:.5}),dt.to(".top_panel_right ",{height:e(0),duration:1}),dt.to(".many_hub_left ",{opacity:0,duration:.5}),dt.to(".top_panel_left ",{height:e(0),duration:1}),dt.to("header ",{background:"transparent",duration:.1}),dt.fromTo(".theStory_link",{color:"#000"},{color:"#fff",duration:.5}),dt.fromTo(".configuration_link",{color:"#d80018"},{color:"#fff",duration:.5},"<"),dt.fromTo(".try_link",{color:"#000"},{color:"#d80018",duration:.5},"<"),dt.fromTo(".top_menu_wrap",{borderBottom:"1px solid #222"},{borderBottom:"1px solid #fff",duration:.5},"<"),dt.to(".hero_black_bg ",{left:"0vw",duration:5}),dt.to(".sub_menu_bot",{autoAlpha:0,zIndex:0,duration:.5},"<"),dt.to(".hero_black_bg ",{borderRadius:0,duration:1});var ht=Bn.utils.toArray(".hero_black .icon img"),ft=Bn.utils.toArray(".hero_black .text_wrap");function At(t,e,r,n,i){var o=document.getElementById(t),a=o.getContext("2d"),s={frame:0};o.width=window.innerHeight/3,o.height=window.innerHeight/3,a.drawImage(e[0],0,0,o.width,o.height),Bn.timeline({onUpdate:function(){a.clearRect(0,0,o.width,o.height),a.drawImage(e[s.frame],0,0,o.width,o.height)},scrollTrigger:{trigger:r,start:n,containerAnimation:_,fastScrollEnd:!0,scrub:.5,end:i}}).to(s,{frame:71,snap:"frame",ease:"none",duration:1})}dt.to(ht,{filter:"drop-shadow(0px 0px 15px #fff)",duration:3,stagger:3}),dt.to(ft,{scale:1,opacity:1,duration:3,stagger:3},"<+=1"),n?(At("hub_360",is,".trg_start_hub_360","left right","+=50%"),At("camera_360",os,".trg_start_camera_360","left 90%","+=50%"),At("hub_360",is,".trg_start_hub_360_small","left right","+=50%"),At("camera_360",os,".trg_start_camera_360_small","left right","+=50%"),At("bar_360",as,".trg_start_bar_360_small","center center","+=50%"),At("smartview_360",ss,".trg_start_smartview_360_medium","right right","+=50%"),At("smartcore_360",ls,".trg_start_smartcore_360_medium","center 75%","+=50%"),At("camera_360",os,".trg_start_camera_360_medium","center center","+=50%"),At("bar_360",as,".trg_start_bar_360_medium","left 15%","+=50%"),At("micro_360",cs,".trg_start_micro_360_medium","center right","+=50%"),At("smartview_360",ss,".trg_start_smartview_360_large","right 15%","+=50%"),At("smartcore_360",ls,".trg_start_smartcore_360_large","center left","+=50%"),At("camera_360",os,".trg_start_camera_360_large","center left","+=50%"),At("bar_360",as,".trg_start_bar_360_large","left 60%","+=50%"),At("micro_360",cs,".trg_start_micro_360_large","center 25%","+=50%")):(At("hub_360",is,".trg_start_hub_360","left right","+=50%"),At("camera_360",os,".trg_start_camera_360","left 90%","+=50%"),At("hub_360",is,".trg_start_hub_360_small_s","left center","+=50%"),At("camera_360",os,".trg_start_camera_360_small_s","left 30%","+=50%"),At("bar_360",as,".trg_start_bar_360_small_s","center 20%","+=50%"),At("smartview_360",ss,".trg_start_smartview_360_medium_s","right 80%","+=50%"),At("smartcore_360",ls,".trg_start_smartcore_360_medium_s","center 70%","+=50%"),At("camera_360",os,".trg_start_camera_360_medium_s","center 60%","+=50%"),At("bar_360",as,".trg_start_bar_360_medium_s","left center","+=50%"),At("micro_360",cs,".trg_start_micro_360_medium_s","center 40%","+=50%"),At("smartview_360",ss,".trg_start_smartview_360_large_s","right 85%","+=50%"),At("smartcore_360",ls,".trg_start_smartcore_360_large_s","center 75%","+=50%"),At("camera_360",os,".trg_start_camera_360_large_s","center 75%","+=50%"),At("bar_360",as,".trg_start_bar_360_large_s","left center","+=50%"),At("micro_360",cs,".trg_start_micro_360_large_s","center 40%","+=50%"));var _t=document.querySelector(".sub_menu_top_from_medium .title").getBoundingClientRect().width;document.querySelector(".sub_menu_top_from_medium .device_wrap").style.left="".concat(_t+"px")}()}),1e3)}for(var c=0;c<o;c++){var u=new Image;u.onload=s,u.onerror=s,u.src=n[c].src}for(var p=0;p<72;p++){var d=new Image;d.onload=s,d.src=ns(p,"360_hub_animation"),is.push(d)}for(var h=0;h<72;h++){var f=new Image;f.onload=s,f.src=ns(h,"360_camera_animation"),os.push(f)}for(var A=0;A<72;A++){var _=new Image;_.onload=s,_.src=ns(A,"360_bar_animation"),as.push(_)}for(var m=0;m<72;m++){var g=new Image;g.onload=s,g.src=ns(m,"360_smartview_controller_animation"),ss.push(g)}for(var C=0;C<72;C++){var v=new Image;v.onload=s,v.src=ns(C,"360_smartcore_animation"),ls.push(v)}for(var y=0;y<72;y++){var b=new Image;b.onload=s,b.src=ns(y,"360_microphone_animation"),cs.push(b)}}),!1)},168:(t,e,r)=>{r.r(e),r.d(e,{default:()=>s});var n=r(537),i=r.n(n),o=r(645),a=r.n(o)()(i());a.push([t.id,"*{box-sizing:border-box}html,body{margin:0;overflow-x:hidden}body{font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;line-height:inherit;width:100%;font-size:17px;color:#222222}#progress{height:1px;background:#fff;position:absolute;width:0;top:50%;transition:1s}#progstat{font-size:0.7em;letter-spacing:3px;position:absolute;top:50%;margin-top:-40px;width:100%;text-align:center;color:#fff}html.stop_scroll{overflow:hidden !important}.intro_section{display:flex;padding:10px;min-height:9400vh;position:relative}.container{position:absolute;top:1700vh;left:0;width:7000vw;height:100%;display:flex;flex-wrap:nowrap;will-change:transform}.pointHub_huddle{width:1px;height:1px;position:absolute;top:32.5%;left:49%}.pointCamera_huddle{width:1px;height:1px;position:absolute;top:8%;left:47%}.pointHub_small{width:1px;height:1px;position:absolute;top:47%;left:44%}.pointCamera_small{width:1px;height:1px;position:absolute;top:23%;left:42%}.pointBar_small{width:1px;height:1px;position:absolute;top:45%;left:36.8%}.pointView_medium{width:1px;height:1px;position:absolute;top:46%;left:44%}.pointCore_medium{width:1px;height:1px;position:absolute;top:42%;left:33%}.pointCamera_medium{width:1px;height:1px;position:absolute;top:15%;left:26.5%}.pointBar_medium{width:1px;height:1px;position:absolute;top:37%;left:23.5%}.pointMicro_medium{width:1px;height:1px;position:absolute;top:50%;left:48%}.pointView_large{width:1px;height:1px;position:absolute;top:50%;left:43%}.pointCore_large{width:1px;height:1px;position:absolute;top:46%;left:58%}.pointCamera_large{width:1px;height:1px;position:absolute;top:20.5%;left:59%}.pointBar_large{width:1px;height:1px;position:absolute;top:42%;left:57%}.pointMicro_large{width:1px;height:1px;position:absolute;top:55%;left:60%}img{width:100%;height:auto;object-fit:cover}.mouse_scroll{display:block;margin:0 auto;width:24px;height:100px;position:fixed;top:90vh;left:50vw;transform:translate(-50%, -50%)}.m_scroll_arrows{display:block;width:5px;height:5px;-ms-transform:rotate(45deg);-webkit-transform:rotate(45deg);transform:rotate(45deg);border-right:2px solid white;border-bottom:2px solid white;margin:0 0 3px 4px;width:16px;height:16px}.unu{margin-top:1px}.unu,.doi,.trei{-webkit-animation:mouse-scroll 1s infinite;-moz-animation:mouse-scroll 1s infinite;animation:mouse-scroll 1s infinite}.unu{-webkit-animation-delay:.1s;-moz-animation-delay:.1s;-webkit-animation-direction:alternate;animation-direction:alternate;animation-delay:alternate}.doi{-webkit-animation-delay:.2s;-moz-animation-delay:.2s;-webkit-animation-direction:alternate;animation-delay:.2s;animation-direction:alternate;margin-top:-6px}.trei{-webkit-animation-delay:.3s;-moz-animation-delay:.3s;-webkit-animation-direction:alternate;animation-delay:.3s;animation-direction:alternate;margin-top:-6px}.mouse{height:42px;width:24px;border-radius:14px;transform:none;border:2px solid white;top:170px}.wheel{height:5px;width:2px;display:block;margin:5px auto;background:white;position:relative;height:4px;width:4px;border:2px solid #fff;-webkit-border-radius:8px;border-radius:8px}.wheel{-webkit-animation:mouse-wheel 0.6s linear infinite;-moz-animation:mouse-wheel 0.6s linear infinite;animation:mouse-wheel 0.6s linear infinite}@-webkit-keyframes mouse-wheel{0%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(6px);-ms-transform:translateY(6px);transform:translateY(6px)}}@-moz-keyframes mouse-wheel{0%{top:1px}25%{top:2px}50%{top:3px}75%{top:2px}100%{top:1px}}@-o-keyframes mouse-wheel{0%{top:1px}25%{top:2px}50%{top:3px}75%{top:2px}100%{top:1px}}@keyframes mouse-wheel{0%{top:1px}25%{top:2px}50%{top:3px}75%{top:2px}100%{top:1px}}@-webkit-keyframes mouse-scroll{0%{opacity:0}50%{opacity:.5}100%{opacity:1}}@-moz-keyframes mouse-scroll{0%{opacity:0}50%{opacity:.5}100%{opacity:1}}@-o-keyframes mouse-scroll{0%{opacity:0}50%{opacity:.5}100%{opacity:1}}@keyframes mouse-scroll{0%{opacity:0}50%{opacity:.5}100%{opacity:1}}header{width:100%;position:fixed;top:0%;left:50%;transform:translate(-50%, 0%);display:flex;min-height:50px;color:#222222}.top_menu_wrap{display:flex;flex-wrap:nowrap;justify-content:space-between;width:100%;max-width:90vw;border-bottom:1px solid #222;margin:0 auto;height:50px}.col-left{display:flex;flex-wrap:nowrap;width:50%;align-items:center}.col-right{display:flex;flex-wrap:nowrap;width:45%;justify-content:space-between;align-items:center}.link{cursor:pointer}.top_panel div{padding:3vw;font-size:1.5vw;color:#fff;line-height:4.5vh}.top_panel ul{padding:0;margin:0}.small_space_group_image,.medium_space_group_image{opacity:0;position:absolute;top:0}.small_space{visibility:hidden;opacity:0}.text_hub_left,.text_hub_right,.cam_hub_left,.cam_hub_right,.bar_hub_left,.bar_hub_right,.controller_hub_right,.controller_hub_left,.core_hub_right,.core_hub_left,.micro_hub_right,.micro_hub_left,.many_hub_right,.many_hub_left{opacity:0;position:absolute;top:0}.logo_Lenovo_top{max-width:67px;margin-right:100px;cursor:pointer}.logo_Microsoft_top{max-width:100px}.fake_header .link{cursor:pointer}.fake_header .configuration_link,.fake_header .theStory_link,.fake_header .try_link{color:white !important}.fake_header .top_menu_wrap{border-bottom:1px solid #fff !important}.start{width:100vw}.red_clip{width:100%;height:100vh;background:#d80018;clip-path:inset(0px 0px 0px 0px);position:absolute;top:0;left:0;z-index:9;transform:translate(0, 0) !important}.fake_header{width:100%;position:fixed;top:0%;left:50%;transform:translate(-50%, 0%);display:flex;z-index:99;min-height:56px;color:white}.fake_header .top_menu_wrap{border-bottom:1px solid #fff}.re_title_wrap{position:absolute;top:0;left:0;width:100%;height:100vh;display:flex;align-items:center;justify-content:center}.re_title{font-size:4.5vw;color:#5c5c5c;position:fixed}.re_title span{border:7px solid #d80018;padding:0.2vw 0.9vw;color:#d80018}.fake_re_title_wrap{position:absolute;top:0;left:0;width:100%;height:100vh;display:flex;align-items:center;justify-content:center}.fake_re_title{font-size:4.5vw;color:white}.fake_re_title span{border:7px solid #d80018;padding:0.2vw 0.9vw;color:#d80018}.bg_video{overflow:hidden;position:fixed;top:0;left:0;bottom:0;right:0;width:100%;height:100vh;object-fit:cover;opacity:0;will-change:opacity}.bg_video video{width:100%;height:100%;object-fit:cover}.smooth_fix{width:100%;height:100vh;top:0;left:0;position:absolute}.y1920_wrap{position:absolute;width:85%;height:auto;top:50%;left:37%;transform:translate(-50%, -180%) scale(4.9);transform-origin:bottom left;will-change:transform}.y1920_wrap .num1{opacity:0}.y1920_text{position:absolute;top:20%;left:50%;transform:translate(-50%, 0%);will-change:transform;font-size:8vh;font-weight:bold;color:white;text-align:center}.y1920_text div{will-change:transform}.y1920_line{opacity:0;visibility:hidden;transform:scale(1.5);will-change:transform}.y1920_line:nth-child(5),.y1920_line:nth-child(6){color:#d80018}.bg_main_image{width:100%;height:100vh;position:fixed;top:0;left:0;opacity:0;will-change:opacity}.bg_main_image .tr_img{position:absolute;left:0;width:100%;height:100%;display:flex;object-fit:cover;will-change:transform}.img1920{top:0vh}.img1950,.img1980,.img2010{top:-100vh}.lady{top:0vh;opacity:0}.left_column{width:25%;height:100vh;position:fixed;top:0;left:-25%;overflow:hidden;will-change:transform}.scroll_bg{position:absolute;width:100%;height:100%;top:0;left:0}.scroll_bg_1920{background:#6ec93f;will-change:transform}.scroll_bg_1950{background:#3299cc;will-change:transform}.scroll_bg_1980{background:#eb610a;will-change:transform}.scroll_bg_2010{background:#f8bc00;will-change:transform}.scroll_image{width:3500px;height:auto;position:absolute;bottom:0vh;left:445px;will-change:transform}.scroll_text{position:absolute;width:100%;top:25vh;max-width:75%;left:50%;transform:translate(-50%, 0%);color:white;font-size:2.6vh;line-height:4.4vh;will-change:transform}.txt{position:absolute;left:50%;width:100%;transform:translate(-50%, 0%);will-change:transform}.txt div{visibility:hidden;opacity:0;transform:scale(2);will-change:transform}.num5,.num1_in2010,.num8,.num2_in2010,.num0{opacity:0}.mt50{margin-top:50px}.last_device{position:absolute;bottom:44px;width:85%;left:50%;transform:translate(-50%, 0%) scale(0.8);opacity:0}.text_lady{text-align:center;font-size:2.6vw;line-height:3.4vw}.top_btn{opacity:0;visibility:hidden;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.hub_huddle_btn,.camera_huddle_btn,.view_medium_btn,.core_medium_btn,.camera_medium_btn,.bar_medium_btn,.micro_medium_btn{opacity:1;visibility:inherit}.black_cube{background:#000;width:100vh;height:100vh;border-radius:2vw;color:white;font-size:4.5vh;display:flex;justify-content:center;align-items:center}.black_cube .text{max-width:60%}.black_cube .title{font-size:4.5vw;margin:40px 0 150px 0}.panel{will-change:transform;min-height:100vh;min-width:100vw;position:relative}.sub_menu_bot{display:flex;position:fixed;width:100vw;bottom:0;left:0}.sub_menu_bot_wrap{display:flex;max-width:80%;flex-wrap:nowrap;align-items:center;margin:0 auto;justify-content:space-between;min-height:90px;font-size:1.5vw;white-space:nowrap;width:100%}.sub_menu_bot_wrap .divider{width:2px;height:45px;display:flex;background:#222222}.sub_menu_bot_wrap .bot_menu_item{cursor:pointer;display:flex}.orange{background:#ffb100;border-radius:2vw;min-width:125vw}.orange .text_anim{font-size:4vw;line-height:7vw;color:#000;top:10vh;left:110vh;position:absolute}.orange .text_anim span{font-weight:bold}.orange .text_anim div{opacity:0;transform:translate(20%, 0)}.text_section{font-size:2vw;position:fixed;top:8vw;left:5vw;width:100%}.text_section span{font-weight:bold}.text_huddle{color:#6ec93f;position:absolute;top:0}.text_small_section{position:absolute;color:#0e58c7;top:0;opacity:0}.text_medium_section{position:absolute;color:#E36DB1;top:0;opacity:0}.text_large_section{position:absolute;color:#F5691C;top:0;opacity:0}.text_many_section{position:absolute;color:#63C2DF;top:-100px;opacity:0}.sub_menu_top_wrap{position:fixed;width:100vw;top:50px;left:-7px;align-items:center;z-index:99;visibility:hidden;opacity:0;background:white}.sub_menu_top_wrap .sub_menu_top{display:flex;align-items:center;width:90vw;position:relative;height:50px;margin:0 auto;border-bottom:1px solid #000}.sub_menu_top_wrap .sub_menu_top .device{width:60px;height:4.4vh;cursor:pointer;border:1px solid #fff;border-radius:3px;padding:0vh 1vh;cursor:pointer}.sub_menu_top_wrap .sub_menu_top .device img{width:auto;height:4vh;object-fit:contain}.sub_menu_top_wrap .title{font-size:3.5vh;color:#ff0000;display:flex;white-space:nowrap;width:max-content}.device_wrap{display:flex;flex-wrap:nowrap}.device{margin-left:3vw;position:relative}.device_image_section{position:fixed;top:20vw;left:5vw;width:35vw}.device_image_section .title{text-align:center;font-size:2vw;margin-top:33vh}.room_image_wrap{position:fixed;top:145px;left:0;width:100vw;height:calc(100vh - 120px);overflow:hidden}.room_image_rel{position:relative}.sub_menu_top_from_medium{visibility:hidden;opacity:0;position:absolute;top:0;border-bottom:1px solid #222;max-width:90vw;left:50%;transform:translate(-50%, 0%);width:100%;height:5vh}.sub_menu_top_from_medium .device_wrap{position:absolute;top:0;left:25vw;max-width:75vw;width:100%;overflow:hidden;background:#fff}.sub_menu_top_from_medium .device_medium{width:60px;height:52px;margin-left:3vw;border:1px solid #fff;cursor:pointer;position:relative}.sub_menu_top_from_medium .device_medium4{width:250px}.sub_menu_top_from_medium img{width:100%;height:auto;object-fit:cover}.room_image{position:absolute;top:50px;right:5vw;width:55vw}.small_room_image{right:-1vw;width:75vw;top:-90px}.image_sequence,.seq{position:fixed;top:35vh;left:4vw;width:29vw}.main_image{position:fixed;top:35vh;left:10vw;width:20vw}.hub_main_image,.camera_main_image,.bar_main_image,.core_main_image,.micro_main_image,.smartview_main_image,.smartcore_main_image{position:fixed;top:35vh;left:10vw;width:20vw;opacity:0;transform-origin:0% 0%;will-change:transform}.micro_main_image{top:40vh;left:6vw;width:20vw}.core_main_image{top:38vh;left:5vw;width:27vw}.smartview_main_image{top:43vh;left:12vw;width:14vw}.camera_main_image{top:34vh;left:8vw}.bar_main_image{top:47.3vh;left:9vw}.hub_sequence,.cam_sequence,.bar_sequence,.smartview_sequence,.smartcore_sequence,.micro_sequence{opacity:0}.group_image{position:fixed;top:36vh;left:8vw;width:29vw}.trg_start_config{position:absolute;right:0;top:50%;width:50px;height:50px}.trg_start_hub_360{position:absolute;right:0;top:50%;width:50px;height:50px}.trg_start_camera_360,.trg_start_hub_360_small,.trg_start_bar_360_small,.trg_start_hub_360_small_s,.trg_start_camera_360_small_s,.trg_start_bar_360_small_s,.green_box,.trg_start_smartview_360_medium_s,.trg_start_smartcore_360_medium_s,.trg_start_camera_360_medium_s,.trg_start_bar_360_medium_s,.trg_start_micro_360_medium_s,.trg_start_smartview_360_large_s,.trg_start_smartcore_360_large_s,.trg_start_camera_360_large_s,.trg_start_bar_360_large_s,.trg_start_micro_360_large_s{position:absolute;right:0;top:50%;width:50px;height:50px}.top_panel{width:30vw;top:100px;position:fixed;background:#6ec93f;transform:translate(-50%, 0%);transform-origin:0% 100%;height:0vh;z-index:8;will-change:transform}.top_panel_left{left:50vw}.top_panel_right{left:81vw}canvas{object-fit:contain;position:absolute;top:0;left:50%;transform:translate(-50%, 0%)}.room,.sub_menu_bot{visibility:hidden;opacity:0}.device3{opacity:0;width:250px !important}.device3 img{width:100% !important;height:auto !important}.small_room_image{opacity:0}.medium_room_image{top:14px;right:1vw;width:63vw;opacity:0}.large_room_image{opacity:0}.many_spaces{opacity:0;visibility:hidden;position:fixed;top:0;left:0;width:100vw;height:100vh}.many_spaces_rel{width:100%;height:100%;position:relative}.many_space_group_image{opacity:0;width:90%;height:100%;display:flex;justify-content:center;align-items:center;margin:0 auto}.many_space_group_image img{width:100%;height:auto;object-fit:cover}.hero_black{position:fixed;top:0;left:0;right:0;bottom:0;width:100vw;height:100vh;z-index:999999}.hero_black_bg{position:absolute;top:0;left:100vw;width:100vw;height:100vh;border-radius:180px;background:#000;will-change:transform}.hero_black_rel{width:100%;height:calc(100% - 50px);margin-top:50px;position:relative;display:flex;flex-wrap:nowrap;color:#e1e1e1}.col-1{width:60%;padding:0 4vw 0 4vw;display:flex;margin-top:10vh;align-items:center;flex-direction:column}.col-2{width:35%;padding:0 4vw 0 4vw;display:flex;align-items:center;flex-direction:column;margin-top:10vh}.hero_black .sub_title{color:#63C2DF;font-size:1.5vw;font-weight:400;line-height:2vw;margin-top:6vh;max-width:80%}.hero_black .title{color:#ECD4B5;font-size:4vw;font-weight:600;line-height:4vw;white-space:nowrap}.hero_black .text_wrap{transform:scale(0.9);opacity:0;will-change:transform}.hero_black .text_wrap .title{color:#EFAA4E;font-size:1vw;line-height:1.2vw;font-weight:400}.hero_black .text_wrap .text{color:#e1e1e1;font-size:1vw;font-weight:400}.hero_black li{list-style:none;display:flex;flex-wrap:nowrap;margin:7vh 0}.title_Kyle{color:#63C2DF;font-size:1.5vw;font-weight:400;line-height:2vw;max-width:80%}.icon{border-radius:50%;width:50px;min-width:50px;height:50px;min-height:50px;margin:0 50px}.photo_block_wrap{background:white;display:flex;width:100%;flex-wrap:nowrap;justify-content:center}.calendly-inline-widget{position:relative;min-width:37.45vw !important;height:100vh !important;transform:scale(0.6) !important;width:100% !important;transform-origin:0 0}.photo_block{display:flex;width:22.6vw;flex-wrap:nowrap;justify-content:center;margin:20px 0;position:relative;flex-direction:column}.photo_block .photo{max-width:33%}.photo_block .photo img{transform:scale(1.3) translate(20px, 17px)}.photo_block .text_block{display:flex;flex-direction:column;font-size:1.5vw;color:#222222;font-weight:400;align-items:center;justify-content:center}.photo_block .linkedin a{text-decoration:none}.photo_block .linkedin{display:flex;justify-content:center;align-items:center;text-align:center}.photo_block .linkedin img{max-width:75%}.len_logo{position:absolute;bottom:0;right:0;transform:rotate(-90deg) translate(60%, 64%);max-width:150px}.calendar_block{margin-top:20px;background:white}.title_lin{color:#000;font-weight:700;margin-right:50px;font-size:1.3vw}\n","",{version:3,sources:["webpack://./src/scss/main.scss"],names:[],mappings:"AAAA,EACE,qBAAsB,CACvB,UAIC,QAAS,CACT,iBAAkB,CACnB,KAGC,gMAAiM,CACjM,mBAAoB,CACpB,UAAW,CACX,cAAe,CACf,aAAc,CACf,UAKC,UAAU,CACV,eAAe,CACf,iBAAiB,CACjB,OAAO,CACP,OAAO,CACP,aAAc,CACf,UAEC,eAAe,CACf,kBAAmB,CACnB,iBAAiB,CACjB,OAAO,CACP,gBAAgB,CAChB,UAAU,CACV,iBAAiB,CACjB,UAAU,CACX,iBAEC,0BAA2B,CAC5B,eAEC,YAAa,CACb,YAAa,CACb,iBAAkB,CAClB,iBAAkB,CACnB,WAEC,iBAAkB,CAClB,UAAW,CACX,MAAO,CACP,YAAa,CACb,WAAY,CACZ,YAAa,CACb,gBAAiB,CACjB,qBAAsB,CACvB,iBAEC,SAAU,CACV,UAAW,CACX,iBAAkB,CAClB,SAAU,CACV,QAAS,CACV,oBAEC,SAAU,CACV,UAAW,CACX,iBAAkB,CAClB,MAAO,CACP,QAAS,CACV,gBAGC,SAAU,CACV,UAAW,CACX,iBAAkB,CAClB,OAAQ,CACR,QAAS,CACV,mBAEC,SAAU,CACV,UAAW,CACX,iBAAkB,CAClB,OAAQ,CACR,QAAS,CACV,gBAEC,SAAU,CACV,UAAW,CACX,iBAAkB,CAClB,OAAQ,CACR,UAAW,CACZ,kBAGC,SAAU,CACV,UAAW,CACX,iBAAkB,CAClB,OAAQ,CACR,QAAS,CACV,kBAEC,SAAU,CACV,UAAW,CACX,iBAAkB,CAClB,OAAQ,CACR,QAAS,CACV,oBAEC,SAAU,CACV,UAAW,CACX,iBAAkB,CAClB,OAAQ,CACR,UAAW,CACZ,iBAEC,SAAU,CACV,UAAW,CACX,iBAAkB,CAClB,OAAQ,CACR,UAAW,CACZ,mBAEC,SAAU,CACV,UAAW,CACX,iBAAkB,CAClB,OAAQ,CACR,QAAS,CACV,iBAGC,SAAU,CACV,UAAW,CACX,iBAAkB,CAClB,OAAQ,CACR,QAAS,CACV,iBAEC,SAAU,CACV,UAAW,CACX,iBAAkB,CAClB,OAAQ,CACR,QAAS,CACV,mBAEC,SAAU,CACV,UAAW,CACX,iBAAkB,CAClB,SAAU,CACV,QAAS,CACV,gBAEC,SAAU,CACV,UAAW,CACX,iBAAkB,CAClB,OAAQ,CACR,QAAS,CACV,kBAEC,SAAU,CACV,UAAW,CACX,iBAAkB,CAClB,OAAQ,CACR,QAAS,CACV,IAGC,UAAW,CACX,WAAY,CACZ,gBAAiB,CAClB,cAIC,aAAc,CACd,aAAc,CACd,UAAW,CACX,YAAa,CACb,cAAe,CACf,QAAS,CACT,SAAU,CACV,+BAAgC,CACjC,iBAKC,aAAc,CACd,SAAU,CACV,UAAW,CACX,2BAA4B,CAC5B,+BAAgC,CAChC,uBAAwB,CAExB,4BAA6B,CAC7B,6BAA8B,CAC9B,kBAAmB,CAEnB,UAAW,CACX,WAAY,CACb,KAKC,cAAe,CAChB,gBAIC,0CAA2C,CAC3C,uCAAwC,CACxC,kCAAmC,CAEpC,KAIC,2BAA4B,CAC5B,wBAAyB,CACzB,qCAAsC,CAEtC,6BAA8B,CAC9B,yBAA0B,CAC3B,KAIC,2BAA4B,CAC5B,wBAAyB,CACzB,qCAAsC,CAEtC,mBAAoB,CACpB,6BAA8B,CAE9B,eAAgB,CACjB,MAIC,2BAA4B,CAC5B,wBAAyB,CACzB,qCAAsC,CAEtC,mBAAoB,CACpB,6BAA8B,CAG9B,eAAgB,CACjB,OAGC,WAAY,CACZ,UAAW,CACX,kBAAmB,CACnB,cAAe,CACf,sBAAuB,CACvB,SAAU,CACX,OAGC,UAAW,CACX,SAAU,CACV,aAAc,CACd,eAAgB,CAChB,gBAAiB,CACjB,iBAAkB,CAElB,UAAW,CACX,SAAU,CACV,qBAAsB,CACtB,yBAA0B,CAC1B,iBAAkB,CACnB,OAGC,kDAAmD,CACnD,+CAAgD,CAChD,0CAA2C,CAC5C,+BAGC,GACE,SAAU,CACV,+BAAgC,CAChC,2BAA4B,CAC5B,uBAAwB,CAG1B,KACE,SAAU,CACV,iCAAkC,CAClC,6BAA8B,CAC9B,yBAA0B,CAAA,CAG9B,4BACE,GAAK,OAAQ,CACb,IAAM,OAAQ,CACd,IAAM,OAAQ,CACd,IAAM,OAAQ,CACd,KAAO,OAAQ,CAAA,CAEjB,0BAEE,GAAK,OAAQ,CACb,IAAM,OAAQ,CACd,IAAM,OAAQ,CACd,IAAM,OAAQ,CACd,KAAO,OAAQ,CAAA,CAEjB,uBAEE,GAAK,OAAQ,CACb,IAAM,OAAQ,CACd,IAAM,OAAQ,CACd,IAAM,OAAQ,CACd,KAAO,OAAQ,CAAA,CAGjB,gCAEE,GAAO,SAAU,CACjB,IAAO,UAAW,CAClB,KAAO,SAAU,CAAA,CAEnB,6BAEE,GAAO,SAAU,CACjB,IAAO,UAAW,CAClB,KAAO,SAAU,CAAA,CAEnB,2BAEE,GAAO,SAAU,CACjB,IAAO,UAAW,CAClB,KAAO,SAAU,CAAA,CAEnB,wBAEE,GAAO,SAAU,CACjB,IAAO,UAAW,CAClB,KAAO,SAAU,CAAA,CAMnB,OACE,UAAW,CACX,cAAe,CACf,MAAO,CACP,QAAS,CACT,6BAA6B,CAC7B,YAAa,CACb,eAAgB,CAChB,aAAc,CACf,eAGC,YAAa,CACb,gBAAiB,CACjB,6BAA8B,CAC9B,UAAW,CACX,cAAe,CACf,4BAA6B,CAC7B,aAAc,CACd,WAAY,CAEb,UAEC,YAAa,CACb,gBAAiB,CACjB,SAAU,CACV,kBAAmB,CACpB,WAEC,YAAa,CACb,gBAAiB,CACjB,SAAU,CACV,6BAA8B,CAC9B,kBAAmB,CACpB,MAEC,cAAe,CAChB,eAEC,WAAY,CACZ,eAAgB,CAChB,UAAW,CACX,iBAAkB,CACnB,cAEC,SAAU,CACV,QAAS,CACV,mDAGC,SAAU,CACV,iBAAkB,CAClB,KAAM,CACP,aAEC,iBAAkB,CAClB,SAAU,CACX,mOAQC,SAAU,CACV,iBAAkB,CAClB,KAAM,CACP,iBAEC,cAAe,CACf,kBAAmB,CACnB,cAAe,CAChB,oBAEC,eAAgB,CACjB,mBAGC,cAAe,CAChB,oFAEC,sBAAuB,CACxB,4BAEC,uCAAwC,CACzC,OAIC,WAAY,CACb,UAEC,UAAW,CACX,YAAa,CACb,kBAAmB,CACnB,gCAAiC,CACjC,iBAAkB,CAClB,KAAM,CACN,MAAO,CACP,SAAU,CACV,oCAAoC,CACrC,aAEC,UAAW,CACX,cAAe,CACf,MAAO,CACP,QAAS,CACT,6BAA6B,CAC7B,YAAa,CACb,UAAW,CACX,eAAgB,CAChB,WAAY,CACb,4BAEC,4BAA6B,CAC9B,eAEC,iBAAkB,CAClB,KAAM,CACN,MAAO,CACP,UAAW,CACX,YAAa,CACb,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CACxB,UAEC,eAAgB,CAChB,aAAc,CACd,cAAe,CAChB,eAEC,wBAAyB,CACzB,mBAAoB,CACpB,aAAc,CACf,oBAEC,iBAAkB,CAClB,KAAM,CACN,MAAO,CACP,UAAW,CACX,YAAa,CACb,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CACxB,eAEC,eAAgB,CAChB,WAAY,CACb,oBAEC,wBAAyB,CACzB,mBAAoB,CACpB,aAAc,CACf,UAEC,eAAgB,CAChB,cAAe,CACf,KAAM,CACN,MAAO,CACP,QAAS,CACT,OAAQ,CACR,UAAW,CACX,YAAa,CACb,gBAAiB,CACjB,SAAU,CACV,mBAAoB,CACrB,gBAEC,UAAW,CACX,WAAY,CACZ,gBAAiB,CAClB,YAEC,UAAW,CACX,YAAa,CACb,KAAM,CACN,MAAO,CACP,iBAAkB,CACnB,YAEC,iBAAkB,CAClB,SAAU,CACV,WAAY,CACZ,OAAQ,CACR,QAAS,CACT,2CAA4C,CAC5C,4BAA6B,CAC7B,qBAAsB,CACvB,kBAEC,SAAU,CACX,YAEC,iBAAkB,CAClB,OAAQ,CACR,QAAS,CACT,6BAA6B,CAC7B,qBAAsB,CACtB,aAAc,CACd,gBAAiB,CACjB,WAAY,CACZ,iBAAkB,CACnB,gBAEC,qBAAsB,CACvB,YAEC,SAAU,CACV,iBAAkB,CAClB,oBAAqB,CACrB,qBAAsB,CACvB,kDAEC,aAAe,CAChB,eAEC,UAAW,CACX,YAAa,CACb,cAAe,CACf,KAAM,CACN,MAAO,CACP,SAAU,CACV,mBAAoB,CACrB,uBAGC,iBAAkB,CAClB,MAAO,CACP,UAAW,CACX,WAAY,CACZ,YAAa,CACb,gBAAiB,CACjB,qBAAsB,CACvB,SAEC,OAAQ,CACT,2BAEC,UAAW,CACZ,MAEC,OAAQ,CACR,SAAU,CACX,aAEC,SAAU,CACV,YAAa,CACb,cAAe,CACf,KAAM,CACN,SAAU,CACV,eAAgB,CAChB,qBAAsB,CACvB,WAEC,iBAAkB,CAClB,UAAW,CACX,WAAY,CACZ,KAAM,CACN,MAAO,CACR,gBAEC,kBAAmB,CACnB,qBAAsB,CACvB,gBAEC,kBAAmB,CACnB,qBAAsB,CACvB,gBAEC,kBAAmB,CACnB,qBAAsB,CACvB,gBAEC,kBAAmB,CACnB,qBAAsB,CACvB,cAEC,YAAa,CACb,WAAY,CACZ,iBAAkB,CAClB,UAAW,CACX,UAAW,CACX,qBAAsB,CACvB,aAEC,iBAAkB,CAClB,UAAW,CACX,QAAS,CACT,aAAc,CACd,QAAS,CACT,6BAA8B,CAC9B,WAAY,CACZ,eAAgB,CAChB,iBAAkB,CAClB,qBAAsB,CACvB,KAEC,iBAAkB,CAClB,QAAS,CACT,UAAW,CACX,6BAA6B,CAC7B,qBAAsB,CACvB,SAEC,iBAAkB,CAClB,SAAU,CACV,kBAAmB,CACnB,qBAAsB,CACvB,4CAGC,SAAU,CACX,MAEC,eAAgB,CACjB,aAEC,iBAAkB,CAClB,WAAY,CACZ,SAAU,CACV,QAAS,CACT,wCAAyC,CACzC,SAAU,CACX,WAEC,iBAAkB,CAClB,eAAgB,CAChB,iBAAkB,CACnB,SAEC,SAAU,CACV,iBAAkB,CAClB,iBAAkB,CAClB,OAAQ,CACR,QAAS,CACT,+BAAgC,CACjC,0HAKC,SAAU,CACV,kBAAmB,CACpB,YAGC,eAAgB,CAChB,WAAY,CACZ,YAAa,CACb,iBAAkB,CAClB,WAAY,CACZ,eAAgB,CAChB,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CATrB,kBAYI,aAAc,CAZlB,mBAeK,eAAgB,CAChB,qBAAsB,CACxB,OAKD,qBAAsB,CACtB,gBAAiB,CACjB,eAAgB,CAChB,iBAAkB,CACnB,cAIC,YAAa,CACb,cAAe,CACf,WAAY,CACZ,QAAS,CACT,MAAO,CACR,mBAGC,YAAa,CACb,aAAc,CACd,gBAAiB,CACjB,kBAAmB,CACnB,aAAc,CACd,6BAA8B,CAC9B,eAAgB,CAChB,eAAgB,CAChB,kBAAmB,CACnB,UAAW,CAVb,4BAaI,SAAU,CACV,WAAY,CACZ,YAAa,CACb,kBAAmB,CAhBvB,kCAmBI,cAAe,CACf,YAAa,CACd,QAKD,kBAAmB,CACnB,iBAAkB,CAClB,eAAgB,CAHlB,mBAMI,aAAc,CACd,eAAgB,CAChB,UAAW,CACX,QAAS,CACT,UAAW,CACX,iBAAkB,CAXtB,wBAcM,gBAAiB,CAdvB,uBAiBM,SAAU,CACV,2BAA2B,CAC5B,cAKH,aAAc,CACd,cAAe,CACf,OAAQ,CACR,QAAS,CACT,UAAW,CALb,mBAQI,gBAAiB,CAClB,aAGD,aAAc,CACd,iBAAkB,CAClB,KAAM,CAEP,oBAEC,iBAAkB,CAClB,aAAc,CACd,KAAM,CACN,SAAU,CACX,qBAEC,iBAAkB,CAClB,aAAc,CACd,KAAM,CACN,SAAU,CACX,oBAEC,iBAAkB,CAClB,aAAc,CACd,KAAM,CACN,SAAU,CACX,mBAEC,iBAAkB,CAClB,aAAc,CACd,UAAW,CACX,SAAU,CACX,mBAGG,cAAe,CACf,WAAY,CACZ,QAAS,CACT,SAAU,CACV,kBAAmB,CACnB,UAAW,CACX,iBAAkB,CAClB,SAAU,CACV,gBAAiB,CATrB,iCAYM,YAAa,CACb,kBAAmB,CACnB,UAAW,CACX,iBAAkB,CAClB,WAAY,CACZ,aAAc,CACd,4BAA6B,CAlBnC,yCAuBQ,UAAW,CACX,YAAa,CACb,cAAe,CACf,qBAAsB,CACtB,iBAAkB,CAClB,eAAgB,CAChB,cAAe,CA7BvB,6CAiCU,UAAW,CACX,UAAW,CACX,kBAAmB,CAnC7B,0BAyCI,eAAgB,CAChB,aAAc,CACd,YAAa,CACb,kBAAmB,CACnB,iBAAkB,CACnB,aAGD,YAAa,CACb,gBAAiB,CAClB,QAEC,eAAgB,CAChB,iBAAkB,CACnB,sBAEC,cAAe,CACf,QAAS,CACT,QAAS,CACT,UAAW,CAJb,6BAOI,iBAAkB,CAClB,aAAc,CACd,eAAgB,CACjB,iBAGD,cAAe,CACf,SAAS,CACT,MAAO,CACP,WAAY,CACZ,0BAA2B,CAC3B,eAAgB,CACjB,gBAEC,iBAAkB,CACnB,0BAEC,iBAAkB,CAClB,SAAU,CACV,iBAAkB,CAClB,KAAM,CACN,4BAA6B,CAC7B,cAAe,CACf,QAAS,CACT,6BAA6B,CAC7B,UAAW,CACX,UAAW,CAVb,uCAaI,iBAAkB,CAClB,KAAM,CACN,SAAU,CACV,cAAe,CACf,UAAW,CACX,eAAgB,CAChB,eAAgB,CAnBpB,yCAuBI,UAAW,CACX,WAAY,CACZ,eAAgB,CAChB,qBAAsB,CACtB,cAAe,CACf,iBAAkB,CA5BtB,0CA+BI,WAAY,CA/BhB,8BAkCI,UAAW,CACX,WAAY,CACZ,gBAAiB,CAClB,YAID,iBAAkB,CAClB,QAAS,CACT,SAAU,CACV,UAAW,CACZ,kBAEC,UAAW,CACX,UAAW,CACX,SAAU,CACX,qBAKC,cAAe,CACf,QAAS,CACT,QAAS,CACT,UAAW,CACZ,YAEC,cAAe,CACf,QAAS,CACT,SAAU,CACV,UAAW,CACZ,kIAIC,cAAe,CACf,QAAS,CACT,SAAU,CACV,UAAW,CACX,SAAU,CACV,sBAAuB,CACvB,qBAAsB,CACvB,kBAEC,QAAS,CACT,QAAS,CACT,UAAW,CACZ,iBAEC,QAAS,CACT,QAAS,CACT,UAAW,CACZ,sBAEC,QAAS,CACT,SAAU,CACV,UAAW,CACZ,mBAEC,QAAS,CACT,QAAS,CACV,gBAEC,UAAW,CACX,QAAS,CACV,kGAGC,SAAU,CACX,aAGC,cAAe,CACf,QAAS,CACT,QAAS,CACT,UAAW,CACZ,kBAGC,iBAAkB,CAClB,OAAQ,CACR,OAAQ,CACR,UAAW,CACX,WAAY,CACb,mBAEC,iBAAkB,CAClB,OAAQ,CACR,OAAQ,CACR,UAAW,CACX,WAAY,CACb,4dAiBC,iBAAkB,CAClB,OAAQ,CACR,OAAQ,CACR,UAAW,CACX,WAAY,CACb,WAEC,UAAW,CACX,SAAU,CACV,cAAe,CACf,kBAAmB,CACnB,6BAA8B,CAC9B,wBAAyB,CACzB,UAAW,CACX,SAAU,CACV,qBAAsB,CACvB,gBAEC,SAAU,CACX,iBAEC,SAAU,CACX,OAEC,kBAAmB,CACnB,iBAAkB,CAClB,KAAM,CACN,QAAS,CACT,6BAA6B,CAC9B,oBAEC,iBAAkB,CAClB,SAAU,CACX,SAEC,SAAU,CACV,sBAAuB,CAFzB,aAKI,qBAAsB,CACtB,sBAAuB,CAExB,kBAGD,SAAU,CACX,mBAEC,QAAS,CACT,SAAU,CACV,UAAW,CACX,SAAU,CACX,kBAEC,SAAU,CACX,aAEC,SAAU,CACV,iBAAkB,CAClB,cAAe,CACf,KAAM,CACN,MAAO,CACP,WAAY,CACZ,YAAa,CACd,iBAEC,UAAW,CACX,WAAY,CACZ,iBAAkB,CACnB,wBAEC,SAAU,CACV,SAAU,CACV,WAAY,CACZ,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CACnB,aAAc,CACf,4BAEE,UAAW,CACX,WAAY,CACZ,gBAAiB,CACnB,YAEC,cAAe,CACf,KAAM,CACN,MAAO,CACP,OAAQ,CACR,QAAS,CACT,WAAY,CACZ,YAAa,CACb,cAAe,CAChB,eAEC,iBAAkB,CAClB,KAAM,CACN,UAAW,CACX,WAAY,CACZ,YAAa,CACb,mBAAoB,CACpB,eAAgB,CAChB,qBAAsB,CACvB,gBAEC,UAAW,CACX,wBAAyB,CACzB,eAAgB,CAChB,iBAAkB,CAClB,YAAa,CACb,gBAAiB,CACjB,aAAc,CACf,OAEC,SAAU,CACV,mBAAoB,CACpB,YAAa,CACb,eAAgB,CAChB,kBAAmB,CACnB,qBAAsB,CACvB,OAEC,SAAU,CACV,mBAAoB,CACpB,YAAa,CACb,kBAAmB,CACnB,qBAAsB,CACtB,eAAgB,CACjB,uBAIG,aAAc,CACd,eAAgB,CAChB,eAAgB,CAChB,eAAgB,CAChB,cAAe,CACf,aAAc,CAPlB,mBAWI,aAAc,CACd,aAAc,CACd,eAAgB,CAChB,eAAgB,CAChB,kBAAmB,CAfvB,uBAkBI,oBAAqB,CACrB,SAAU,CAEV,qBAAsB,CArB1B,8BAwBG,aAAc,CACd,aAAc,CACd,iBAAkB,CAClB,eAAgB,CA3BnB,6BA8BI,aAAc,CACd,aAAc,CACd,eAAgB,CAhCpB,eAqCI,eAAgB,CAChB,YAAa,CACb,gBAAiB,CACjB,YAAa,CACd,YAKD,aAAc,CACd,eAAgB,CAChB,eAAgB,CAChB,eAAgB,CAChB,aAAc,CACf,MAEC,iBAAkB,CAClB,UAAW,CACX,cAAe,CACf,WAAY,CACZ,eAAgB,CAChB,aAAc,CACf,kBAGC,gBAAiB,CACjB,YAAa,CACb,UAAW,CACX,gBAAiB,CACjB,sBAAuB,CACxB,wBAEC,iBAAkB,CAClB,4BAA6B,CAC7B,uBAAwB,CACxB,+BAAgC,CAChC,qBAAsB,CACtB,oBAAqB,CACtB,aAEC,YAAa,CACb,YAAa,CACb,gBAAiB,CACjB,sBAAuB,CACvB,aAAc,CACd,iBAAkB,CAClB,qBAAsB,CAPxB,oBAUI,aAAc,CAVlB,wBAaI,0CAA2C,CAb/C,yBAiBI,YAAa,CACb,qBAAsB,CACtB,eAAgB,CAChB,aAAc,CACd,eAAgB,CAChB,kBAAmB,CACnB,sBAAuB,CAvB3B,yBA2BI,oBAAqB,CA3BzB,uBA8BI,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CACnB,iBAAkB,CAjCtB,2BAoCK,aAAc,CAChB,UAGD,iBAAkB,CAClB,QAAS,CACT,OAAQ,CACR,4CAA6C,CAC7C,eAAgB,CACjB,gBAEC,eAAgB,CAChB,gBAAiB,CAClB,WAEC,UAAW,CACX,eAAgB,CAChB,iBAAkB,CAClB,eAAgB",sourcesContent:["* {\r\n  box-sizing: border-box;\r\n}\r\n\r\n\r\nhtml, body {\r\n  margin: 0;\r\n  overflow-x: hidden;\r\n}\r\n\r\nbody {\r\n  font-family: ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;\r\n  line-height: inherit;\r\n  width: 100%;\r\n  font-size: 17px;\r\n  color: #222222;\r\n}\r\n\r\n\r\n\r\n#progress{\r\n  height:1px;\r\n  background:#fff;\r\n  position:absolute;\r\n  width:0;\r\n  top:50%;\r\n  transition: 1s;\r\n}\r\n#progstat{\r\n  font-size:0.7em;\r\n  letter-spacing: 3px;\r\n  position:absolute;\r\n  top:50%;\r\n  margin-top:-40px;\r\n  width:100%;\r\n  text-align:center;\r\n  color:#fff;\r\n}\r\nhtml.stop_scroll {\r\n  overflow: hidden !important;\r\n}\r\n.intro_section {\r\n  display: flex;\r\n  padding: 10px;\r\n  min-height: 9400vh;\r\n  position: relative;\r\n}\r\n.container{\r\n  position: absolute;\r\n  top: 1700vh;\r\n  left: 0;\r\n  width: 7000vw;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-wrap: nowrap;\r\n  will-change: transform;\r\n}\r\n.pointHub_huddle {\r\n  width: 1px;\r\n  height: 1px;\r\n  position: absolute;\r\n  top: 32.5%;\r\n  left: 49%;\r\n}\r\n.pointCamera_huddle {\r\n  width: 1px;\r\n  height: 1px;\r\n  position: absolute;\r\n  top: 8%;\r\n  left: 47%;\r\n}\r\n/*****/\r\n.pointHub_small {\r\n  width: 1px;\r\n  height: 1px;\r\n  position: absolute;\r\n  top: 47%;\r\n  left: 44%;\r\n}\r\n.pointCamera_small {\r\n  width: 1px;\r\n  height: 1px;\r\n  position: absolute;\r\n  top: 23%;\r\n  left: 42%;\r\n}\r\n.pointBar_small {\r\n  width: 1px;\r\n  height: 1px;\r\n  position: absolute;\r\n  top: 45%;\r\n  left: 36.8%;\r\n}\r\n/*****/\r\n.pointView_medium {\r\n  width: 1px;\r\n  height: 1px;\r\n  position: absolute;\r\n  top: 46%;\r\n  left: 44%;\r\n}\r\n.pointCore_medium {\r\n  width: 1px;\r\n  height: 1px;\r\n  position: absolute;\r\n  top: 42%;\r\n  left: 33%;\r\n}\r\n.pointCamera_medium {\r\n  width: 1px;\r\n  height: 1px;\r\n  position: absolute;\r\n  top: 15%;\r\n  left: 26.5%;\r\n}\r\n.pointBar_medium {\r\n  width: 1px;\r\n  height: 1px;\r\n  position: absolute;\r\n  top: 37%;\r\n  left: 23.5%;\r\n}\r\n.pointMicro_medium {\r\n  width: 1px;\r\n  height: 1px;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 48%;\r\n}\r\n/*****/\r\n.pointView_large {\r\n  width: 1px;\r\n  height: 1px;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 43%;\r\n}\r\n.pointCore_large {\r\n  width: 1px;\r\n  height: 1px;\r\n  position: absolute;\r\n  top: 46%;\r\n  left: 58%;\r\n}\r\n.pointCamera_large {\r\n  width: 1px;\r\n  height: 1px;\r\n  position: absolute;\r\n  top: 20.5%;\r\n  left: 59%;\r\n}\r\n.pointBar_large {\r\n  width: 1px;\r\n  height: 1px;\r\n  position: absolute;\r\n  top: 42%;\r\n  left: 57%;\r\n}\r\n.pointMicro_large {\r\n  width: 1px;\r\n  height: 1px;\r\n  position: absolute;\r\n  top: 55%;\r\n  left: 60%;\r\n}\r\n/*****/\r\nimg {\r\n  width: 100%;\r\n  height: auto;\r\n  object-fit: cover;\r\n}\r\n\r\n/*************** mouse **/\r\n.mouse_scroll {\r\n  display: block;\r\n  margin: 0 auto;\r\n  width: 24px;\r\n  height: 100px;\r\n  position: fixed;\r\n  top: 90vh;\r\n  left: 50vw;\r\n  transform: translate(-50%, -50%);\r\n}\r\n\r\n\r\n.m_scroll_arrows\r\n{\r\n  display: block;\r\n  width: 5px;\r\n  height: 5px;\r\n  -ms-transform: rotate(45deg); /* IE 9 */\r\n  -webkit-transform: rotate(45deg); /* Chrome, Safari, Opera */\r\n  transform: rotate(45deg);\r\n\r\n  border-right: 2px solid white;\r\n  border-bottom: 2px solid white;\r\n  margin: 0 0 3px 4px;\r\n\r\n  width: 16px;\r\n  height: 16px;\r\n}\r\n\r\n\r\n.unu\r\n{\r\n  margin-top: 1px;\r\n}\r\n\r\n.unu, .doi, .trei\r\n{\r\n  -webkit-animation: mouse-scroll 1s infinite;\r\n  -moz-animation: mouse-scroll 1s infinite;\r\n  animation: mouse-scroll 1s infinite;\r\n\r\n}\r\n\r\n.unu\r\n{\r\n  -webkit-animation-delay: .1s;\r\n  -moz-animation-delay: .1s;\r\n  -webkit-animation-direction: alternate;\r\n\r\n  animation-direction: alternate;\r\n  animation-delay: alternate;\r\n}\r\n\r\n.doi\r\n{\r\n  -webkit-animation-delay: .2s;\r\n  -moz-animation-delay: .2s;\r\n  -webkit-animation-direction: alternate;\r\n\r\n  animation-delay: .2s;\r\n  animation-direction: alternate;\r\n\r\n  margin-top: -6px;\r\n}\r\n\r\n.trei\r\n{\r\n  -webkit-animation-delay: .3s;\r\n  -moz-animation-delay: .3s;\r\n  -webkit-animation-direction: alternate;\r\n\r\n  animation-delay: .3s;\r\n  animation-direction: alternate;\r\n\r\n\r\n  margin-top: -6px;\r\n}\r\n\r\n.mouse {\r\n  height: 42px;\r\n  width: 24px;\r\n  border-radius: 14px;\r\n  transform: none;\r\n  border: 2px solid white;\r\n  top: 170px;\r\n}\r\n\r\n.wheel {\r\n  height: 5px;\r\n  width: 2px;\r\n  display: block;\r\n  margin: 5px auto;\r\n  background: white;\r\n  position: relative;\r\n\r\n  height: 4px;\r\n  width: 4px;\r\n  border: 2px solid #fff;\r\n  -webkit-border-radius: 8px;\r\n  border-radius: 8px;\r\n}\r\n\r\n.wheel {\r\n  -webkit-animation: mouse-wheel 0.6s linear infinite;\r\n  -moz-animation: mouse-wheel 0.6s linear infinite;\r\n  animation: mouse-wheel 0.6s linear infinite;\r\n}\r\n\r\n@-webkit-keyframes mouse-wheel{\r\n  0% {\r\n    opacity: 1;\r\n    -webkit-transform: translateY(0);\r\n    -ms-transform: translateY(0);\r\n    transform: translateY(0);\r\n  }\r\n\r\n  100% {\r\n    opacity: 0;\r\n    -webkit-transform: translateY(6px);\r\n    -ms-transform: translateY(6px);\r\n    transform: translateY(6px);\r\n  }\r\n}\r\n@-moz-keyframes mouse-wheel {\r\n  0% { top: 1px; }\r\n  25% { top: 2px; }\r\n  50% { top: 3px;}\r\n  75% { top: 2px;}\r\n  100% { top: 1px;}\r\n}\r\n@-o-keyframes mouse-wheel {\r\n\r\n  0% { top: 1px; }\r\n  25% { top: 2px; }\r\n  50% { top: 3px;}\r\n  75% { top: 2px;}\r\n  100% { top: 1px;}\r\n}\r\n@keyframes mouse-wheel {\r\n\r\n  0% { top: 1px; }\r\n  25% { top: 2px; }\r\n  50% { top: 3px;}\r\n  75% { top: 2px;}\r\n  100% { top: 1px;}\r\n}\r\n\r\n@-webkit-keyframes mouse-scroll {\r\n\r\n  0%   { opacity: 0;}\r\n  50%  { opacity: .5;}\r\n  100% { opacity: 1;}\r\n}\r\n@-moz-keyframes mouse-scroll {\r\n\r\n  0%   { opacity: 0; }\r\n  50%  { opacity: .5; }\r\n  100% { opacity: 1; }\r\n}\r\n@-o-keyframes mouse-scroll {\r\n\r\n  0%   { opacity: 0; }\r\n  50%  { opacity: .5; }\r\n  100% { opacity: 1; }\r\n}\r\n@keyframes mouse-scroll {\r\n\r\n  0%   { opacity: 0; }\r\n  50%  { opacity: .5; }\r\n  100% { opacity: 1; }\r\n}\r\n/*************** mouse **/\r\n\r\n\r\n\r\nheader {\r\n  width: 100%;\r\n  position: fixed;\r\n  top: 0%;\r\n  left: 50%;\r\n  transform: translate(-50%,0%);\r\n  display: flex;\r\n  min-height: 50px;\r\n  color: #222222;\r\n}\r\n\r\n.top_menu_wrap {\r\n  display: flex;\r\n  flex-wrap: nowrap;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n  max-width: 90vw;\r\n  border-bottom: 1px solid #222;\r\n  margin: 0 auto;\r\n  height: 50px;\r\n\r\n}\r\n.col-left {\r\n  display: flex;\r\n  flex-wrap: nowrap;\r\n  width: 50%;\r\n  align-items: center;\r\n}\r\n.col-right {\r\n  display: flex;\r\n  flex-wrap: nowrap;\r\n  width: 45%;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n.link{\r\n  cursor: pointer;\r\n}\r\n.top_panel div {\r\n  padding: 3vw;\r\n  font-size: 1.5vw;\r\n  color: #fff;\r\n  line-height: 4.5vh;\r\n}\r\n.top_panel ul{\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n.small_space_group_image,\r\n.medium_space_group_image {\r\n  opacity: 0;\r\n  position: absolute;\r\n  top: 0;\r\n}\r\n.small_space {\r\n  visibility: hidden;\r\n  opacity: 0;\r\n}\r\n.text_hub_left, .text_hub_right,\r\n.cam_hub_left, .cam_hub_right,\r\n.bar_hub_left, .bar_hub_right,\r\n.controller_hub_right, .controller_hub_left,\r\n.core_hub_right, .core_hub_left,\r\n.micro_hub_right, .micro_hub_left,\r\n.many_hub_right, .many_hub_left{\r\n  opacity: 0;\r\n  position: absolute;\r\n  top: 0;\r\n}\r\n.logo_Lenovo_top {\r\n  max-width: 67px;\r\n  margin-right: 100px;\r\n  cursor: pointer;\r\n}\r\n.logo_Microsoft_top {\r\n  max-width: 100px;\r\n}\r\n\r\n.fake_header .link {\r\n  cursor: pointer;\r\n}\r\n.fake_header .configuration_link, .fake_header .theStory_link,.fake_header .try_link{\r\n  color: white !important;\r\n}\r\n.fake_header .top_menu_wrap {\r\n  border-bottom: 1px solid #fff !important;\r\n}\r\n\r\n\r\n.start {\r\n  width: 100vw;\r\n}\r\n.red_clip {\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: #d80018;\r\n  clip-path: inset(0px 0px 0px 0px);\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 9;\r\n  transform: translate(0,0) !important;\r\n}\r\n.fake_header {\r\n  width: 100%;\r\n  position: fixed;\r\n  top: 0%;\r\n  left: 50%;\r\n  transform: translate(-50%,0%);\r\n  display: flex;\r\n  z-index: 99;\r\n  min-height: 56px;\r\n  color: white;\r\n}\r\n.fake_header .top_menu_wrap{\r\n  border-bottom: 1px solid #fff;\r\n}\r\n.re_title_wrap {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100vh;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n.re_title {\r\n  font-size: 4.5vw;\r\n  color: #5c5c5c;\r\n  position: fixed;\r\n}\r\n.re_title span {\r\n  border: 7px solid #d80018;\r\n  padding: 0.2vw 0.9vw;\r\n  color: #d80018;\r\n}\r\n.fake_re_title_wrap {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100vh;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n.fake_re_title {\r\n  font-size: 4.5vw;\r\n  color: white;\r\n}\r\n.fake_re_title span {\r\n  border: 7px solid #d80018;\r\n  padding: 0.2vw 0.9vw;\r\n  color: #d80018;\r\n}\r\n.bg_video {\r\n  overflow: hidden;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  bottom: 0;\r\n  right: 0;\r\n  width: 100%;\r\n  height: 100vh;\r\n  object-fit: cover;\r\n  opacity: 0;\r\n  will-change: opacity;\r\n}\r\n.bg_video video{\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n.smooth_fix {\r\n  width: 100%;\r\n  height: 100vh;\r\n  top: 0;\r\n  left: 0;\r\n  position: absolute;\r\n}\r\n.y1920_wrap {\r\n  position: absolute;\r\n  width: 85%;\r\n  height: auto;\r\n  top: 50%;\r\n  left: 37%;\r\n  transform: translate(-50%, -180%) scale(4.9);\r\n  transform-origin: bottom left;\r\n  will-change: transform;\r\n}\r\n.y1920_wrap .num1 {\r\n  opacity: 0;\r\n}\r\n.y1920_text {\r\n  position: absolute;\r\n  top: 20%;\r\n  left: 50%;\r\n  transform: translate(-50%,0%);\r\n  will-change: transform;\r\n  font-size: 8vh;\r\n  font-weight: bold;\r\n  color: white;\r\n  text-align: center;\r\n}\r\n.y1920_text div {\r\n  will-change: transform;\r\n}\r\n.y1920_line {\r\n  opacity: 0;\r\n  visibility: hidden;\r\n  transform: scale(1.5);\r\n  will-change: transform;\r\n}\r\n.y1920_line:nth-child(5),.y1920_line:nth-child(6) {\r\n  color:  #d80018;\r\n}\r\n.bg_main_image {\r\n  width: 100%;\r\n  height: 100vh;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  opacity: 0;\r\n  will-change: opacity;\r\n}\r\n\r\n.bg_main_image .tr_img{\r\n  position: absolute;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  object-fit: cover;\r\n  will-change: transform;\r\n}\r\n.img1920 {\r\n  top: 0vh;\r\n}\r\n.img1950, .img1980, .img2010 {\r\n  top: -100vh;\r\n}\r\n.lady {\r\n  top: 0vh;\r\n  opacity: 0;\r\n}\r\n.left_column {\r\n  width: 25%;\r\n  height: 100vh;\r\n  position: fixed;\r\n  top: 0;\r\n  left: -25%;\r\n  overflow: hidden;\r\n  will-change: transform;\r\n}\r\n.scroll_bg {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 0;\r\n  left: 0;\r\n}\r\n.scroll_bg_1920{\r\n  background: #6ec93f;\r\n  will-change: transform;\r\n}\r\n.scroll_bg_1950 {\r\n  background: #3299cc;\r\n  will-change: transform;\r\n}\r\n.scroll_bg_1980 {\r\n  background: #eb610a;\r\n  will-change: transform;\r\n}\r\n.scroll_bg_2010 {\r\n  background: #f8bc00;\r\n  will-change: transform;\r\n}\r\n.scroll_image {\r\n  width: 3500px;\r\n  height: auto;\r\n  position: absolute;\r\n  bottom: 0vh;\r\n  left: 445px;\r\n  will-change: transform;\r\n}\r\n.scroll_text {\r\n  position: absolute;\r\n  width: 100%;\r\n  top: 25vh;\r\n  max-width: 75%;\r\n  left: 50%;\r\n  transform: translate(-50%, 0%);\r\n  color: white;\r\n  font-size: 2.6vh;\r\n  line-height: 4.4vh;\r\n  will-change: transform;\r\n}\r\n.txt {\r\n  position: absolute;\r\n  left: 50%;\r\n  width: 100%;\r\n  transform: translate(-50%,0%);\r\n  will-change: transform;\r\n}\r\n.txt div{\r\n  visibility: hidden;\r\n  opacity: 0;\r\n  transform: scale(2);\r\n  will-change: transform;\r\n}\r\n\r\n.num5, .num1_in2010,.num8,.num2_in2010,.num0 {\r\n  opacity: 0;\r\n}\r\n.mt50 {\r\n  margin-top: 50px;\r\n}\r\n.last_device {\r\n  position: absolute;\r\n  bottom: 44px;\r\n  width: 85%;\r\n  left: 50%;\r\n  transform: translate(-50%, 0%) scale(0.8);\r\n  opacity: 0;\r\n}\r\n.text_lady {\r\n  text-align: center;\r\n  font-size: 2.6vw;\r\n  line-height: 3.4vw;\r\n}\r\n.top_btn {\r\n  opacity: 0;\r\n  visibility: hidden;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n}\r\n\r\n.hub_huddle_btn, .camera_huddle_btn,\r\n.view_medium_btn, .core_medium_btn,\r\n.camera_medium_btn, .bar_medium_btn, .micro_medium_btn{\r\n  opacity: 1;\r\n  visibility: inherit;\r\n}\r\n\r\n.black_cube {\r\n  background: #000;\r\n  width: 100vh;\r\n  height: 100vh;\r\n  border-radius: 2vw;\r\n  color: white;\r\n  font-size: 4.5vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  .text {\r\n    max-width: 60%;\r\n  }\r\n   .title{\r\n     font-size: 4.5vw;\r\n     margin: 40px 0 150px 0;\r\n  }\r\n}\r\n/**************** step2*/\r\n\r\n.panel {\r\n  will-change: transform;\r\n  min-height: 100vh;\r\n  min-width: 100vw;\r\n  position: relative;\r\n}\r\n\r\n\r\n.sub_menu_bot {\r\n  display: flex;\r\n  position: fixed;\r\n  width: 100vw;\r\n  bottom: 0;\r\n  left: 0;\r\n}\r\n\r\n.sub_menu_bot_wrap {\r\n  display: flex;\r\n  max-width: 80%;\r\n  flex-wrap: nowrap;\r\n  align-items: center;\r\n  margin: 0 auto;\r\n  justify-content: space-between;\r\n  min-height: 90px;\r\n  font-size: 1.5vw;\r\n  white-space: nowrap;\r\n  width: 100%;\r\n\r\n  .divider {\r\n    width: 2px;\r\n    height: 45px;\r\n    display: flex;\r\n    background: #222222;\r\n  }\r\n  .bot_menu_item {\r\n    cursor: pointer;\r\n    display: flex;\r\n  }\r\n}\r\n\r\n\r\n.orange {\r\n  background: #ffb100;\r\n  border-radius: 2vw;\r\n  min-width: 125vw;\r\n\r\n  .text_anim{\r\n    font-size: 4vw;\r\n    line-height: 7vw;\r\n    color: #000;\r\n    top: 10vh;\r\n    left: 110vh;\r\n    position: absolute;\r\n\r\n    span {\r\n      font-weight: bold;\r\n    }\r\n    div {\r\n      opacity: 0;\r\n      transform: translate(20%,0);\r\n    }\r\n  }\r\n}\r\n\r\n.text_section {\r\n  font-size: 2vw;\r\n  position: fixed;\r\n  top: 8vw;\r\n  left: 5vw;\r\n  width: 100%;\r\n\r\n  span {\r\n    font-weight: bold;\r\n  }\r\n}\r\n.text_huddle {\r\n  color: #6ec93f;\r\n  position: absolute;\r\n  top: 0;\r\n\r\n}\r\n.text_small_section {\r\n  position: absolute;\r\n  color: #0e58c7;\r\n  top: 0;\r\n  opacity: 0;\r\n}\r\n.text_medium_section {\r\n  position: absolute;\r\n  color: #E36DB1;\r\n  top: 0;\r\n  opacity: 0;\r\n}\r\n.text_large_section {\r\n  position: absolute;\r\n  color: #F5691C;\r\n  top: 0;\r\n  opacity: 0;\r\n}\r\n.text_many_section {\r\n  position: absolute;\r\n  color: #63C2DF;\r\n  top: -100px;\r\n  opacity: 0;\r\n}\r\n\r\n.sub_menu_top_wrap {\r\n    position: fixed;\r\n    width: 100vw;\r\n    top: 50px;\r\n    left: -7px;\r\n    align-items: center;\r\n    z-index: 99;\r\n    visibility: hidden;\r\n    opacity: 0;\r\n    background: white;\r\n\r\n    .sub_menu_top {\r\n      display: flex;\r\n      align-items: center;\r\n      width: 90vw;\r\n      position: relative;\r\n      height: 50px;\r\n      margin: 0 auto;\r\n      border-bottom: 1px solid #000;\r\n\r\n\r\n\r\n      .device{\r\n        width: 60px;\r\n        height: 4.4vh;\r\n        cursor: pointer;\r\n        border: 1px solid #fff;\r\n        border-radius: 3px;\r\n        padding: 0vh 1vh;\r\n        cursor: pointer;\r\n\r\n\r\n        img {\r\n          width: auto;\r\n          height: 4vh;\r\n          object-fit: contain;\r\n        }\r\n      }\r\n    }\r\n\r\n  .title {\r\n    font-size: 3.5vh;\r\n    color: #ff0000;\r\n    display: flex;\r\n    white-space: nowrap;\r\n    width: max-content;\r\n  }\r\n}\r\n.device_wrap {\r\n  display: flex;\r\n  flex-wrap: nowrap;\r\n}\r\n.device {\r\n  margin-left: 3vw;\r\n  position: relative;\r\n}\r\n.device_image_section {\r\n  position: fixed;\r\n  top: 20vw;\r\n  left: 5vw;\r\n  width: 35vw;\r\n\r\n  .title {\r\n    text-align: center;\r\n    font-size: 2vw;\r\n    margin-top: 33vh;\r\n  }\r\n}\r\n.room_image_wrap {\r\n  position: fixed;\r\n  top:145px;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: calc(100vh - 120px);\r\n  overflow: hidden;\r\n}\r\n.room_image_rel {\r\n  position: relative;\r\n}\r\n.sub_menu_top_from_medium{\r\n  visibility: hidden;\r\n  opacity: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  border-bottom: 1px solid #222;\r\n  max-width: 90vw;\r\n  left: 50%;\r\n  transform: translate(-50%,0%);\r\n  width: 100%;\r\n  height: 5vh;\r\n\r\n  .device_wrap{\r\n    position: absolute;\r\n    top: 0;\r\n    left: 25vw;\r\n    max-width: 75vw;\r\n    width: 100%;\r\n    overflow: hidden;\r\n    background: #fff;\r\n  }\r\n\r\n  .device_medium{\r\n    width: 60px;\r\n    height: 52px;\r\n    margin-left: 3vw;\r\n    border: 1px solid #fff;\r\n    cursor: pointer;\r\n    position: relative;\r\n  }\r\n  .device_medium4 {\r\n    width: 250px;\r\n  }\r\n  img {\r\n    width: 100%;\r\n    height: auto;\r\n    object-fit: cover;\r\n  }\r\n}\r\n\r\n.room_image {\r\n  position: absolute;\r\n  top: 50px;\r\n  right: 5vw;\r\n  width: 55vw;\r\n}\r\n.small_room_image {\r\n  right: -1vw;\r\n  width: 75vw;\r\n  top: -90px;\r\n}\r\n\r\n\r\n\r\n.image_sequence, .seq {\r\n  position: fixed;\r\n  top: 35vh;\r\n  left: 4vw;\r\n  width: 29vw;\r\n}\r\n.main_image {\r\n  position: fixed;\r\n  top: 35vh;\r\n  left: 10vw;\r\n  width: 20vw;\r\n}\r\n.hub_main_image, .camera_main_image, .bar_main_image,\r\n.core_main_image,.micro_main_image, .smartview_main_image,\r\n.smartcore_main_image{\r\n  position: fixed;\r\n  top: 35vh;\r\n  left: 10vw;\r\n  width: 20vw;\r\n  opacity: 0;\r\n  transform-origin: 0% 0%;\r\n  will-change: transform;\r\n}\r\n.micro_main_image {\r\n  top: 40vh;\r\n  left: 6vw;\r\n  width: 20vw;\r\n}\r\n.core_main_image {\r\n  top: 38vh;\r\n  left: 5vw;\r\n  width: 27vw;\r\n}\r\n.smartview_main_image {\r\n  top: 43vh;\r\n  left: 12vw;\r\n  width: 14vw;\r\n}\r\n.camera_main_image {\r\n  top: 34vh;\r\n  left: 8vw;\r\n}\r\n.bar_main_image {\r\n  top: 47.3vh;\r\n  left: 9vw;\r\n}\r\n.hub_sequence, .cam_sequence, .bar_sequence,\r\n.smartview_sequence, .smartcore_sequence, .micro_sequence {\r\n  opacity: 0;\r\n}\r\n\r\n.group_image {\r\n  position: fixed;\r\n  top: 36vh;\r\n  left: 8vw;\r\n  width: 29vw;\r\n}\r\n\r\n.trg_start_config {\r\n  position: absolute;\r\n  right: 0;\r\n  top: 50%;\r\n  width: 50px;\r\n  height: 50px;\r\n}\r\n.trg_start_hub_360 {\r\n  position: absolute;\r\n  right: 0;\r\n  top: 50%;\r\n  width: 50px;\r\n  height: 50px;\r\n}\r\n.trg_start_camera_360, .trg_start_hub_360_small,\r\n.trg_start_bar_360_small,\r\n.trg_start_hub_360_small_s,\r\n.trg_start_camera_360_small_s,\r\n.trg_start_bar_360_small_s,\r\n.green_box,\r\n.trg_start_smartview_360_medium_s,\r\n.trg_start_smartcore_360_medium_s,\r\n.trg_start_camera_360_medium_s,\r\n.trg_start_bar_360_medium_s,\r\n.trg_start_micro_360_medium_s,\r\n.trg_start_smartview_360_large_s,\r\n.trg_start_smartcore_360_large_s,\r\n.trg_start_camera_360_large_s,\r\n.trg_start_bar_360_large_s,\r\n.trg_start_micro_360_large_s{\r\n  position: absolute;\r\n  right: 0;\r\n  top: 50%;\r\n  width: 50px;\r\n  height: 50px;\r\n}\r\n.top_panel {\r\n  width: 30vw;\r\n  top: 100px;\r\n  position: fixed;\r\n  background: #6ec93f;\r\n  transform: translate(-50%, 0%);\r\n  transform-origin: 0% 100%;\r\n  height: 0vh;\r\n  z-index: 8;\r\n  will-change: transform;\r\n}\r\n.top_panel_left {\r\n  left: 50vw;\r\n}\r\n.top_panel_right {\r\n  left: 81vw;\r\n}\r\ncanvas {\r\n  object-fit: contain;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 50%;\r\n  transform: translate(-50%,0%);\r\n}\r\n.room, .sub_menu_bot {\r\n  visibility: hidden;\r\n  opacity: 0;\r\n}\r\n.device3 {\r\n  opacity: 0;\r\n  width: 250px !important;\r\n\r\n  img {\r\n    width: 100% !important;\r\n    height: auto !important;\r\n\r\n  }\r\n}\r\n.small_room_image{\r\n  opacity: 0;\r\n}\r\n.medium_room_image{\r\n  top: 14px;\r\n  right: 1vw;\r\n  width: 63vw;\r\n  opacity: 0;\r\n}\r\n.large_room_image {\r\n  opacity: 0;\r\n}\r\n.many_spaces {\r\n  opacity: 0;\r\n  visibility: hidden;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n}\r\n.many_spaces_rel {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: relative;\r\n}\r\n.many_space_group_image {\r\n  opacity: 0;\r\n  width: 90%;\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 0 auto;\r\n}\r\n.many_space_group_image img {\r\n   width: 100%;\r\n   height: auto;\r\n   object-fit: cover;\r\n}\r\n.hero_black {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  z-index: 999999;\r\n}\r\n.hero_black_bg {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 100vw;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  border-radius: 180px;\r\n  background: #000;\r\n  will-change: transform;\r\n}\r\n.hero_black_rel {\r\n  width: 100%;\r\n  height: calc(100% - 50px);\r\n  margin-top: 50px;\r\n  position: relative;\r\n  display: flex;\r\n  flex-wrap: nowrap;\r\n  color: #e1e1e1;\r\n}\r\n.col-1 {\r\n  width: 60%;\r\n  padding: 0 4vw 0 4vw;\r\n  display: flex;\r\n  margin-top: 10vh;\r\n  align-items: center;\r\n  flex-direction: column;\r\n}\r\n.col-2 {\r\n  width: 35%;\r\n  padding: 0 4vw 0 4vw;\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  margin-top: 10vh;\r\n}\r\n\r\n.hero_black{\r\n  .sub_title {\r\n    color: #63C2DF;\r\n    font-size: 1.5vw;\r\n    font-weight: 400;\r\n    line-height: 2vw;\r\n    margin-top: 6vh;\r\n    max-width: 80%;\r\n  }\r\n\r\n .title {\r\n    color: #ECD4B5;\r\n    font-size: 4vw;\r\n    font-weight: 600;\r\n    line-height: 4vw;\r\n    white-space: nowrap;\r\n  }\r\n  .text_wrap {\r\n    transform: scale(0.9);\r\n    opacity: 0;\r\n\r\n    will-change: transform;\r\n  }\r\n .text_wrap .title {\r\n   color: #EFAA4E;\r\n   font-size: 1vw;\r\n   line-height: 1.2vw;\r\n   font-weight: 400;\r\n  }\r\n  .text_wrap .text {\r\n    color: #e1e1e1;\r\n    font-size: 1vw;\r\n    font-weight: 400;\r\n  }\r\n\r\n\r\n  li {\r\n    list-style: none;\r\n    display: flex;\r\n    flex-wrap: nowrap;\r\n    margin: 7vh 0;\r\n  }\r\n\r\n}\r\n\r\n.title_Kyle {\r\n  color: #63C2DF;\r\n  font-size: 1.5vw;\r\n  font-weight: 400;\r\n  line-height: 2vw;\r\n  max-width: 80%;\r\n}\r\n.icon {\r\n  border-radius: 50%;\r\n  width: 50px;\r\n  min-width: 50px;\r\n  height: 50px;\r\n  min-height: 50px;\r\n  margin: 0 50px;\r\n}\r\n.photo_block_wrap {\r\n  //z-index: 99;\r\n  background: white;\r\n  display: flex;\r\n  width: 100%;\r\n  flex-wrap: nowrap;\r\n  justify-content: center;\r\n}\r\n.calendly-inline-widget {\r\n  position: relative;\r\n  min-width: 37.45vw !important;\r\n  height: 100vh !important;\r\n  transform: scale(0.6) !important;\r\n  width: 100% !important;\r\n  transform-origin: 0 0;\r\n}\r\n.photo_block {\r\n  display: flex;\r\n  width: 22.6vw;\r\n  flex-wrap: nowrap;\r\n  justify-content: center;\r\n  margin: 20px 0;\r\n  position: relative;\r\n  flex-direction: column;\r\n\r\n  .photo {\r\n    max-width: 33%;\r\n  }\r\n  .photo img {\r\n    transform: scale(1.3) translate(20px, 17px);\r\n  }\r\n\r\n  .text_block{\r\n    display: flex;\r\n    flex-direction: column;\r\n    font-size: 1.5vw;\r\n    color: #222222;\r\n    font-weight: 400;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n  }\r\n  .linkedin  a{\r\n    text-decoration: none;\r\n  }\r\n  .linkedin  {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    text-align: center;\r\n  }\r\n  .linkedin  img{\r\n     max-width: 75%;\r\n  }\r\n}\r\n.len_logo {\r\n  position: absolute;\r\n  bottom: 0;\r\n  right: 0;\r\n  transform: rotate(-90deg) translate(60%, 64%);\r\n  max-width: 150px;\r\n}\r\n.calendar_block {\r\n  margin-top: 20px;\r\n  background: white;\r\n}\r\n.title_lin {\r\n  color: #000;\r\n  font-weight: 700;\r\n  margin-right: 50px;\r\n  font-size: 1.3vw;\r\n}\r\n"],sourceRoot:""}]);const s=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r="",n=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),n&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=t(e),n&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(t,r,n,i,o){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(n)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<t.length;c++){var u=[].concat(t[c]);n&&a[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),r&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=r):u[2]=r),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),e.push(u))}},e}},537:t=>{t.exports=function(t){var e=t[1],r=t[3];if(!r)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(i," */"),a=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[e].concat(a).concat([o]).join("\n")}return[e].join("\n")}},439:(t,e,r)=>{var n=r(379),i=r.n(n),o=r(795),a=r.n(o),s=r(569),l=r.n(s),c=r(565),u=r.n(c),p=r(216),d=r.n(p),h=r(589),f=r.n(h),A=r(168),_={};_.styleTagTransform=f(),_.setAttributes=u(),_.insert=l().bind(null,"head"),_.domAPI=a(),_.insertStyleElement=d();var m=i()(A.default,_);if(!A.default.locals||t.hot.invalidate){var g=!A.default.locals,C=g?A:A.default.locals;t.hot.accept(168,(e=>{A=r(168),function(t,e,r){if(!t&&e||t&&!e)return!1;var n;for(n in t)if((!r||"default"!==n)&&t[n]!==e[n])return!1;for(n in e)if(!(r&&"default"===n||t[n]))return!1;return!0}(C,g?A:A.default.locals,g)?(C=g?A:A.default.locals,m(A.default)):t.hot.invalidate()}))}t.hot.dispose((function(){m()})),A.default&&A.default.locals&&A.default.locals},379:t=>{var e=[];function r(t){for(var r=-1,n=0;n<e.length;n++)if(e[n].identifier===t){r=n;break}return r}function n(t,n){for(var o={},a=[],s=0;s<t.length;s++){var l=t[s],c=n.base?l[0]+n.base:l[0],u=o[c]||0,p="".concat(c," ").concat(u);o[c]=u+1;var d=r(p),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)e[d].references++,e[d].updater(h);else{var f=i(h,n);n.byIndex=s,e.splice(s,0,{identifier:p,updater:f,references:1})}a.push(p)}return a}function i(t,e){var r=e.domAPI(e);return r.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;r.update(t=e)}else r.remove()}}t.exports=function(t,i){var o=n(t=t||[],i=i||{});return function(t){t=t||[];for(var a=0;a<o.length;a++){var s=r(o[a]);e[s].references--}for(var l=n(t,i),c=0;c<o.length;c++){var u=r(o[c]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}o=l}}},569:t=>{var e={};t.exports=function(t,r){var n=function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,r)=>{t.exports=function(t){var e=r.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(r){!function(t,e,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var i=void 0!==r.layer;i&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,i&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var o=r.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,r)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},n={};function i(t){var e=n[t];if(void 0!==e){if(void 0!==e.error)throw e.error;return e.exports}var o=n[t]={id:t,exports:{}};try{var a={id:t,module:o,factory:r[t],require:i};i.i.forEach((function(t){t(a)})),o=a.module,a.factory.call(o.exports,o,o.exports,a.require)}catch(t){throw o.error=t,t}return o.exports}i.m=r,i.c=n,i.i=[],i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var r in e)i.o(e,r)&&!i.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},i.hu=t=>t+"."+i.h()+".hot-update.js",i.hmrF=()=>"main."+i.h()+".hot-update.json",i.h=()=>"ce0cbbe4fc42a876d6ad",i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),t={},e="gsap-starter:",i.l=(r,n,o,a)=>{if(t[r])t[r].push(n);else{var s,l;if(void 0!==o)for(var c=document.getElementsByTagName("script"),u=0;u<c.length;u++){var p=c[u];if(p.getAttribute("src")==r||p.getAttribute("data-webpack")==e+o){s=p;break}}s||(l=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,i.nc&&s.setAttribute("nonce",i.nc),s.setAttribute("data-webpack",e+o),s.src=r,0!==s.src.indexOf(window.location.origin+"/")&&(s.crossOrigin="anonymous"),s.integrity=i.sriHashes[a],s.crossOrigin="anonymous"),t[r]=[n];var d=(e,n)=>{s.onerror=s.onload=null,clearTimeout(h);var i=t[r];if(delete t[r],s.parentNode&&s.parentNode.removeChild(s),i&&i.forEach((t=>t(n))),e)return e(n)},h=setTimeout(d.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=d.bind(null,s.onerror),s.onload=d.bind(null,s.onload),l&&document.head.appendChild(s)}},i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t,e,r,n={},o=i.c,a=[],s=[],l="idle",c=0,u=[];function p(t){l=t;for(var e=[],r=0;r<s.length;r++)e[r]=s[r].call(null,t);return Promise.all(e)}function d(){0==--c&&p("ready").then((function(){if(0===c){var t=u;u=[];for(var e=0;e<t.length;e++)t[e]()}}))}function h(t){if("idle"!==l)throw new Error("check() is only allowed in idle status");return p("check").then(i.hmrM).then((function(r){return r?p("prepare").then((function(){var n=[];return e=[],Promise.all(Object.keys(i.hmrC).reduce((function(t,o){return i.hmrC[o](r.c,r.r,r.m,t,e,n),t}),[])).then((function(){return e=function(){return t?A(t):p("ready").then((function(){return n}))},0===c?e():new Promise((function(t){u.push((function(){t(e())}))}));var e}))})):p(_()?"ready":"idle").then((function(){return null}))}))}function f(t){return"ready"!==l?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+l+")")})):A(t)}function A(t){t=t||{},_();var n=e.map((function(e){return e(t)}));e=void 0;var i=n.map((function(t){return t.error})).filter(Boolean);if(i.length>0)return p("abort").then((function(){throw i[0]}));var o=p("dispose");n.forEach((function(t){t.dispose&&t.dispose()}));var a,s=p("apply"),l=function(t){a||(a=t)},c=[];return n.forEach((function(t){if(t.apply){var e=t.apply(l);if(e)for(var r=0;r<e.length;r++)c.push(e[r])}})),Promise.all([o,s]).then((function(){return a?p("fail").then((function(){throw a})):r?A(t).then((function(t){return c.forEach((function(e){t.indexOf(e)<0&&t.push(e)})),t})):p("idle").then((function(){return c}))}))}function _(){if(r)return e||(e=[]),Object.keys(i.hmrI).forEach((function(t){r.forEach((function(r){i.hmrI[t](r,e)}))})),r=void 0,!0}i.hmrD=n,i.i.push((function(u){var A,_,m,g,C=u.module,v=function(e,r){var n=o[r];if(!n)return e;var i=function(i){if(n.hot.active){if(o[i]){var s=o[i].parents;-1===s.indexOf(r)&&s.push(r)}else a=[r],t=i;-1===n.children.indexOf(i)&&n.children.push(i)}else console.warn("[HMR] unexpected require("+i+") from disposed module "+r),a=[];return e(i)},s=function(t){return{configurable:!0,enumerable:!0,get:function(){return e[t]},set:function(r){e[t]=r}}};for(var u in e)Object.prototype.hasOwnProperty.call(e,u)&&"e"!==u&&Object.defineProperty(i,u,s(u));return i.e=function(t){return function(t){switch(l){case"ready":p("prepare");case"prepare":return c++,t.then(d,d),t;default:return t}}(e.e(t))},i}(u.require,u.id);C.hot=(A=u.id,_=C,g={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:m=t!==A,_requireSelf:function(){a=_.parents.slice(),t=m?void 0:A,i(A)},active:!0,accept:function(t,e,r){if(void 0===t)g._selfAccepted=!0;else if("function"==typeof t)g._selfAccepted=t;else if("object"==typeof t&&null!==t)for(var n=0;n<t.length;n++)g._acceptedDependencies[t[n]]=e||function(){},g._acceptedErrorHandlers[t[n]]=r;else g._acceptedDependencies[t]=e||function(){},g._acceptedErrorHandlers[t]=r},decline:function(t){if(void 0===t)g._selfDeclined=!0;else if("object"==typeof t&&null!==t)for(var e=0;e<t.length;e++)g._declinedDependencies[t[e]]=!0;else g._declinedDependencies[t]=!0},dispose:function(t){g._disposeHandlers.push(t)},addDisposeHandler:function(t){g._disposeHandlers.push(t)},removeDisposeHandler:function(t){var e=g._disposeHandlers.indexOf(t);e>=0&&g._disposeHandlers.splice(e,1)},invalidate:function(){switch(this._selfInvalidated=!0,l){case"idle":e=[],Object.keys(i.hmrI).forEach((function(t){i.hmrI[t](A,e)})),p("ready");break;case"ready":Object.keys(i.hmrI).forEach((function(t){i.hmrI[t](A,e)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(A)}},check:h,apply:f,status:function(t){if(!t)return l;s.push(t)},addStatusHandler:function(t){s.push(t)},removeStatusHandler:function(t){var e=s.indexOf(t);e>=0&&s.splice(e,1)},data:n[A]},t=void 0,g),C.parents=a,C.children=[],a=[],u.require=v})),i.hmrC={},i.hmrI={}})(),(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),(()=>{var t,e,r,n,o,a=i.hmrS_jsonp=i.hmrS_jsonp||{179:0},s={};function l(e,r){return t=r,new Promise(((t,r)=>{s[e]=t;var n=i.p+i.hu(e),o=new Error;i.l(n,(t=>{if(s[e]){s[e]=void 0;var n=t&&("load"===t.type?"missing":t.type),i=t&&t.target&&t.target.src;o.message="Loading hot update chunk "+e+" failed.\n("+n+": "+i+")",o.name="ChunkLoadError",o.type=n,o.request=i,r(o)}}))}))}function c(t){function s(t){for(var e=[t],r={},n=e.map((function(t){return{chain:[t],id:t}}));n.length>0;){var o=n.pop(),a=o.id,s=o.chain,c=i.c[a];if(c&&(!c.hot._selfAccepted||c.hot._selfInvalidated)){if(c.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:a};if(c.hot._main)return{type:"unaccepted",chain:s,moduleId:a};for(var u=0;u<c.parents.length;u++){var p=c.parents[u],d=i.c[p];if(d){if(d.hot._declinedDependencies[a])return{type:"declined",chain:s.concat([p]),moduleId:a,parentId:p};-1===e.indexOf(p)&&(d.hot._acceptedDependencies[a]?(r[p]||(r[p]=[]),l(r[p],[a])):(delete r[p],e.push(p),n.push({chain:s.concat([p]),id:p})))}}}}return{type:"accepted",moduleId:t,outdatedModules:e,outdatedDependencies:r}}function l(t,e){for(var r=0;r<e.length;r++){var n=e[r];-1===t.indexOf(n)&&t.push(n)}}i.f&&delete i.f.jsonpHmr,e=void 0;var c={},u=[],p={},d=function(t){console.warn("[HMR] unexpected require("+t.id+") to disposed module")};for(var h in r)if(i.o(r,h)){var f,A=r[h],_=!1,m=!1,g=!1,C="";switch((f=A?s(h):{type:"disposed",moduleId:h}).chain&&(C="\nUpdate propagation: "+f.chain.join(" -> ")),f.type){case"self-declined":t.onDeclined&&t.onDeclined(f),t.ignoreDeclined||(_=new Error("Aborted because of self decline: "+f.moduleId+C));break;case"declined":t.onDeclined&&t.onDeclined(f),t.ignoreDeclined||(_=new Error("Aborted because of declined dependency: "+f.moduleId+" in "+f.parentId+C));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(f),t.ignoreUnaccepted||(_=new Error("Aborted because "+h+" is not accepted"+C));break;case"accepted":t.onAccepted&&t.onAccepted(f),m=!0;break;case"disposed":t.onDisposed&&t.onDisposed(f),g=!0;break;default:throw new Error("Unexception type "+f.type)}if(_)return{error:_};if(m)for(h in p[h]=A,l(u,f.outdatedModules),f.outdatedDependencies)i.o(f.outdatedDependencies,h)&&(c[h]||(c[h]=[]),l(c[h],f.outdatedDependencies[h]));g&&(l(u,[f.moduleId]),p[h]=d)}r=void 0;for(var v,y=[],b=0;b<u.length;b++){var w=u[b],B=i.c[w];B&&(B.hot._selfAccepted||B.hot._main)&&p[w]!==d&&!B.hot._selfInvalidated&&y.push({module:w,require:B.hot._requireSelf,errorHandler:B.hot._selfAccepted})}return{dispose:function(){var t;n.forEach((function(t){delete a[t]})),n=void 0;for(var e,r=u.slice();r.length>0;){var o=r.pop(),s=i.c[o];if(s){var l={},p=s.hot._disposeHandlers;for(b=0;b<p.length;b++)p[b].call(null,l);for(i.hmrD[o]=l,s.hot.active=!1,delete i.c[o],delete c[o],b=0;b<s.children.length;b++){var d=i.c[s.children[b]];d&&(t=d.parents.indexOf(o))>=0&&d.parents.splice(t,1)}}}for(var h in c)if(i.o(c,h)&&(s=i.c[h]))for(v=c[h],b=0;b<v.length;b++)e=v[b],(t=s.children.indexOf(e))>=0&&s.children.splice(t,1)},apply:function(e){for(var r in p)i.o(p,r)&&(i.m[r]=p[r]);for(var n=0;n<o.length;n++)o[n](i);for(var a in c)if(i.o(c,a)){var s=i.c[a];if(s){v=c[a];for(var l=[],d=[],h=[],f=0;f<v.length;f++){var A=v[f],_=s.hot._acceptedDependencies[A],m=s.hot._acceptedErrorHandlers[A];if(_){if(-1!==l.indexOf(_))continue;l.push(_),d.push(m),h.push(A)}}for(var g=0;g<l.length;g++)try{l[g].call(null,v)}catch(r){if("function"==typeof d[g])try{d[g](r,{moduleId:a,dependencyId:h[g]})}catch(n){t.onErrored&&t.onErrored({type:"accept-error-handler-errored",moduleId:a,dependencyId:h[g],error:n,originalError:r}),t.ignoreErrored||(e(n),e(r))}else t.onErrored&&t.onErrored({type:"accept-errored",moduleId:a,dependencyId:h[g],error:r}),t.ignoreErrored||e(r)}}}for(var C=0;C<y.length;C++){var b=y[C],w=b.module;try{b.require(w)}catch(r){if("function"==typeof b.errorHandler)try{b.errorHandler(r,{moduleId:w,module:i.c[w]})}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:w,error:n,originalError:r}),t.ignoreErrored||(e(n),e(r))}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:w,error:r}),t.ignoreErrored||e(r)}}return u}}}self.webpackHotUpdategsap_starter=(e,n,a)=>{for(var l in n)i.o(n,l)&&(r[l]=n[l],t&&t.push(l));a&&o.push(a),s[e]&&(s[e](),s[e]=void 0)},i.hmrI.jsonp=function(t,e){r||(r={},o=[],n=[],e.push(c)),i.o(r,t)||(r[t]=i.m[t])},i.hmrC.jsonp=function(t,s,u,p,d,h){d.push(c),e={},n=s,r=u.reduce((function(t,e){return t[e]=!1,t}),{}),o=[],t.forEach((function(t){i.o(a,t)&&void 0!==a[t]?(p.push(l(t,h)),e[t]=!0):e[t]=!1})),i.f&&(i.f.jsonpHmr=function(t,r){e&&i.o(e,t)&&!e[t]&&(r.push(l(t)),e[t]=!0)})},i.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(i.p+i.hmrF()).then((t=>{if(404!==t.status){if(!t.ok)throw new Error("Failed to fetch update manifest "+t.statusText);return t.json()}}))}})(),i.nc=void 0,i(727)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,